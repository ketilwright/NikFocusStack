
NikFocusStackAdaFruitLcdShield.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016a  00800100  00007ed0  00007f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007ed0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c5  0080026a  0080026a  000080ee  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  000080ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005f  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000748  00000000  00000000  00008153  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b2a9  00000000  00000000  0000889b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027b4  00000000  00000000  00013b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000067ee  00000000  00000000  000162f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a14  00000000  00000000  0001cae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000159a7  00000000  00000000  0001e4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000370d  00000000  00000000  00033ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  000375b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006d96  00000000  00000000  00037c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e0 c1       	rjmp	.+960    	; 0x3c2 <__dtors_end>
       2:	00 00       	nop
       4:	06 c2       	rjmp	.+1036   	; 0x412 <__bad_interrupt>
       6:	00 00       	nop
       8:	04 c2       	rjmp	.+1032   	; 0x412 <__bad_interrupt>
       a:	00 00       	nop
       c:	02 c2       	rjmp	.+1028   	; 0x412 <__bad_interrupt>
       e:	00 00       	nop
      10:	00 c2       	rjmp	.+1024   	; 0x412 <__bad_interrupt>
      12:	00 00       	nop
      14:	fe c1       	rjmp	.+1020   	; 0x412 <__bad_interrupt>
      16:	00 00       	nop
      18:	fc c1       	rjmp	.+1016   	; 0x412 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fa c1       	rjmp	.+1012   	; 0x412 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f8 c1       	rjmp	.+1008   	; 0x412 <__bad_interrupt>
      22:	00 00       	nop
      24:	f6 c1       	rjmp	.+1004   	; 0x412 <__bad_interrupt>
      26:	00 00       	nop
      28:	f4 c1       	rjmp	.+1000   	; 0x412 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f2 c1       	rjmp	.+996    	; 0x412 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f0 c1       	rjmp	.+992    	; 0x412 <__bad_interrupt>
      32:	00 00       	nop
      34:	ee c1       	rjmp	.+988    	; 0x412 <__bad_interrupt>
      36:	00 00       	nop
      38:	ec c1       	rjmp	.+984    	; 0x412 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ea c1       	rjmp	.+980    	; 0x412 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 7e 2c 	jmp	0x58fc	; 0x58fc <__vector_16>
      44:	e6 c1       	rjmp	.+972    	; 0x412 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 c0 29 	jmp	0x5380	; 0x5380 <__vector_18>
      4c:	0c 94 01 2a 	jmp	0x5402	; 0x5402 <__vector_19>
      50:	e0 c1       	rjmp	.+960    	; 0x412 <__bad_interrupt>
      52:	00 00       	nop
      54:	de c1       	rjmp	.+956    	; 0x412 <__bad_interrupt>
      56:	00 00       	nop
      58:	dc c1       	rjmp	.+952    	; 0x412 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	da c1       	rjmp	.+948    	; 0x412 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <__vector_24>
      64:	d6 c1       	rjmp	.+940    	; 0x412 <__bad_interrupt>
      66:	00 00       	nop
      68:	dd 26       	eor	r13, r29
      6a:	e1 26       	eor	r14, r17
      6c:	e1 26       	eor	r14, r17
      6e:	e1 26       	eor	r14, r17
      70:	e1 26       	eor	r14, r17
      72:	e1 26       	eor	r14, r17
      74:	e1 26       	eor	r14, r17
      76:	e1 26       	eor	r14, r17
      78:	e1 25       	eor	r30, r1
      7a:	e1 26       	eor	r14, r17
      7c:	e1 26       	eor	r14, r17
      7e:	e1 26       	eor	r14, r17
      80:	e1 26       	eor	r14, r17
      82:	e1 26       	eor	r14, r17
      84:	e1 26       	eor	r14, r17
      86:	e1 26       	eor	r14, r17
      88:	e1 25       	eor	r30, r1
      8a:	e1 26       	eor	r14, r17
      8c:	e1 26       	eor	r14, r17
      8e:	e1 26       	eor	r14, r17
      90:	e1 26       	eor	r14, r17
      92:	e1 26       	eor	r14, r17
      94:	e1 26       	eor	r14, r17
      96:	e1 26       	eor	r14, r17
      98:	ea 25       	eor	r30, r10
      9a:	e1 26       	eor	r14, r17
      9c:	e1 26       	eor	r14, r17
      9e:	e1 26       	eor	r14, r17
      a0:	e1 26       	eor	r14, r17
      a2:	e1 26       	eor	r14, r17
      a4:	e1 26       	eor	r14, r17
      a6:	e1 26       	eor	r14, r17
      a8:	15 26       	eor	r1, r21
      aa:	e1 26       	eor	r14, r17
      ac:	e1 26       	eor	r14, r17
      ae:	e1 26       	eor	r14, r17
      b0:	e1 26       	eor	r14, r17
      b2:	e1 26       	eor	r14, r17
      b4:	e1 26       	eor	r14, r17
      b6:	e1 26       	eor	r14, r17
      b8:	ea 25       	eor	r30, r10
      ba:	e1 26       	eor	r14, r17
      bc:	e1 26       	eor	r14, r17
      be:	e1 26       	eor	r14, r17
      c0:	e1 26       	eor	r14, r17
      c2:	e1 26       	eor	r14, r17
      c4:	e1 26       	eor	r14, r17
      c6:	e1 26       	eor	r14, r17
      c8:	1a 26       	eor	r1, r26
      ca:	e1 26       	eor	r14, r17
      cc:	e1 26       	eor	r14, r17
      ce:	e1 26       	eor	r14, r17
      d0:	e1 26       	eor	r14, r17
      d2:	e1 26       	eor	r14, r17
      d4:	e1 26       	eor	r14, r17
      d6:	e1 26       	eor	r14, r17
      d8:	1f 26       	eor	r1, r31
      da:	e1 26       	eor	r14, r17
      dc:	e1 26       	eor	r14, r17
      de:	e1 26       	eor	r14, r17
      e0:	e1 26       	eor	r14, r17
      e2:	e1 26       	eor	r14, r17
      e4:	e1 26       	eor	r14, r17
      e6:	e1 26       	eor	r14, r17
      e8:	34 26       	eor	r3, r20
      ea:	e1 26       	eor	r14, r17
      ec:	e1 26       	eor	r14, r17
      ee:	e1 26       	eor	r14, r17
      f0:	e1 26       	eor	r14, r17
      f2:	e1 26       	eor	r14, r17
      f4:	e1 26       	eor	r14, r17
      f6:	e1 26       	eor	r14, r17
      f8:	61 26       	eor	r6, r17
      fa:	e1 26       	eor	r14, r17
      fc:	e1 26       	eor	r14, r17
      fe:	e1 26       	eor	r14, r17
     100:	e1 26       	eor	r14, r17
     102:	e1 26       	eor	r14, r17
     104:	e1 26       	eor	r14, r17
     106:	e1 26       	eor	r14, r17
     108:	24 26       	eor	r2, r20
     10a:	e1 26       	eor	r14, r17
     10c:	e1 26       	eor	r14, r17
     10e:	e1 26       	eor	r14, r17
     110:	e1 26       	eor	r14, r17
     112:	e1 26       	eor	r14, r17
     114:	e1 26       	eor	r14, r17
     116:	e1 26       	eor	r14, r17
     118:	40 26       	eor	r4, r16
     11a:	e1 26       	eor	r14, r17
     11c:	e1 26       	eor	r14, r17
     11e:	e1 26       	eor	r14, r17
     120:	e1 26       	eor	r14, r17
     122:	e1 26       	eor	r14, r17
     124:	e1 26       	eor	r14, r17
     126:	e1 26       	eor	r14, r17
     128:	63 26       	eor	r6, r19
     12a:	e1 26       	eor	r14, r17
     12c:	e1 26       	eor	r14, r17
     12e:	e1 26       	eor	r14, r17
     130:	e1 26       	eor	r14, r17
     132:	e1 26       	eor	r14, r17
     134:	e1 26       	eor	r14, r17
     136:	e1 26       	eor	r14, r17
     138:	63 26       	eor	r6, r19
     13a:	e1 26       	eor	r14, r17
     13c:	e1 26       	eor	r14, r17
     13e:	e1 26       	eor	r14, r17
     140:	e1 26       	eor	r14, r17
     142:	e1 26       	eor	r14, r17
     144:	e1 26       	eor	r14, r17
     146:	e1 26       	eor	r14, r17
     148:	63 26       	eor	r6, r19
     14a:	e1 26       	eor	r14, r17
     14c:	e1 26       	eor	r14, r17
     14e:	e1 26       	eor	r14, r17
     150:	e1 26       	eor	r14, r17
     152:	e1 26       	eor	r14, r17
     154:	e1 26       	eor	r14, r17
     156:	e1 26       	eor	r14, r17
     158:	63 26       	eor	r6, r19
     15a:	e1 26       	eor	r14, r17
     15c:	e1 26       	eor	r14, r17
     15e:	e1 26       	eor	r14, r17
     160:	e1 26       	eor	r14, r17
     162:	e1 26       	eor	r14, r17
     164:	e1 26       	eor	r14, r17
     166:	e1 26       	eor	r14, r17
     168:	6b 26       	eor	r6, r27
     16a:	e1 26       	eor	r14, r17
     16c:	e1 26       	eor	r14, r17
     16e:	e1 26       	eor	r14, r17
     170:	e1 26       	eor	r14, r17
     172:	e1 26       	eor	r14, r17
     174:	e1 26       	eor	r14, r17
     176:	e1 26       	eor	r14, r17
     178:	a3 26       	eor	r10, r19
     17a:	e1 26       	eor	r14, r17
     17c:	e1 26       	eor	r14, r17
     17e:	e1 26       	eor	r14, r17
     180:	e1 26       	eor	r14, r17
     182:	e1 26       	eor	r14, r17
     184:	e1 26       	eor	r14, r17
     186:	e1 26       	eor	r14, r17
     188:	6b 26       	eor	r6, r27
     18a:	e1 26       	eor	r14, r17
     18c:	e1 26       	eor	r14, r17
     18e:	e1 26       	eor	r14, r17
     190:	e1 26       	eor	r14, r17
     192:	e1 26       	eor	r14, r17
     194:	e1 26       	eor	r14, r17
     196:	e1 26       	eor	r14, r17
     198:	a3 26       	eor	r10, r19
     19a:	e1 26       	eor	r14, r17
     19c:	e1 26       	eor	r14, r17
     19e:	e1 26       	eor	r14, r17
     1a0:	e1 26       	eor	r14, r17
     1a2:	e1 26       	eor	r14, r17
     1a4:	e1 26       	eor	r14, r17
     1a6:	e1 26       	eor	r14, r17
     1a8:	85 26       	eor	r8, r21
     1aa:	e1 26       	eor	r14, r17
     1ac:	e1 26       	eor	r14, r17
     1ae:	e1 26       	eor	r14, r17
     1b0:	e1 26       	eor	r14, r17
     1b2:	e1 26       	eor	r14, r17
     1b4:	e1 26       	eor	r14, r17
     1b6:	e1 26       	eor	r14, r17
     1b8:	a6 26       	eor	r10, r22
     1ba:	e1 26       	eor	r14, r17
     1bc:	e1 26       	eor	r14, r17
     1be:	e1 26       	eor	r14, r17
     1c0:	e1 26       	eor	r14, r17
     1c2:	e1 26       	eor	r14, r17
     1c4:	e1 26       	eor	r14, r17
     1c6:	e1 26       	eor	r14, r17
     1c8:	a6 26       	eor	r10, r22
     1ca:	e1 26       	eor	r14, r17
     1cc:	e1 26       	eor	r14, r17
     1ce:	e1 26       	eor	r14, r17
     1d0:	e1 26       	eor	r14, r17
     1d2:	e1 26       	eor	r14, r17
     1d4:	e1 26       	eor	r14, r17
     1d6:	e1 26       	eor	r14, r17
     1d8:	bc 26       	eor	r11, r28
     1da:	e1 26       	eor	r14, r17
     1dc:	e1 26       	eor	r14, r17
     1de:	e1 26       	eor	r14, r17
     1e0:	e1 26       	eor	r14, r17
     1e2:	e1 26       	eor	r14, r17
     1e4:	e1 26       	eor	r14, r17
     1e6:	e1 26       	eor	r14, r17
     1e8:	d8 26       	eor	r13, r24
     1ea:	e1 26       	eor	r14, r17
     1ec:	e1 26       	eor	r14, r17
     1ee:	e1 26       	eor	r14, r17
     1f0:	e1 26       	eor	r14, r17
     1f2:	e1 26       	eor	r14, r17
     1f4:	e1 26       	eor	r14, r17
     1f6:	e1 26       	eor	r14, r17
     1f8:	d8 26       	eor	r13, r24
     1fa:	e1 26       	eor	r14, r17
     1fc:	e1 26       	eor	r14, r17
     1fe:	e1 26       	eor	r14, r17
     200:	e1 26       	eor	r14, r17
     202:	e1 26       	eor	r14, r17
     204:	e1 26       	eor	r14, r17
     206:	e1 26       	eor	r14, r17
     208:	e1 26       	eor	r14, r17
     20a:	e1 26       	eor	r14, r17
     20c:	e1 26       	eor	r14, r17
     20e:	e1 26       	eor	r14, r17
     210:	e1 26       	eor	r14, r17
     212:	e1 26       	eor	r14, r17
     214:	e1 26       	eor	r14, r17
     216:	e1 26       	eor	r14, r17
     218:	e1 26       	eor	r14, r17
     21a:	e1 26       	eor	r14, r17
     21c:	e1 26       	eor	r14, r17
     21e:	e1 26       	eor	r14, r17
     220:	e1 26       	eor	r14, r17
     222:	e1 26       	eor	r14, r17
     224:	e1 26       	eor	r14, r17
     226:	e1 26       	eor	r14, r17
     228:	e1 26       	eor	r14, r17
     22a:	e1 26       	eor	r14, r17
     22c:	e1 26       	eor	r14, r17
     22e:	e1 26       	eor	r14, r17
     230:	e1 26       	eor	r14, r17
     232:	e1 26       	eor	r14, r17
     234:	e1 26       	eor	r14, r17
     236:	e1 26       	eor	r14, r17
     238:	e1 26       	eor	r14, r17
     23a:	e1 26       	eor	r14, r17
     23c:	e1 26       	eor	r14, r17
     23e:	e1 26       	eor	r14, r17
     240:	e1 26       	eor	r14, r17
     242:	e1 26       	eor	r14, r17
     244:	e1 26       	eor	r14, r17
     246:	e1 26       	eor	r14, r17
     248:	e1 26       	eor	r14, r17
     24a:	e1 26       	eor	r14, r17
     24c:	e1 26       	eor	r14, r17
     24e:	e1 26       	eor	r14, r17
     250:	e1 26       	eor	r14, r17
     252:	e1 26       	eor	r14, r17
     254:	e1 26       	eor	r14, r17
     256:	e1 26       	eor	r14, r17
     258:	e1 26       	eor	r14, r17

0000025a <__trampolines_end>:
     25a:	55 53       	subi	r21, 0x35	; 53
     25c:	42 20       	and	r4, r2
     25e:	64 69       	ori	r22, 0x94	; 148
     260:	64 20       	and	r6, r4
     262:	6e 6f       	ori	r22, 0xFE	; 254
     264:	74 20       	and	r7, r4
     266:	73 74       	andi	r23, 0x43	; 67
     268:	61 72       	andi	r22, 0x21	; 33
     26a:	74 2e       	mov	r7, r20
	...

0000026d <_ZZN10NikType0034InitEhhbE3__c>:
     26d:	4e 6f 74 20 6e 69 6b 6f 6e 00                       Not nikon.

00000277 <_ZZN10NikType0037OnEventEPK7NKEventE3__c>:
     277:	43 61 70 20 4f 4b 00                                Cap OK.

0000027e <_ZZN10NikType00313captureToCardEvE3__c>:
     27e:	43 61 70 74 75 72 65 00                             Capture.

00000286 <_ZZN10NikType00316prepareNextFrameEvE3__c>:
     286:	4c 56 20 6f 6e 00                                   LV on.

0000028c <_ZZN10NikType00316prepareNextFrameEvE3__c_0>:
     28c:	46 6f 63 75 73 00                                   Focus.

00000292 <_ZZN10NikType00316prepareNextFrameEvE3__c_1>:
     292:	4c 56 20 6f 66 66 00                                LV off.

00000299 <_ZZN10NikType00316prepareNextFrameEvE3__c_2>:
     299:	49 6e 66 00                                         Inf.

0000029d <_ZZN10NikType00319focusStackNextFrameEvE3__c>:
     29d:	43 61 72 64 46 75 6c 6c 00                          CardFull.

000002a6 <_ZZN10NikType00320restoreOriginalFocusEvE3__c>:
     2a6:	52 65 73 74 6f 72 65 00                             Restore.

000002ae <_ZZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelperE3__c>:
     2ae:	20 20 20 20 20 20 20 00                                    .

000002b6 <_ZZN20RunFocusStackHandler11reportFrameEjE3__c>:
     2b6:	20 20 20 20 00                                          .

000002bb <_ZZN20RunFocusStackHandler11reportDelayEmE3__c>:
     2bb:	44 65 6c 61 79 00                                   Delay.

000002c1 <_ZZN20RunFocusStackHandler11reportDelayEmE3__c_0>:
     2c1:	20 20 20 20 00                                          .

000002c6 <_ZZN20RunFocusStackHandler11reportDelayEmE3__c_1>:
     2c6:	20 20 20 20 20 20 20 20 00                                  .

000002cf <_ZZN12SetupHandler19updateDriveAmountUIEiE3__c>:
     2cf:	30 00                                               0.

000002d1 <_ZZN12SetupHandler14updateFramesUIEiE3__c>:
     2d1:	30 00                                               0.

000002d3 <_ZZN12SetupHandler18updateFrameDelayUIEiE3__c>:
     2d3:	30 00                                               0.

000002d5 <_ZZN12SetupHandler20updateRestoreFocusUIEiE3__c>:
     2d5:	20 20 20 00                                            .

000002d9 <_ZZN12SetupHandler20updateRestoreFocusUIEiE3__c_0>:
     2d9:	59 65 73 00                                         Yes.

000002dd <_ZZN12SetupHandler20updateRestoreFocusUIEiE3__c_1>:
     2dd:	4e 6f 00                                            No.

000002e0 <digital_pin_to_timer_PGM>:
     2e0:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     2f0:	00 00 00 00                                         ....

000002f4 <digital_pin_to_bit_mask_PGM>:
     2f4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     304:	04 08 10 20                                         ... 

00000308 <digital_pin_to_port_PGM>:
     308:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     318:	03 03 03 03                                         ....

0000031c <port_to_output_PGM>:
     31c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000326 <port_to_mode_PGM>:
     326:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000330 <_ZZN20MultiByteValueParser5ParseEPPhPjE3__c>:
     330:	42 75 66 66 65 72 20 70 6f 69 6e 74 65 72 20 69     Buffer pointer i
     340:	73 20 4e 55 4c 4c 21 0d 0a 00                       s NULL!...

0000034a <_ZZN3USB10inTransferEhhPjPhE3__c_4>:
     34a:	0d 0a 00                                            ...

0000034d <_ZZN3USB10inTransferEhhPjPhE3__c_3>:
     34d:	28 55 53 42 3a 3a 49 6e 54 72 61 6e 73 66 65 72     (USB::InTransfer
     35d:	29 20 65 70 20 72 65 71 75 65 73 74 65 64 20 00     ) ep requested .

0000036d <_ZZN3USB10inTransferEhhPjPhE3__c_2>:
     36d:	0d 0a 00                                            ...

00000370 <_ZZN3USB10inTransferEhhPjPhE3__c_1>:
     370:	28 55 53 42 3a 3a 49 6e 54 72 61 6e 73 66 65 72     (USB::InTransfer
     380:	29 20 61 64 64 72 20 72 65 71 75 65 73 74 65 64     ) addr requested
     390:	20 00                                                .

00000392 <_ZZN3USB10inTransferEhhPjPhE3__c_0>:
     392:	0d 0a 00                                            ...

00000395 <_ZZN3USB10inTransferEhhPjPhE3__c>:
     395:	28 55 53 42 3a 3a 49 6e 54 72 61 6e 73 66 65 72     (USB::InTransfer
     3a5:	29 20 53 65 74 41 64 64 72 65 73 73 20 46 61 69     ) SetAddress Fai
     3b5:	6c 65 64 20 00                                      led .

000003ba <__ctors_start>:
     3ba:	ee 0f       	add	r30, r30
     3bc:	18 29       	or	r17, r8
     3be:	bd 2a       	or	r11, r29

000003c0 <__ctors_end>:
     3c0:	fa 0f       	add	r31, r26

000003c2 <__dtors_end>:
     3c2:	11 24       	eor	r1, r1
     3c4:	1f be       	out	0x3f, r1	; 63
     3c6:	cf ef       	ldi	r28, 0xFF	; 255
     3c8:	d8 e0       	ldi	r29, 0x08	; 8
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	cd bf       	out	0x3d, r28	; 61

000003ce <__do_copy_data>:
     3ce:	12 e0       	ldi	r17, 0x02	; 2
     3d0:	a0 e0       	ldi	r26, 0x00	; 0
     3d2:	b1 e0       	ldi	r27, 0x01	; 1
     3d4:	e0 ed       	ldi	r30, 0xD0	; 208
     3d6:	fe e7       	ldi	r31, 0x7E	; 126
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <__do_copy_data+0x10>
     3da:	05 90       	lpm	r0, Z+
     3dc:	0d 92       	st	X+, r0
     3de:	aa 36       	cpi	r26, 0x6A	; 106
     3e0:	b1 07       	cpc	r27, r17
     3e2:	d9 f7       	brne	.-10     	; 0x3da <__do_copy_data+0xc>

000003e4 <__do_clear_bss>:
     3e4:	25 e0       	ldi	r18, 0x05	; 5
     3e6:	aa e6       	ldi	r26, 0x6A	; 106
     3e8:	b2 e0       	ldi	r27, 0x02	; 2
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <.do_clear_bss_start>

000003ec <.do_clear_bss_loop>:
     3ec:	1d 92       	st	X+, r1

000003ee <.do_clear_bss_start>:
     3ee:	af 32       	cpi	r26, 0x2F	; 47
     3f0:	b2 07       	cpc	r27, r18
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <.do_clear_bss_loop>

000003f4 <__do_global_ctors>:
     3f4:	13 e0       	ldi	r17, 0x03	; 3
     3f6:	c0 ec       	ldi	r28, 0xC0	; 192
     3f8:	d3 e0       	ldi	r29, 0x03	; 3
     3fa:	04 c0       	rjmp	.+8      	; 0x404 <__do_global_ctors+0x10>
     3fc:	22 97       	sbiw	r28, 0x02	; 2
     3fe:	fe 01       	movw	r30, r28
     400:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <__tablejump__>
     404:	ca 3b       	cpi	r28, 0xBA	; 186
     406:	d1 07       	cpc	r29, r17
     408:	c9 f7       	brne	.-14     	; 0x3fc <__do_global_ctors+0x8>
     40a:	0e 94 13 2b 	call	0x5626	; 0x5626 <main>
     40e:	0c 94 5c 3f 	jmp	0x7eb8	; 0x7eb8 <__do_global_dtors>

00000412 <__bad_interrupt>:
     412:	f6 cd       	rjmp	.-1044   	; 0x0 <__vectors>

00000414 <_ZL8wiresendh>:
#else
 #include "WProgram.h"
#endif

// minihelper
static inline void wiresend(uint8_t x) {
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	1f 92       	push	r1
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	89 83       	std	Y+1, r24	; 0x01
#if ARDUINO >= 100
  WIRE.write((uint8_t)x);
     420:	69 81       	ldd	r22, Y+1	; 0x01
     422:	88 e6       	ldi	r24, 0x68	; 104
     424:	94 e0       	ldi	r25, 0x04	; 4
     426:	0e 94 01 28 	call	0x5002	; 0x5002 <_ZN7TwoWire5writeEh>
#else
  WIRE.send(x);
#endif
}
     42a:	0f 90       	pop	r0
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <_ZL8wirerecvv>:

static inline uint8_t wirerecv(void) {
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
#if ARDUINO >= 100
  return WIRE.read();
     43a:	88 e6       	ldi	r24, 0x68	; 104
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	0e 94 9a 28 	call	0x5134	; 0x5134 <_ZN7TwoWire4readEv>
#else
  return WIRE.receive();
#endif
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <_ZN17Adafruit_MCP230175beginEh>:

////////////////////////////////////////////////////////////////////////////////

void Adafruit_MCP23017::begin(uint8_t addr) {
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	00 d0       	rcall	.+0      	; 0x44e <_ZN17Adafruit_MCP230175beginEh+0x6>
     44e:	1f 92       	push	r1
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	9a 83       	std	Y+2, r25	; 0x02
     456:	89 83       	std	Y+1, r24	; 0x01
     458:	6b 83       	std	Y+3, r22	; 0x03
  if (addr > 7) {
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	88 30       	cpi	r24, 0x08	; 8
     45e:	10 f0       	brcs	.+4      	; 0x464 <_ZN17Adafruit_MCP230175beginEh+0x1c>
    addr = 7;
     460:	87 e0       	ldi	r24, 0x07	; 7
     462:	8b 83       	std	Y+3, r24	; 0x03
  }
  i2caddr = addr;
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	2b 81       	ldd	r18, Y+3	; 0x03
     46a:	fc 01       	movw	r30, r24
     46c:	20 83       	st	Z, r18

  WIRE.begin();
     46e:	88 e6       	ldi	r24, 0x68	; 104
     470:	94 e0       	ldi	r25, 0x04	; 4
     472:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <_ZN7TwoWire5beginEv>

  
  // set defaults!
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	fc 01       	movw	r30, r24
     47c:	80 81       	ld	r24, Z
     47e:	80 62       	ori	r24, 0x20	; 32
     480:	88 2f       	mov	r24, r24
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	bc 01       	movw	r22, r24
     486:	88 e6       	ldi	r24, 0x68	; 104
     488:	94 e0       	ldi	r25, 0x04	; 4
     48a:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRA);
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	c1 df       	rcall	.-126    	; 0x414 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port A
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	bf df       	rcall	.-130    	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     496:	88 e6       	ldi	r24, 0x68	; 104
     498:	94 e0       	ldi	r25, 0x04	; 4
     49a:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>

  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	9a 81       	ldd	r25, Y+2	; 0x02
     4a2:	fc 01       	movw	r30, r24
     4a4:	80 81       	ld	r24, Z
     4a6:	80 62       	ori	r24, 0x20	; 32
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	bc 01       	movw	r22, r24
     4ae:	88 e6       	ldi	r24, 0x68	; 104
     4b0:	94 e0       	ldi	r25, 0x04	; 4
     4b2:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_IODIRB);
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	ad df       	rcall	.-166    	; 0x414 <_ZL8wiresendh>
  wiresend(0xFF);  // all inputs on port B
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	ab df       	rcall	.-170    	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     4be:	88 e6       	ldi	r24, 0x68	; 104
     4c0:	94 e0       	ldi	r25, 0x04	; 4
     4c2:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
}
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <_ZN17Adafruit_MCP230175beginEv>:


void Adafruit_MCP23017::begin(void) {
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <_ZN17Adafruit_MCP230175beginEv+0x6>
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	9a 83       	std	Y+2, r25	; 0x02
     4de:	89 83       	std	Y+1, r24	; 0x01
  begin(0);
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	9a 81       	ldd	r25, Y+2	; 0x02
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	b0 df       	rcall	.-160    	; 0x448 <_ZN17Adafruit_MCP230175beginEh>
}
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <_ZN17Adafruit_MCP230177pinModeEhh>:

void Adafruit_MCP23017::pinMode(uint8_t p, uint8_t d) {
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <_ZN17Adafruit_MCP230177pinModeEhh+0x6>
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <_ZN17Adafruit_MCP230177pinModeEhh+0x8>
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <_ZN17Adafruit_MCP230177pinModeEhh+0xa>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	9c 83       	std	Y+4, r25	; 0x04
     502:	8b 83       	std	Y+3, r24	; 0x03
     504:	6d 83       	std	Y+5, r22	; 0x05
     506:	4e 83       	std	Y+6, r20	; 0x06
  uint8_t iodir;
  uint8_t iodiraddr;

  // only 16 bits!
  if (p > 15)
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	80 31       	cpi	r24, 0x10	; 16
     50c:	08 f0       	brcs	.+2      	; 0x510 <_ZN17Adafruit_MCP230177pinModeEhh+0x1e>
    return;
     50e:	62 c0       	rjmp	.+196    	; 0x5d4 <_ZN17Adafruit_MCP230177pinModeEhh+0xe2>

  if (p < 8)
     510:	8d 81       	ldd	r24, Y+5	; 0x05
     512:	88 30       	cpi	r24, 0x08	; 8
     514:	10 f4       	brcc	.+4      	; 0x51a <_ZN17Adafruit_MCP230177pinModeEhh+0x28>
    iodiraddr = MCP23017_IODIRA;
     516:	1a 82       	std	Y+2, r1	; 0x02
     518:	05 c0       	rjmp	.+10     	; 0x524 <_ZN17Adafruit_MCP230177pinModeEhh+0x32>
  else {
    iodiraddr = MCP23017_IODIRB;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	8a 83       	std	Y+2, r24	; 0x02
    p -= 8;
     51e:	8d 81       	ldd	r24, Y+5	; 0x05
     520:	88 50       	subi	r24, 0x08	; 8
     522:	8d 83       	std	Y+5, r24	; 0x05
  }

  // read the current IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	9c 81       	ldd	r25, Y+4	; 0x04
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
     52c:	80 62       	ori	r24, 0x20	; 32
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	bc 01       	movw	r22, r24
     534:	88 e6       	ldi	r24, 0x68	; 104
     536:	94 e0       	ldi	r25, 0x04	; 4
     538:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);	
     53c:	8a 81       	ldd	r24, Y+2	; 0x02
     53e:	6a df       	rcall	.-300    	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     540:	88 e6       	ldi	r24, 0x68	; 104
     542:	94 e0       	ldi	r25, 0x04	; 4
     544:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
     548:	8b 81       	ldd	r24, Y+3	; 0x03
     54a:	9c 81       	ldd	r25, Y+4	; 0x04
     54c:	fc 01       	movw	r30, r24
     54e:	80 81       	ld	r24, Z
     550:	80 62       	ori	r24, 0x20	; 32
     552:	88 2f       	mov	r24, r24
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	41 e0       	ldi	r20, 0x01	; 1
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	bc 01       	movw	r22, r24
     55c:	88 e6       	ldi	r24, 0x68	; 104
     55e:	94 e0       	ldi	r25, 0x04	; 4
     560:	0e 94 81 27 	call	0x4f02	; 0x4f02 <_ZN7TwoWire11requestFromEii>
  iodir = wirerecv();
     564:	66 df       	rcall	.-308    	; 0x432 <_ZL8wirerecvv>
     566:	89 83       	std	Y+1, r24	; 0x01

  // set the pin and direction
  if (d == INPUT) {
     568:	8e 81       	ldd	r24, Y+6	; 0x06
     56a:	88 23       	and	r24, r24
     56c:	81 f4       	brne	.+32     	; 0x58e <_ZN17Adafruit_MCP230177pinModeEhh+0x9c>
    iodir |= 1 << p; 
     56e:	8d 81       	ldd	r24, Y+5	; 0x05
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	02 2e       	mov	r0, r18
     57a:	02 c0       	rjmp	.+4      	; 0x580 <_ZN17Adafruit_MCP230177pinModeEhh+0x8e>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	0a 94       	dec	r0
     582:	e2 f7       	brpl	.-8      	; 0x57c <_ZN17Adafruit_MCP230177pinModeEhh+0x8a>
     584:	98 2f       	mov	r25, r24
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	89 2b       	or	r24, r25
     58a:	89 83       	std	Y+1, r24	; 0x01
     58c:	0f c0       	rjmp	.+30     	; 0x5ac <_ZN17Adafruit_MCP230177pinModeEhh+0xba>
  } else {
    iodir &= ~(1 << p);
     58e:	8d 81       	ldd	r24, Y+5	; 0x05
     590:	28 2f       	mov	r18, r24
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	02 c0       	rjmp	.+4      	; 0x59e <_ZN17Adafruit_MCP230177pinModeEhh+0xac>
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	2a 95       	dec	r18
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <_ZN17Adafruit_MCP230177pinModeEhh+0xa8>
     5a2:	98 2f       	mov	r25, r24
     5a4:	90 95       	com	r25
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	89 23       	and	r24, r25
     5aa:	89 83       	std	Y+1, r24	; 0x01
  }

  // write the new IODIR
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     5ac:	8b 81       	ldd	r24, Y+3	; 0x03
     5ae:	9c 81       	ldd	r25, Y+4	; 0x04
     5b0:	fc 01       	movw	r30, r24
     5b2:	80 81       	ld	r24, Z
     5b4:	80 62       	ori	r24, 0x20	; 32
     5b6:	88 2f       	mov	r24, r24
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	bc 01       	movw	r22, r24
     5bc:	88 e6       	ldi	r24, 0x68	; 104
     5be:	94 e0       	ldi	r25, 0x04	; 4
     5c0:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(iodiraddr);
     5c4:	8a 81       	ldd	r24, Y+2	; 0x02
     5c6:	26 df       	rcall	.-436    	; 0x414 <_ZL8wiresendh>
  wiresend(iodir);	
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	24 df       	rcall	.-440    	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     5cc:	88 e6       	ldi	r24, 0x68	; 104
     5ce:	94 e0       	ldi	r25, 0x04	; 4
     5d0:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
}
     5d4:	26 96       	adiw	r28, 0x06	; 6
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <_ZN17Adafruit_MCP2301710readGPIOABEv>:

uint16_t Adafruit_MCP23017::readGPIOAB() {
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <_ZN17Adafruit_MCP2301710readGPIOABEv+0x6>
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <_ZN17Adafruit_MCP2301710readGPIOABEv+0x8>
     5ee:	1f 92       	push	r1
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	9d 83       	std	Y+5, r25	; 0x05
     5f6:	8c 83       	std	Y+4, r24	; 0x04
  uint16_t ba = 0;
     5f8:	1a 82       	std	Y+2, r1	; 0x02
     5fa:	19 82       	std	Y+1, r1	; 0x01
  uint8_t a;

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     5fc:	8c 81       	ldd	r24, Y+4	; 0x04
     5fe:	9d 81       	ldd	r25, Y+5	; 0x05
     600:	fc 01       	movw	r30, r24
     602:	80 81       	ld	r24, Z
     604:	80 62       	ori	r24, 0x20	; 32
     606:	88 2f       	mov	r24, r24
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	bc 01       	movw	r22, r24
     60c:	88 e6       	ldi	r24, 0x68	; 104
     60e:	94 e0       	ldi	r25, 0x04	; 4
     610:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
     614:	82 e1       	ldi	r24, 0x12	; 18
     616:	fe de       	rcall	.-516    	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     618:	88 e6       	ldi	r24, 0x68	; 104
     61a:	94 e0       	ldi	r25, 0x04	; 4
     61c:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 2);
     620:	8c 81       	ldd	r24, Y+4	; 0x04
     622:	9d 81       	ldd	r25, Y+5	; 0x05
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	80 62       	ori	r24, 0x20	; 32
     62a:	88 2f       	mov	r24, r24
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	42 e0       	ldi	r20, 0x02	; 2
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	bc 01       	movw	r22, r24
     634:	88 e6       	ldi	r24, 0x68	; 104
     636:	94 e0       	ldi	r25, 0x04	; 4
     638:	0e 94 81 27 	call	0x4f02	; 0x4f02 <_ZN7TwoWire11requestFromEii>
  a = wirerecv();
     63c:	fa de       	rcall	.-524    	; 0x432 <_ZL8wirerecvv>
     63e:	8b 83       	std	Y+3, r24	; 0x03
  ba = wirerecv();
     640:	f8 de       	rcall	.-528    	; 0x432 <_ZL8wirerecvv>
     642:	88 2f       	mov	r24, r24
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	9a 83       	std	Y+2, r25	; 0x02
     648:	89 83       	std	Y+1, r24	; 0x01
  ba <<= 8;
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	9a 81       	ldd	r25, Y+2	; 0x02
     64e:	98 2f       	mov	r25, r24
     650:	88 27       	eor	r24, r24
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	89 83       	std	Y+1, r24	; 0x01
  ba |= a;
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	88 2f       	mov	r24, r24
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	29 81       	ldd	r18, Y+1	; 0x01
     65e:	3a 81       	ldd	r19, Y+2	; 0x02
     660:	82 2b       	or	r24, r18
     662:	93 2b       	or	r25, r19
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	89 83       	std	Y+1, r24	; 0x01

  return ba;
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <_ZN17Adafruit_MCP2301711writeGPIOABEj>:

void Adafruit_MCP23017::writeGPIOAB(uint16_t ba) {
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	00 d0       	rcall	.+0      	; 0x682 <_ZN17Adafruit_MCP2301711writeGPIOABEj+0x6>
     682:	00 d0       	rcall	.+0      	; 0x684 <_ZN17Adafruit_MCP2301711writeGPIOABEj+0x8>
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	89 83       	std	Y+1, r24	; 0x01
     68c:	7c 83       	std	Y+4, r23	; 0x04
     68e:	6b 83       	std	Y+3, r22	; 0x03
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	80 62       	ori	r24, 0x20	; 32
     69a:	88 2f       	mov	r24, r24
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	bc 01       	movw	r22, r24
     6a0:	88 e6       	ldi	r24, 0x68	; 104
     6a2:	94 e0       	ldi	r25, 0x04	; 4
     6a4:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(MCP23017_GPIOA);	
     6a8:	82 e1       	ldi	r24, 0x12	; 18
     6aa:	b4 de       	rcall	.-664    	; 0x414 <_ZL8wiresendh>
  wiresend(ba & 0xFF);
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	b2 de       	rcall	.-668    	; 0x414 <_ZL8wiresendh>
  wiresend(ba >> 8);
     6b0:	8b 81       	ldd	r24, Y+3	; 0x03
     6b2:	9c 81       	ldd	r25, Y+4	; 0x04
     6b4:	89 2f       	mov	r24, r25
     6b6:	99 27       	eor	r25, r25
     6b8:	ad de       	rcall	.-678    	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     6ba:	88 e6       	ldi	r24, 0x68	; 104
     6bc:	94 e0       	ldi	r25, 0x04	; 4
     6be:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
}
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <_ZN17Adafruit_MCP2301712digitalWriteEhh>:

void Adafruit_MCP23017::digitalWrite(uint8_t p, uint8_t d) {
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	27 97       	sbiw	r28, 0x07	; 7
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	9d 83       	std	Y+5, r25	; 0x05
     6e6:	8c 83       	std	Y+4, r24	; 0x04
     6e8:	6e 83       	std	Y+6, r22	; 0x06
     6ea:	4f 83       	std	Y+7, r20	; 0x07
  uint8_t gpio;
  uint8_t gpioaddr, olataddr;

  // only 16 bits!
  if (p > 15)
     6ec:	8e 81       	ldd	r24, Y+6	; 0x06
     6ee:	80 31       	cpi	r24, 0x10	; 16
     6f0:	08 f0       	brcs	.+2      	; 0x6f4 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x24>
    return;
     6f2:	67 c0       	rjmp	.+206    	; 0x7c2 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xf2>

  if (p < 8) {
     6f4:	8e 81       	ldd	r24, Y+6	; 0x06
     6f6:	88 30       	cpi	r24, 0x08	; 8
     6f8:	28 f4       	brcc	.+10     	; 0x704 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x34>
    olataddr = MCP23017_OLATA;
     6fa:	84 e1       	ldi	r24, 0x14	; 20
     6fc:	8b 83       	std	Y+3, r24	; 0x03
    gpioaddr = MCP23017_GPIOA;
     6fe:	82 e1       	ldi	r24, 0x12	; 18
     700:	8a 83       	std	Y+2, r24	; 0x02
     702:	07 c0       	rjmp	.+14     	; 0x712 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x42>
  } else {
    olataddr = MCP23017_OLATB;
     704:	85 e1       	ldi	r24, 0x15	; 21
     706:	8b 83       	std	Y+3, r24	; 0x03
    gpioaddr = MCP23017_GPIOB;
     708:	83 e1       	ldi	r24, 0x13	; 19
     70a:	8a 83       	std	Y+2, r24	; 0x02
    p -= 8;
     70c:	8e 81       	ldd	r24, Y+6	; 0x06
     70e:	88 50       	subi	r24, 0x08	; 8
     710:	8e 83       	std	Y+6, r24	; 0x06
  }

  // read the current GPIO output latches
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     712:	8c 81       	ldd	r24, Y+4	; 0x04
     714:	9d 81       	ldd	r25, Y+5	; 0x05
     716:	fc 01       	movw	r30, r24
     718:	80 81       	ld	r24, Z
     71a:	80 62       	ori	r24, 0x20	; 32
     71c:	88 2f       	mov	r24, r24
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	bc 01       	movw	r22, r24
     722:	88 e6       	ldi	r24, 0x68	; 104
     724:	94 e0       	ldi	r25, 0x04	; 4
     726:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(olataddr);	
     72a:	8b 81       	ldd	r24, Y+3	; 0x03
     72c:	73 de       	rcall	.-794    	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     72e:	88 e6       	ldi	r24, 0x68	; 104
     730:	94 e0       	ldi	r25, 0x04	; 4
     732:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
     736:	8c 81       	ldd	r24, Y+4	; 0x04
     738:	9d 81       	ldd	r25, Y+5	; 0x05
     73a:	fc 01       	movw	r30, r24
     73c:	80 81       	ld	r24, Z
     73e:	80 62       	ori	r24, 0x20	; 32
     740:	88 2f       	mov	r24, r24
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	bc 01       	movw	r22, r24
     74a:	88 e6       	ldi	r24, 0x68	; 104
     74c:	94 e0       	ldi	r25, 0x04	; 4
     74e:	0e 94 81 27 	call	0x4f02	; 0x4f02 <_ZN7TwoWire11requestFromEii>
   gpio = wirerecv();
     752:	6f de       	rcall	.-802    	; 0x432 <_ZL8wirerecvv>
     754:	89 83       	std	Y+1, r24	; 0x01

  // set the pin and direction
  if (d == HIGH) {
     756:	8f 81       	ldd	r24, Y+7	; 0x07
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	81 f4       	brne	.+32     	; 0x77c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xac>
    gpio |= 1 << p; 
     75c:	8e 81       	ldd	r24, Y+6	; 0x06
     75e:	28 2f       	mov	r18, r24
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	02 2e       	mov	r0, r18
     768:	02 c0       	rjmp	.+4      	; 0x76e <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x9e>
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	0a 94       	dec	r0
     770:	e2 f7       	brpl	.-8      	; 0x76a <_ZN17Adafruit_MCP2301712digitalWriteEhh+0x9a>
     772:	98 2f       	mov	r25, r24
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	89 2b       	or	r24, r25
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	0f c0       	rjmp	.+30     	; 0x79a <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xca>
  } else {
    gpio &= ~(1 << p);
     77c:	8e 81       	ldd	r24, Y+6	; 0x06
     77e:	28 2f       	mov	r18, r24
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	02 c0       	rjmp	.+4      	; 0x78c <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xbc>
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	2a 95       	dec	r18
     78e:	e2 f7       	brpl	.-8      	; 0x788 <_ZN17Adafruit_MCP2301712digitalWriteEhh+0xb8>
     790:	98 2f       	mov	r25, r24
     792:	90 95       	com	r25
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	89 23       	and	r24, r25
     798:	89 83       	std	Y+1, r24	; 0x01
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     79a:	8c 81       	ldd	r24, Y+4	; 0x04
     79c:	9d 81       	ldd	r25, Y+5	; 0x05
     79e:	fc 01       	movw	r30, r24
     7a0:	80 81       	ld	r24, Z
     7a2:	80 62       	ori	r24, 0x20	; 32
     7a4:	88 2f       	mov	r24, r24
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	bc 01       	movw	r22, r24
     7aa:	88 e6       	ldi	r24, 0x68	; 104
     7ac:	94 e0       	ldi	r25, 0x04	; 4
     7ae:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	2f de       	rcall	.-930    	; 0x414 <_ZL8wiresendh>
  wiresend(gpio);	
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	2d de       	rcall	.-934    	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     7ba:	88 e6       	ldi	r24, 0x68	; 104
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
}
     7c2:	27 96       	adiw	r28, 0x07	; 7
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <_ZN17Adafruit_MCP230176pullUpEhh>:

void Adafruit_MCP23017::pullUp(uint8_t p, uint8_t d) {
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	00 d0       	rcall	.+0      	; 0x7da <_ZN17Adafruit_MCP230176pullUpEhh+0x6>
     7da:	00 d0       	rcall	.+0      	; 0x7dc <_ZN17Adafruit_MCP230176pullUpEhh+0x8>
     7dc:	00 d0       	rcall	.+0      	; 0x7de <_ZN17Adafruit_MCP230176pullUpEhh+0xa>
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	9c 83       	std	Y+4, r25	; 0x04
     7e4:	8b 83       	std	Y+3, r24	; 0x03
     7e6:	6d 83       	std	Y+5, r22	; 0x05
     7e8:	4e 83       	std	Y+6, r20	; 0x06
  uint8_t gppu;
  uint8_t gppuaddr;

  // only 16 bits!
  if (p > 15)
     7ea:	8d 81       	ldd	r24, Y+5	; 0x05
     7ec:	80 31       	cpi	r24, 0x10	; 16
     7ee:	08 f0       	brcs	.+2      	; 0x7f2 <_ZN17Adafruit_MCP230176pullUpEhh+0x1e>
    return;
     7f0:	63 c0       	rjmp	.+198    	; 0x8b8 <_ZN17Adafruit_MCP230176pullUpEhh+0xe4>

  if (p < 8)
     7f2:	8d 81       	ldd	r24, Y+5	; 0x05
     7f4:	88 30       	cpi	r24, 0x08	; 8
     7f6:	18 f4       	brcc	.+6      	; 0x7fe <_ZN17Adafruit_MCP230176pullUpEhh+0x2a>
    gppuaddr = MCP23017_GPPUA;
     7f8:	8c e0       	ldi	r24, 0x0C	; 12
     7fa:	8a 83       	std	Y+2, r24	; 0x02
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <_ZN17Adafruit_MCP230176pullUpEhh+0x34>
  else {
    gppuaddr = MCP23017_GPPUB;
     7fe:	8d e0       	ldi	r24, 0x0D	; 13
     800:	8a 83       	std	Y+2, r24	; 0x02
    p -= 8;
     802:	8d 81       	ldd	r24, Y+5	; 0x05
     804:	88 50       	subi	r24, 0x08	; 8
     806:	8d 83       	std	Y+5, r24	; 0x05
  }


  // read the current pullup resistor set
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	9c 81       	ldd	r25, Y+4	; 0x04
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	80 62       	ori	r24, 0x20	; 32
     812:	88 2f       	mov	r24, r24
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	bc 01       	movw	r22, r24
     818:	88 e6       	ldi	r24, 0x68	; 104
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);	
     820:	8a 81       	ldd	r24, Y+2	; 0x02
     822:	f8 dd       	rcall	.-1040   	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	94 e0       	ldi	r25, 0x04	; 4
     828:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	9c 81       	ldd	r25, Y+4	; 0x04
     830:	fc 01       	movw	r30, r24
     832:	80 81       	ld	r24, Z
     834:	80 62       	ori	r24, 0x20	; 32
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	bc 01       	movw	r22, r24
     840:	88 e6       	ldi	r24, 0x68	; 104
     842:	94 e0       	ldi	r25, 0x04	; 4
     844:	0e 94 81 27 	call	0x4f02	; 0x4f02 <_ZN7TwoWire11requestFromEii>
  gppu = wirerecv();
     848:	f4 dd       	rcall	.-1048   	; 0x432 <_ZL8wirerecvv>
     84a:	89 83       	std	Y+1, r24	; 0x01

  // set the pin and direction
  if (d == HIGH) {
     84c:	8e 81       	ldd	r24, Y+6	; 0x06
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	81 f4       	brne	.+32     	; 0x872 <_ZN17Adafruit_MCP230176pullUpEhh+0x9e>
    gppu |= 1 << p; 
     852:	8d 81       	ldd	r24, Y+5	; 0x05
     854:	28 2f       	mov	r18, r24
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	02 2e       	mov	r0, r18
     85e:	02 c0       	rjmp	.+4      	; 0x864 <_ZN17Adafruit_MCP230176pullUpEhh+0x90>
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	0a 94       	dec	r0
     866:	e2 f7       	brpl	.-8      	; 0x860 <_ZN17Adafruit_MCP230176pullUpEhh+0x8c>
     868:	98 2f       	mov	r25, r24
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	89 2b       	or	r24, r25
     86e:	89 83       	std	Y+1, r24	; 0x01
     870:	0f c0       	rjmp	.+30     	; 0x890 <_ZN17Adafruit_MCP230176pullUpEhh+0xbc>
  } else {
    gppu &= ~(1 << p);
     872:	8d 81       	ldd	r24, Y+5	; 0x05
     874:	28 2f       	mov	r18, r24
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	02 c0       	rjmp	.+4      	; 0x882 <_ZN17Adafruit_MCP230176pullUpEhh+0xae>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	2a 95       	dec	r18
     884:	e2 f7       	brpl	.-8      	; 0x87e <_ZN17Adafruit_MCP230176pullUpEhh+0xaa>
     886:	98 2f       	mov	r25, r24
     888:	90 95       	com	r25
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	89 23       	and	r24, r25
     88e:	89 83       	std	Y+1, r24	; 0x01
  }

  // write the new GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     890:	8b 81       	ldd	r24, Y+3	; 0x03
     892:	9c 81       	ldd	r25, Y+4	; 0x04
     894:	fc 01       	movw	r30, r24
     896:	80 81       	ld	r24, Z
     898:	80 62       	ori	r24, 0x20	; 32
     89a:	88 2f       	mov	r24, r24
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	bc 01       	movw	r22, r24
     8a0:	88 e6       	ldi	r24, 0x68	; 104
     8a2:	94 e0       	ldi	r25, 0x04	; 4
     8a4:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gppuaddr);
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	b4 dd       	rcall	.-1176   	; 0x414 <_ZL8wiresendh>
  wiresend(gppu);	
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	b2 dd       	rcall	.-1180   	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     8b0:	88 e6       	ldi	r24, 0x68	; 104
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
}
     8b8:	26 96       	adiw	r28, 0x06	; 6
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <_ZN17Adafruit_MCP2301711digitalReadEh>:

uint8_t Adafruit_MCP23017::digitalRead(uint8_t p) {
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <_ZN17Adafruit_MCP2301711digitalReadEh+0x6>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <_ZN17Adafruit_MCP2301711digitalReadEh+0x8>
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	9b 83       	std	Y+3, r25	; 0x03
     8d8:	8a 83       	std	Y+2, r24	; 0x02
     8da:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t gpioaddr;

  // only 16 bits!
  if (p > 15)
     8dc:	8c 81       	ldd	r24, Y+4	; 0x04
     8de:	80 31       	cpi	r24, 0x10	; 16
     8e0:	10 f0       	brcs	.+4      	; 0x8e6 <_ZN17Adafruit_MCP2301711digitalReadEh+0x1c>
    return 0;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	38 c0       	rjmp	.+112    	; 0x956 <__stack+0x57>

  if (p < 8)
     8e6:	8c 81       	ldd	r24, Y+4	; 0x04
     8e8:	88 30       	cpi	r24, 0x08	; 8
     8ea:	18 f4       	brcc	.+6      	; 0x8f2 <_ZN17Adafruit_MCP2301711digitalReadEh+0x28>
    gpioaddr = MCP23017_GPIOA;
     8ec:	82 e1       	ldi	r24, 0x12	; 18
     8ee:	89 83       	std	Y+1, r24	; 0x01
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <_ZN17Adafruit_MCP2301711digitalReadEh+0x32>
  else {
    gpioaddr = MCP23017_GPIOB;
     8f2:	83 e1       	ldi	r24, 0x13	; 19
     8f4:	89 83       	std	Y+1, r24	; 0x01
    p -= 8;
     8f6:	8c 81       	ldd	r24, Y+4	; 0x04
     8f8:	88 50       	subi	r24, 0x08	; 8
     8fa:	8c 83       	std	Y+4, r24	; 0x04
  }

  // read the current GPIO
  WIRE.beginTransmission(MCP23017_ADDRESS | i2caddr);
     8fc:	8a 81       	ldd	r24, Y+2	; 0x02
     8fe:	9b 81       	ldd	r25, Y+3	; 0x03
     900:	fc 01       	movw	r30, r24
     902:	80 81       	ld	r24, Z
     904:	80 62       	ori	r24, 0x20	; 32
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	bc 01       	movw	r22, r24
     90c:	88 e6       	ldi	r24, 0x68	; 104
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN7TwoWire17beginTransmissionEi>
  wiresend(gpioaddr);	
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	7e dd       	rcall	.-1284   	; 0x414 <_ZL8wiresendh>
  WIRE.endTransmission();
     918:	88 e6       	ldi	r24, 0x68	; 104
     91a:	94 e0       	ldi	r25, 0x04	; 4
     91c:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <_ZN7TwoWire15endTransmissionEv>
  
  WIRE.requestFrom(MCP23017_ADDRESS | i2caddr, 1);
     920:	8a 81       	ldd	r24, Y+2	; 0x02
     922:	9b 81       	ldd	r25, Y+3	; 0x03
     924:	fc 01       	movw	r30, r24
     926:	80 81       	ld	r24, Z
     928:	80 62       	ori	r24, 0x20	; 32
     92a:	88 2f       	mov	r24, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	bc 01       	movw	r22, r24
     934:	88 e6       	ldi	r24, 0x68	; 104
     936:	94 e0       	ldi	r25, 0x04	; 4
     938:	0e 94 81 27 	call	0x4f02	; 0x4f02 <_ZN7TwoWire11requestFromEii>
  return (wirerecv() >> p) & 0x1;
     93c:	7a dd       	rcall	.-1292   	; 0x432 <_ZL8wirerecvv>
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	2c 81       	ldd	r18, Y+4	; 0x04
     944:	22 2f       	mov	r18, r18
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	02 2e       	mov	r0, r18
     94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0x51>
     94c:	95 95       	asr	r25
     94e:	87 95       	ror	r24
     950:	0a 94       	dec	r0
     952:	e2 f7       	brpl	.-8      	; 0x94c <__stack+0x4d>
     954:	81 70       	andi	r24, 0x01	; 1
}
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <_ZN5PrintC1Ev>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <_ZN5PrintC1Ev+0x6>
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	9a 83       	std	Y+2, r25	; 0x02
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	20 e3       	ldi	r18, 0x30	; 48
     978:	32 e0       	ldi	r19, 0x02	; 2
     97a:	fc 01       	movw	r30, r24
     97c:	31 83       	std	Z+1, r19	; 0x01
     97e:	20 83       	st	Z, r18
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	fc 01       	movw	r30, r24
     986:	13 82       	std	Z+3, r1	; 0x03
     988:	12 82       	std	Z+2, r1	; 0x02
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <_ZN21Adafruit_RGBLCDShieldC1Ev>:
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
  command(LCD_SETDDRAMADDR);  // unfortunately resets the location to 0,0
}
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	00 d0       	rcall	.+0      	; 0x99a <_ZN21Adafruit_RGBLCDShieldC1Ev+0x6>
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	9a 81       	ldd	r25, Y+2	; 0x02
     9a6:	de df       	rcall	.-68     	; 0x964 <_ZN5PrintC1Ev>
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	26 e8       	ldi	r18, 0x86	; 134
     9ae:	31 e0       	ldi	r19, 0x01	; 1
     9b0:	fc 01       	movw	r30, r24
     9b2:	31 83       	std	Z+1, r19	; 0x01
     9b4:	20 83       	st	Z, r18
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ba:	fc 01       	movw	r30, r24
     9bc:	12 8e       	std	Z+26, r1	; 0x1a
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	fc 01       	movw	r30, r24
     9c4:	14 8a       	std	Z+20, r1	; 0x14
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	2f e0       	ldi	r18, 0x0F	; 15
     9cc:	fc 01       	movw	r30, r24
     9ce:	24 83       	std	Z+4, r18	; 0x04
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	2e e0       	ldi	r18, 0x0E	; 14
     9d6:	fc 01       	movw	r30, r24
     9d8:	25 83       	std	Z+5, r18	; 0x05
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
     9de:	2d e0       	ldi	r18, 0x0D	; 13
     9e0:	fc 01       	movw	r30, r24
     9e2:	26 83       	std	Z+6, r18	; 0x06
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
     9e8:	2c e0       	ldi	r18, 0x0C	; 12
     9ea:	fc 01       	movw	r30, r24
     9ec:	27 83       	std	Z+7, r18	; 0x07
     9ee:	89 81       	ldd	r24, Y+1	; 0x01
     9f0:	9a 81       	ldd	r25, Y+2	; 0x02
     9f2:	2b e0       	ldi	r18, 0x0B	; 11
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 87       	std	Z+8, r18	; 0x08
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	2a e0       	ldi	r18, 0x0A	; 10
     9fe:	fc 01       	movw	r30, r24
     a00:	21 87       	std	Z+9, r18	; 0x09
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
     a06:	29 e0       	ldi	r18, 0x09	; 9
     a08:	fc 01       	movw	r30, r24
     a0a:	22 87       	std	Z+10, r18	; 0x0a
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	9a 81       	ldd	r25, Y+2	; 0x02
     a10:	fc 01       	movw	r30, r24
     a12:	17 86       	std	Z+15, r1	; 0x0f
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	9a 81       	ldd	r25, Y+2	; 0x02
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 8b       	std	Z+16, r18	; 0x10
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	22 e0       	ldi	r18, 0x02	; 2
     a24:	fc 01       	movw	r30, r24
     a26:	21 8b       	std	Z+17, r18	; 0x11
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	23 e0       	ldi	r18, 0x03	; 3
     a2e:	fc 01       	movw	r30, r24
     a30:	22 8b       	std	Z+18, r18	; 0x12
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	24 e0       	ldi	r18, 0x04	; 4
     a38:	fc 01       	movw	r30, r24
     a3a:	23 8b       	std	Z+19, r18	; 0x13
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <_ZN21Adafruit_RGBLCDShield5beginEhhh>:
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	27 97       	sbiw	r28, 0x07	; 7
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	9c 83       	std	Y+4, r25	; 0x04
     a5c:	8b 83       	std	Y+3, r24	; 0x03
     a5e:	6d 83       	std	Y+5, r22	; 0x05
     a60:	4e 83       	std	Y+6, r20	; 0x06
     a62:	2f 83       	std	Y+7, r18	; 0x07
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	9c 81       	ldd	r25, Y+4	; 0x04
     a68:	fc 01       	movw	r30, r24
     a6a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a6c:	8f 3f       	cpi	r24, 0xFF	; 255
     a6e:	09 f4       	brne	.+2      	; 0xa72 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x2c>
     a70:	82 c0       	rjmp	.+260    	; 0xb76 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x130>
     a72:	88 e6       	ldi	r24, 0x68	; 104
     a74:	94 e0       	ldi	r25, 0x04	; 4
     a76:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <_ZN7TwoWire5beginEv>
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	4b 96       	adiw	r24, 0x1b	; 27
     a80:	28 dd       	rcall	.-1456   	; 0x4d2 <_ZN17Adafruit_MCP230175beginEv>
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	4b 96       	adiw	r24, 0x1b	; 27
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	68 e0       	ldi	r22, 0x08	; 8
     a8c:	32 dd       	rcall	.-1436   	; 0x4f2 <_ZN17Adafruit_MCP230177pinModeEhh>
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	4b 96       	adiw	r24, 0x1b	; 27
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	66 e0       	ldi	r22, 0x06	; 6
     a98:	2c dd       	rcall	.-1448   	; 0x4f2 <_ZN17Adafruit_MCP230177pinModeEhh>
     a9a:	8b 81       	ldd	r24, Y+3	; 0x03
     a9c:	9c 81       	ldd	r25, Y+4	; 0x04
     a9e:	4b 96       	adiw	r24, 0x1b	; 27
     aa0:	41 e0       	ldi	r20, 0x01	; 1
     aa2:	67 e0       	ldi	r22, 0x07	; 7
     aa4:	26 dd       	rcall	.-1460   	; 0x4f2 <_ZN17Adafruit_MCP230177pinModeEhh>
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	9c 81       	ldd	r25, Y+4	; 0x04
     aaa:	67 e0       	ldi	r22, 0x07	; 7
     aac:	2d d2       	rcall	.+1114   	; 0xf08 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	9c 81       	ldd	r25, Y+4	; 0x04
     ab2:	fc 01       	movw	r30, r24
     ab4:	85 81       	ldd	r24, Z+5	; 0x05
     ab6:	88 23       	and	r24, r24
     ab8:	51 f0       	breq	.+20     	; 0xace <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x88>
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	fc 01       	movw	r30, r24
     ac0:	25 81       	ldd	r18, Z+5	; 0x05
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	4b 96       	adiw	r24, 0x1b	; 27
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	62 2f       	mov	r22, r18
     acc:	12 dd       	rcall	.-1500   	; 0x4f2 <_ZN17Adafruit_MCP230177pinModeEhh>
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	9c 81       	ldd	r25, Y+4	; 0x04
     ad2:	fc 01       	movw	r30, r24
     ad4:	24 81       	ldd	r18, Z+4	; 0x04
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	9c 81       	ldd	r25, Y+4	; 0x04
     ada:	4b 96       	adiw	r24, 0x1b	; 27
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	62 2f       	mov	r22, r18
     ae0:	08 dd       	rcall	.-1520   	; 0x4f2 <_ZN17Adafruit_MCP230177pinModeEhh>
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	fc 01       	movw	r30, r24
     ae8:	26 81       	ldd	r18, Z+6	; 0x06
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	9c 81       	ldd	r25, Y+4	; 0x04
     aee:	4b 96       	adiw	r24, 0x1b	; 27
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	62 2f       	mov	r22, r18
     af4:	fe dc       	rcall	.-1540   	; 0x4f2 <_ZN17Adafruit_MCP230177pinModeEhh>
     af6:	19 82       	std	Y+1, r1	; 0x01
     af8:	13 c0       	rjmp	.+38     	; 0xb20 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xda>
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	88 2f       	mov	r24, r24
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	2b 81       	ldd	r18, Y+3	; 0x03
     b02:	3c 81       	ldd	r19, Y+4	; 0x04
     b04:	82 0f       	add	r24, r18
     b06:	93 1f       	adc	r25, r19
     b08:	07 96       	adiw	r24, 0x07	; 7
     b0a:	fc 01       	movw	r30, r24
     b0c:	20 81       	ld	r18, Z
     b0e:	8b 81       	ldd	r24, Y+3	; 0x03
     b10:	9c 81       	ldd	r25, Y+4	; 0x04
     b12:	4b 96       	adiw	r24, 0x1b	; 27
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	62 2f       	mov	r22, r18
     b18:	ec dc       	rcall	.-1576   	; 0x4f2 <_ZN17Adafruit_MCP230177pinModeEhh>
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	8f 5f       	subi	r24, 0xFF	; 255
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	84 30       	cpi	r24, 0x04	; 4
     b24:	50 f3       	brcs	.-44     	; 0xafa <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xb4>
     b26:	1a 82       	std	Y+2, r1	; 0x02
     b28:	23 c0       	rjmp	.+70     	; 0xb70 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x12a>
     b2a:	8a 81       	ldd	r24, Y+2	; 0x02
     b2c:	88 2f       	mov	r24, r24
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	2b 81       	ldd	r18, Y+3	; 0x03
     b32:	3c 81       	ldd	r19, Y+4	; 0x04
     b34:	82 0f       	add	r24, r18
     b36:	93 1f       	adc	r25, r19
     b38:	0f 96       	adiw	r24, 0x0f	; 15
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 81       	ld	r18, Z
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	9c 81       	ldd	r25, Y+4	; 0x04
     b42:	4b 96       	adiw	r24, 0x1b	; 27
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	62 2f       	mov	r22, r18
     b48:	d4 dc       	rcall	.-1624   	; 0x4f2 <_ZN17Adafruit_MCP230177pinModeEhh>
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	2b 81       	ldd	r18, Y+3	; 0x03
     b52:	3c 81       	ldd	r19, Y+4	; 0x04
     b54:	82 0f       	add	r24, r18
     b56:	93 1f       	adc	r25, r19
     b58:	0f 96       	adiw	r24, 0x0f	; 15
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 81       	ld	r18, Z
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	4b 96       	adiw	r24, 0x1b	; 27
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	62 2f       	mov	r22, r18
     b68:	35 de       	rcall	.-918    	; 0x7d4 <_ZN17Adafruit_MCP230176pullUpEhh>
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	8a 83       	std	Y+2, r24	; 0x02
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	85 30       	cpi	r24, 0x05	; 5
     b74:	d0 f2       	brcs	.-76     	; 0xb2a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0xe4>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	82 30       	cpi	r24, 0x02	; 2
     b7a:	50 f0       	brcs	.+20     	; 0xb90 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x14a>
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	fc 01       	movw	r30, r24
     b82:	84 89       	ldd	r24, Z+20	; 0x14
     b84:	28 2f       	mov	r18, r24
     b86:	28 60       	ori	r18, 0x08	; 8
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	fc 01       	movw	r30, r24
     b8e:	24 8b       	std	Z+20, r18	; 0x14
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	9c 81       	ldd	r25, Y+4	; 0x04
     b94:	2e 81       	ldd	r18, Y+6	; 0x06
     b96:	fc 01       	movw	r30, r24
     b98:	20 8f       	std	Z+24, r18	; 0x18
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	9c 81       	ldd	r25, Y+4	; 0x04
     b9e:	fc 01       	movw	r30, r24
     ba0:	11 8e       	std	Z+25, r1	; 0x19
     ba2:	8f 81       	ldd	r24, Y+7	; 0x07
     ba4:	88 23       	and	r24, r24
     ba6:	69 f0       	breq	.+26     	; 0xbc2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x17c>
     ba8:	8e 81       	ldd	r24, Y+6	; 0x06
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	51 f4       	brne	.+20     	; 0xbc2 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x17c>
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	9c 81       	ldd	r25, Y+4	; 0x04
     bb2:	fc 01       	movw	r30, r24
     bb4:	84 89       	ldd	r24, Z+20	; 0x14
     bb6:	28 2f       	mov	r18, r24
     bb8:	24 60       	ori	r18, 0x04	; 4
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	fc 01       	movw	r30, r24
     bc0:	24 8b       	std	Z+20, r18	; 0x14
     bc2:	80 e5       	ldi	r24, 0x50	; 80
     bc4:	93 ec       	ldi	r25, 0xC3	; 195
     bc6:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	fc 01       	movw	r30, r24
     bd0:	24 81       	ldd	r18, Z+4	; 0x04
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	62 2f       	mov	r22, r18
     bda:	74 d1       	rcall	.+744    	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	fc 01       	movw	r30, r24
     be2:	26 81       	ldd	r18, Z+6	; 0x06
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	62 2f       	mov	r22, r18
     bec:	6b d1       	rcall	.+726    	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	9c 81       	ldd	r25, Y+4	; 0x04
     bf2:	fc 01       	movw	r30, r24
     bf4:	85 81       	ldd	r24, Z+5	; 0x05
     bf6:	8f 3f       	cpi	r24, 0xFF	; 255
     bf8:	49 f0       	breq	.+18     	; 0xc0c <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x1c6>
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	fc 01       	movw	r30, r24
     c00:	25 81       	ldd	r18, Z+5	; 0x05
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	62 2f       	mov	r22, r18
     c0a:	5c d1       	rcall	.+696    	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	fc 01       	movw	r30, r24
     c12:	84 89       	ldd	r24, Z+20	; 0x14
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	80 71       	andi	r24, 0x10	; 16
     c1a:	99 27       	eor	r25, r25
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	e9 f4       	brne	.+58     	; 0xc5a <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x214>
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	63 e0       	ldi	r22, 0x03	; 3
     c26:	4d d2       	rcall	.+1178   	; 0x10c2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
     c28:	84 e9       	ldi	r24, 0x94	; 148
     c2a:	91 e1       	ldi	r25, 0x11	; 17
     c2c:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	63 e0       	ldi	r22, 0x03	; 3
     c36:	45 d2       	rcall	.+1162   	; 0x10c2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
     c38:	84 e9       	ldi	r24, 0x94	; 148
     c3a:	91 e1       	ldi	r25, 0x11	; 17
     c3c:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	63 e0       	ldi	r22, 0x03	; 3
     c46:	3d d2       	rcall	.+1146   	; 0x10c2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
     c48:	86 e9       	ldi	r24, 0x96	; 150
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	62 e0       	ldi	r22, 0x02	; 2
     c56:	35 d2       	rcall	.+1130   	; 0x10c2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
     c58:	26 c0       	rjmp	.+76     	; 0xca6 <_ZN21Adafruit_RGBLCDShield5beginEhhh+0x260>
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	fc 01       	movw	r30, r24
     c60:	84 89       	ldd	r24, Z+20	; 0x14
     c62:	28 2f       	mov	r18, r24
     c64:	20 62       	ori	r18, 0x20	; 32
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	9c 81       	ldd	r25, Y+4	; 0x04
     c6a:	62 2f       	mov	r22, r18
     c6c:	01 d1       	rcall	.+514    	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     c6e:	84 e9       	ldi	r24, 0x94	; 148
     c70:	91 e1       	ldi	r25, 0x11	; 17
     c72:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	9c 81       	ldd	r25, Y+4	; 0x04
     c7a:	fc 01       	movw	r30, r24
     c7c:	84 89       	ldd	r24, Z+20	; 0x14
     c7e:	28 2f       	mov	r18, r24
     c80:	20 62       	ori	r18, 0x20	; 32
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	62 2f       	mov	r22, r18
     c88:	f3 d0       	rcall	.+486    	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     c8a:	86 e9       	ldi	r24, 0x96	; 150
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	9c 81       	ldd	r25, Y+4	; 0x04
     c96:	fc 01       	movw	r30, r24
     c98:	84 89       	ldd	r24, Z+20	; 0x14
     c9a:	28 2f       	mov	r18, r24
     c9c:	20 62       	ori	r18, 0x20	; 32
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	62 2f       	mov	r22, r18
     ca4:	e5 d0       	rcall	.+458    	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	fc 01       	movw	r30, r24
     cac:	84 89       	ldd	r24, Z+20	; 0x14
     cae:	28 2f       	mov	r18, r24
     cb0:	20 62       	ori	r18, 0x20	; 32
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	9c 81       	ldd	r25, Y+4	; 0x04
     cb6:	62 2f       	mov	r22, r18
     cb8:	db d0       	rcall	.+438    	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	24 e0       	ldi	r18, 0x04	; 4
     cc0:	fc 01       	movw	r30, r24
     cc2:	25 8b       	std	Z+21, r18	; 0x15
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	73 d0       	rcall	.+230    	; 0xdb0 <_ZN21Adafruit_RGBLCDShield7displayEv>
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	9c 81       	ldd	r25, Y+4	; 0x04
     cce:	18 d0       	rcall	.+48     	; 0xd00 <_ZN21Adafruit_RGBLCDShield5clearEv>
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	9c 81       	ldd	r25, Y+4	; 0x04
     cd4:	22 e0       	ldi	r18, 0x02	; 2
     cd6:	fc 01       	movw	r30, r24
     cd8:	26 8b       	std	Z+22, r18	; 0x16
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	fc 01       	movw	r30, r24
     ce0:	86 89       	ldd	r24, Z+22	; 0x16
     ce2:	28 2f       	mov	r18, r24
     ce4:	24 60       	ori	r18, 0x04	; 4
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	62 2f       	mov	r22, r18
     cec:	c1 d0       	rcall	.+386    	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     cee:	27 96       	adiw	r28, 0x07	; 7
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <_ZN21Adafruit_RGBLCDShield5clearEv>:
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	00 d0       	rcall	.+0      	; 0xd06 <_ZN21Adafruit_RGBLCDShield5clearEv+0x6>
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	ad d0       	rcall	.+346    	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     d16:	80 ed       	ldi	r24, 0xD0	; 208
     d18:	97 e0       	ldi	r25, 0x07	; 7
     d1a:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>:
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	2c 97       	sbiw	r28, 0x0c	; 12
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	9a 87       	std	Y+10, r25	; 0x0a
     d3e:	89 87       	std	Y+9, r24	; 0x09
     d40:	6b 87       	std	Y+11, r22	; 0x0b
     d42:	4c 87       	std	Y+12, r20	; 0x0c
     d44:	28 e0       	ldi	r18, 0x08	; 8
     d46:	ea e1       	ldi	r30, 0x1A	; 26
     d48:	f1 e0       	ldi	r31, 0x01	; 1
     d4a:	ce 01       	movw	r24, r28
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	dc 01       	movw	r26, r24
     d50:	01 90       	ld	r0, Z+
     d52:	0d 92       	st	X+, r0
     d54:	2a 95       	dec	r18
     d56:	e1 f7       	brne	.-8      	; 0xd50 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x28>
     d58:	89 85       	ldd	r24, Y+9	; 0x09
     d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5c:	fc 01       	movw	r30, r24
     d5e:	90 8d       	ldd	r25, Z+24	; 0x18
     d60:	8c 85       	ldd	r24, Y+12	; 0x0c
     d62:	98 17       	cp	r25, r24
     d64:	30 f4       	brcc	.+12     	; 0xd72 <_ZN21Adafruit_RGBLCDShield9setCursorEhh+0x4a>
     d66:	89 85       	ldd	r24, Y+9	; 0x09
     d68:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 8d       	ldd	r24, Z+24	; 0x18
     d6e:	81 50       	subi	r24, 0x01	; 1
     d70:	8c 87       	std	Y+12, r24	; 0x0c
     d72:	8c 85       	ldd	r24, Y+12	; 0x0c
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	9e 01       	movw	r18, r28
     d7e:	2f 5f       	subi	r18, 0xFF	; 255
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	82 0f       	add	r24, r18
     d84:	93 1f       	adc	r25, r19
     d86:	fc 01       	movw	r30, r24
     d88:	80 81       	ld	r24, Z
     d8a:	91 81       	ldd	r25, Z+1	; 0x01
     d8c:	98 2f       	mov	r25, r24
     d8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d90:	89 0f       	add	r24, r25
     d92:	80 68       	ori	r24, 0x80	; 128
     d94:	28 2f       	mov	r18, r24
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	62 2f       	mov	r22, r18
     d9c:	69 d0       	rcall	.+210    	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     d9e:	2c 96       	adiw	r28, 0x0c	; 12
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <_ZN21Adafruit_RGBLCDShield7displayEv>:
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <_ZN21Adafruit_RGBLCDShield7displayEv+0x6>
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	fc 01       	movw	r30, r24
     dc4:	85 89       	ldd	r24, Z+21	; 0x15
     dc6:	28 2f       	mov	r18, r24
     dc8:	24 60       	ori	r18, 0x04	; 4
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	fc 01       	movw	r30, r24
     dd0:	25 8b       	std	Z+21, r18	; 0x15
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	fc 01       	movw	r30, r24
     dd8:	85 89       	ldd	r24, Z+21	; 0x15
     dda:	28 2f       	mov	r18, r24
     ddc:	28 60       	ori	r18, 0x08	; 8
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	62 2f       	mov	r22, r18
     de4:	45 d0       	rcall	.+138    	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <_ZN21Adafruit_RGBLCDShield8noCursorEv>:
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <_ZN21Adafruit_RGBLCDShield8noCursorEv+0x6>
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	9a 83       	std	Y+2, r25	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	fc 01       	movw	r30, r24
     e04:	85 89       	ldd	r24, Z+21	; 0x15
     e06:	28 2f       	mov	r18, r24
     e08:	2d 7f       	andi	r18, 0xFD	; 253
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	9a 81       	ldd	r25, Y+2	; 0x02
     e0e:	fc 01       	movw	r30, r24
     e10:	25 8b       	std	Z+21, r18	; 0x15
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	fc 01       	movw	r30, r24
     e18:	85 89       	ldd	r24, Z+21	; 0x15
     e1a:	28 2f       	mov	r18, r24
     e1c:	28 60       	ori	r18, 0x08	; 8
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	62 2f       	mov	r22, r18
     e24:	25 d0       	rcall	.+74     	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <_ZN21Adafruit_RGBLCDShield6cursorEv>:
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	00 d0       	rcall	.+0      	; 0xe36 <_ZN21Adafruit_RGBLCDShield6cursorEv+0x6>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	fc 01       	movw	r30, r24
     e44:	85 89       	ldd	r24, Z+21	; 0x15
     e46:	28 2f       	mov	r18, r24
     e48:	22 60       	ori	r18, 0x02	; 2
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	fc 01       	movw	r30, r24
     e50:	25 8b       	std	Z+21, r18	; 0x15
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	fc 01       	movw	r30, r24
     e58:	85 89       	ldd	r24, Z+21	; 0x15
     e5a:	28 2f       	mov	r18, r24
     e5c:	28 60       	ori	r18, 0x08	; 8
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	62 2f       	mov	r22, r18
     e64:	05 d0       	rcall	.+10     	; 0xe70 <_ZN21Adafruit_RGBLCDShield7commandEh>
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <_ZN21Adafruit_RGBLCDShield7commandEh>:

/*********** mid level commands, for sending data/cmds */

inline void Adafruit_RGBLCDShield::command(uint8_t value) {
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	00 d0       	rcall	.+0      	; 0xe76 <_ZN21Adafruit_RGBLCDShield7commandEh+0x6>
     e76:	1f 92       	push	r1
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	6b 83       	std	Y+3, r22	; 0x03
  send(value, LOW);
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	6b 81       	ldd	r22, Y+3	; 0x03
     e8a:	9c d0       	rcall	.+312    	; 0xfc4 <_ZN21Adafruit_RGBLCDShield4sendEhh>
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <_ZN21Adafruit_RGBLCDShield5writeEh>:

#if ARDUINO >= 100
inline size_t Adafruit_RGBLCDShield::write(uint8_t value) {
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <_ZN21Adafruit_RGBLCDShield5writeEh+0x6>
     e9e:	1f 92       	push	r1
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	6b 83       	std	Y+3, r22	; 0x03
  send(value, HIGH);
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	41 e0       	ldi	r20, 0x01	; 1
     eb0:	6b 81       	ldd	r22, Y+3	; 0x03
     eb2:	88 d0       	rcall	.+272    	; 0xfc4 <_ZN21Adafruit_RGBLCDShield4sendEhh>
  return 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
}
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>:
#endif

/************ low level data pushing commands **********/

// little wrapper for i/o writes
void  Adafruit_RGBLCDShield::_digitalWrite(uint8_t p, uint8_t d) {
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	00 d0       	rcall	.+0      	; 0xeca <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x6>
     eca:	00 d0       	rcall	.+0      	; 0xecc <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x8>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	6b 83       	std	Y+3, r22	; 0x03
     ed6:	4c 83       	std	Y+4, r20	; 0x04
  if (_i2cAddr != 255) {
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	fc 01       	movw	r30, r24
     ede:	82 8d       	ldd	r24, Z+26	; 0x1a
     ee0:	8f 3f       	cpi	r24, 0xFF	; 255
     ee2:	39 f0       	breq	.+14     	; 0xef2 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x2e>
    // an i2c command
    _i2c.digitalWrite(p, d);
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	4b 96       	adiw	r24, 0x1b	; 27
     eea:	4c 81       	ldd	r20, Y+4	; 0x04
     eec:	6b 81       	ldd	r22, Y+3	; 0x03
     eee:	f0 db       	rcall	.-2080   	; 0x6d0 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh+0x36>
  } else {
    // straightup IO
    digitalWrite(p, d);
     ef2:	6c 81       	ldd	r22, Y+4	; 0x04
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <digitalWrite>
  }
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <_ZN21Adafruit_RGBLCDShield12setBacklightEh>:

// Allows to set the backlight, if the LCD backpack is used
void Adafruit_RGBLCDShield::setBacklight(uint8_t status) {
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <_ZN21Adafruit_RGBLCDShield12setBacklightEh+0x6>
     f0e:	1f 92       	push	r1
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	6b 83       	std	Y+3, r22	; 0x03
  // check if i2c or SPI
  _i2c.digitalWrite(8, ~(status >> 2) & 0x1);
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	84 70       	andi	r24, 0x04	; 4
     f22:	99 27       	eor	r25, r25
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	09 f0       	breq	.+2      	; 0xf2c <_ZN21Adafruit_RGBLCDShield12setBacklightEh+0x24>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	4b 96       	adiw	r24, 0x1b	; 27
     f32:	42 2f       	mov	r20, r18
     f34:	68 e0       	ldi	r22, 0x08	; 8
     f36:	cc db       	rcall	.-2152   	; 0x6d0 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
  _i2c.digitalWrite(7, ~(status >> 1) & 0x1);
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	82 70       	andi	r24, 0x02	; 2
     f40:	99 27       	eor	r25, r25
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	09 f0       	breq	.+2      	; 0xf4a <_ZN21Adafruit_RGBLCDShield12setBacklightEh+0x42>
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	4b 96       	adiw	r24, 0x1b	; 27
     f50:	42 2f       	mov	r20, r18
     f52:	67 e0       	ldi	r22, 0x07	; 7
     f54:	bd db       	rcall	.-2182   	; 0x6d0 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
  _i2c.digitalWrite(6, ~status & 0x1);
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	81 70       	andi	r24, 0x01	; 1
     f5e:	99 27       	eor	r25, r25
     f60:	21 e0       	ldi	r18, 0x01	; 1
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	09 f0       	breq	.+2      	; 0xf68 <_ZN21Adafruit_RGBLCDShield12setBacklightEh+0x60>
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	4b 96       	adiw	r24, 0x1b	; 27
     f6e:	42 2f       	mov	r20, r18
     f70:	66 e0       	ldi	r22, 0x06	; 6
     f72:	ae db       	rcall	.-2212   	; 0x6d0 <_ZN17Adafruit_MCP2301712digitalWriteEhh>
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>:

// little wrapper for i/o directions
void  Adafruit_RGBLCDShield::_pinMode(uint8_t p, uint8_t d) {
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	00 d0       	rcall	.+0      	; 0xf86 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x6>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x8>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	6b 83       	std	Y+3, r22	; 0x03
     f92:	4c 83       	std	Y+4, r20	; 0x04
  if (_i2cAddr != 255) {
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	fc 01       	movw	r30, r24
     f9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     f9c:	8f 3f       	cpi	r24, 0xFF	; 255
     f9e:	39 f0       	breq	.+14     	; 0xfae <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x2e>
    // an i2c command
    _i2c.pinMode(p, d);
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	4b 96       	adiw	r24, 0x1b	; 27
     fa6:	4c 81       	ldd	r20, Y+4	; 0x04
     fa8:	6b 81       	ldd	r22, Y+3	; 0x03
     faa:	a3 da       	rcall	.-2746   	; 0x4f2 <_ZN17Adafruit_MCP230177pinModeEhh>
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh+0x36>
  } else {
    // straightup IO
    pinMode(p, d);
     fae:	6c 81       	ldd	r22, Y+4	; 0x04
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <pinMode>
  }
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <_ZN21Adafruit_RGBLCDShield4sendEhh>:

// write either command or data, with automatic 4/8-bit selection
void Adafruit_RGBLCDShield::send(uint8_t value, uint8_t mode) {
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	00 d0       	rcall	.+0      	; 0xfca <_ZN21Adafruit_RGBLCDShield4sendEhh+0x6>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <_ZN21Adafruit_RGBLCDShield4sendEhh+0x8>
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	6b 83       	std	Y+3, r22	; 0x03
     fd6:	4c 83       	std	Y+4, r20	; 0x04
  _digitalWrite(_rs_pin, mode);
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	fc 01       	movw	r30, r24
     fde:	24 81       	ldd	r18, Z+4	; 0x04
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	4c 81       	ldd	r20, Y+4	; 0x04
     fe6:	62 2f       	mov	r22, r18
     fe8:	6d df       	rcall	.-294    	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	fc 01       	movw	r30, r24
     ff0:	85 81       	ldd	r24, Z+5	; 0x05
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	49 f0       	breq	.+18     	; 0x1008 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x44>
    _digitalWrite(_rw_pin, LOW);
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	fc 01       	movw	r30, r24
     ffc:	25 81       	ldd	r18, Z+5	; 0x05
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	62 2f       	mov	r22, r18
    1006:	5e df       	rcall	.-324    	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	fc 01       	movw	r30, r24
    100e:	84 89       	ldd	r24, Z+20	; 0x14
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	80 71       	andi	r24, 0x10	; 16
    1016:	99 27       	eor	r25, r25
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	29 f0       	breq	.+10     	; 0x1026 <_ZN21Adafruit_RGBLCDShield4sendEhh+0x62>
    write8bits(value); 
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	6b 81       	ldd	r22, Y+3	; 0x03
    1022:	53 d1       	rcall	.+678    	; 0x12ca <_ZN21Adafruit_RGBLCDShield10write8bitsEh>
    1024:	14 c0       	rjmp	.+40     	; 0x104e <_ZN21Adafruit_RGBLCDShield4sendEhh+0x8a>
  } else {
    write4bits(value>>4);
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	95 95       	asr	r25
    102e:	87 95       	ror	r24
    1030:	95 95       	asr	r25
    1032:	87 95       	ror	r24
    1034:	95 95       	asr	r25
    1036:	87 95       	ror	r24
    1038:	95 95       	asr	r25
    103a:	87 95       	ror	r24
    103c:	28 2f       	mov	r18, r24
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	62 2f       	mov	r22, r18
    1044:	3e d0       	rcall	.+124    	; 0x10c2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
    write4bits(value);
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	6b 81       	ldd	r22, Y+3	; 0x03
    104c:	3a d0       	rcall	.+116    	; 0x10c2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>
  }
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>:

void Adafruit_RGBLCDShield::pulseEnable(void) {
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	00 d0       	rcall	.+0      	; 0x1062 <_ZN21Adafruit_RGBLCDShield11pulseEnableEv+0x6>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
  _digitalWrite(_enable_pin, LOW);
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	fc 01       	movw	r30, r24
    1070:	26 81       	ldd	r18, Z+6	; 0x06
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	62 2f       	mov	r22, r18
    107a:	24 df       	rcall	.-440    	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
  delayMicroseconds(1);    
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
  _digitalWrite(_enable_pin, HIGH);
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	fc 01       	movw	r30, r24
    108a:	26 81       	ldd	r18, Z+6	; 0x06
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	41 e0       	ldi	r20, 0x01	; 1
    1092:	62 2f       	mov	r22, r18
    1094:	17 df       	rcall	.-466    	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
  delayMicroseconds(1);    // enable pulse must be >450ns
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
  _digitalWrite(_enable_pin, LOW);
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	fc 01       	movw	r30, r24
    10a4:	26 81       	ldd	r18, Z+6	; 0x06
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	62 2f       	mov	r22, r18
    10ae:	0a df       	rcall	.-492    	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
  delayMicroseconds(100);   // commands need > 37us to settle
    10b0:	84 e6       	ldi	r24, 0x64	; 100
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <_ZN21Adafruit_RGBLCDShield10write4bitsEh>:

void Adafruit_RGBLCDShield::write4bits(uint8_t value) {
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	29 97       	sbiw	r28, 0x09	; 9
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	98 87       	std	Y+8, r25	; 0x08
    10d8:	8f 83       	std	Y+7, r24	; 0x07
    10da:	69 87       	std	Y+9, r22	; 0x09
  if (_i2cAddr != 255) {
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	98 85       	ldd	r25, Y+8	; 0x08
    10e0:	fc 01       	movw	r30, r24
    10e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    10e4:	8f 3f       	cpi	r24, 0xFF	; 255
    10e6:	09 f4       	brne	.+2      	; 0x10ea <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x28>
    10e8:	b1 c0       	rjmp	.+354    	; 0x124c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x18a>
    uint16_t out = 0;
    10ea:	1a 82       	std	Y+2, r1	; 0x02
    10ec:	19 82       	std	Y+1, r1	; 0x01

    out = _i2c.readGPIOAB();
    10ee:	8f 81       	ldd	r24, Y+7	; 0x07
    10f0:	98 85       	ldd	r25, Y+8	; 0x08
    10f2:	4b 96       	adiw	r24, 0x1b	; 27
    10f4:	78 da       	rcall	.-2832   	; 0x5e6 <_ZN17Adafruit_MCP2301710readGPIOABEv>
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01

    // speed up for i2c since its sluggish
    for (int i = 0; i < 4; i++) {
    10fa:	1c 82       	std	Y+4, r1	; 0x04
    10fc:	1b 82       	std	Y+3, r1	; 0x03
    10fe:	41 c0       	rjmp	.+130    	; 0x1182 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xc0>
      out &= ~(1 << _data_pins[i]);
    1100:	2f 81       	ldd	r18, Y+7	; 0x07
    1102:	38 85       	ldd	r19, Y+8	; 0x08
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	07 96       	adiw	r24, 0x07	; 7
    110e:	fc 01       	movw	r30, r24
    1110:	80 81       	ld	r24, Z
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x5e>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	2a 95       	dec	r18
    1122:	e2 f7       	brpl	.-8      	; 0x111c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x5a>
    1124:	80 95       	com	r24
    1126:	90 95       	com	r25
    1128:	29 81       	ldd	r18, Y+1	; 0x01
    112a:	3a 81       	ldd	r19, Y+2	; 0x02
    112c:	82 23       	and	r24, r18
    112e:	93 23       	and	r25, r19
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
      out |= ((value >> i) & 0x1) << _data_pins[i];
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0b 80       	ldd	r0, Y+3	; 0x03
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x80>
    113e:	95 95       	asr	r25
    1140:	87 95       	ror	r24
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x7c>
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	99 27       	eor	r25, r25
    114a:	4f 81       	ldd	r20, Y+7	; 0x07
    114c:	58 85       	ldd	r21, Y+8	; 0x08
    114e:	2b 81       	ldd	r18, Y+3	; 0x03
    1150:	3c 81       	ldd	r19, Y+4	; 0x04
    1152:	24 0f       	add	r18, r20
    1154:	35 1f       	adc	r19, r21
    1156:	29 5f       	subi	r18, 0xF9	; 249
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	f9 01       	movw	r30, r18
    115c:	20 81       	ld	r18, Z
    115e:	22 2f       	mov	r18, r18
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xa6>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	2a 95       	dec	r18
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xa2>
    116c:	29 81       	ldd	r18, Y+1	; 0x01
    116e:	3a 81       	ldd	r19, Y+2	; 0x02
    1170:	82 2b       	or	r24, r18
    1172:	93 2b       	or	r25, r19
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
    uint16_t out = 0;

    out = _i2c.readGPIOAB();

    // speed up for i2c since its sluggish
    for (int i = 0; i < 4; i++) {
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	91 05       	cpc	r25, r1
    118a:	0c f4       	brge	.+2      	; 0x118e <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xcc>
    118c:	b9 cf       	rjmp	.-142    	; 0x1100 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x3e>
      out &= ~(1 << _data_pins[i]);
      out |= ((value >> i) & 0x1) << _data_pins[i];
    }

    // make sure enable is low
    out &= ~(1 << _enable_pin);
    118e:	8f 81       	ldd	r24, Y+7	; 0x07
    1190:	98 85       	ldd	r25, Y+8	; 0x08
    1192:	fc 01       	movw	r30, r24
    1194:	86 81       	ldd	r24, Z+6	; 0x06
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xe2>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	2a 95       	dec	r18
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0xde>
    11a8:	80 95       	com	r24
    11aa:	90 95       	com	r25
    11ac:	29 81       	ldd	r18, Y+1	; 0x01
    11ae:	3a 81       	ldd	r19, Y+2	; 0x02
    11b0:	82 23       	and	r24, r18
    11b2:	93 23       	and	r25, r19
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01

    _i2c.writeGPIOAB(out);
    11b8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ba:	98 85       	ldd	r25, Y+8	; 0x08
    11bc:	4b 96       	adiw	r24, 0x1b	; 27
    11be:	29 81       	ldd	r18, Y+1	; 0x01
    11c0:	3a 81       	ldd	r19, Y+2	; 0x02
    11c2:	b9 01       	movw	r22, r18
    11c4:	5b da       	rcall	.-2890   	; 0x67c <_ZN17Adafruit_MCP2301711writeGPIOABEj>

    // pulse enable
    delayMicroseconds(1);
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
    out |= (1 << _enable_pin);
    11ce:	8f 81       	ldd	r24, Y+7	; 0x07
    11d0:	98 85       	ldd	r25, Y+8	; 0x08
    11d2:	fc 01       	movw	r30, r24
    11d4:	86 81       	ldd	r24, Z+6	; 0x06
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x122>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	2a 95       	dec	r18
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x11e>
    11e8:	29 81       	ldd	r18, Y+1	; 0x01
    11ea:	3a 81       	ldd	r19, Y+2	; 0x02
    11ec:	82 2b       	or	r24, r18
    11ee:	93 2b       	or	r25, r19
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
    _i2c.writeGPIOAB(out);
    11f4:	8f 81       	ldd	r24, Y+7	; 0x07
    11f6:	98 85       	ldd	r25, Y+8	; 0x08
    11f8:	4b 96       	adiw	r24, 0x1b	; 27
    11fa:	29 81       	ldd	r18, Y+1	; 0x01
    11fc:	3a 81       	ldd	r19, Y+2	; 0x02
    11fe:	b9 01       	movw	r22, r18
    1200:	3d da       	rcall	.-2950   	; 0x67c <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    delayMicroseconds(1);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
    out &= ~(1 << _enable_pin);
    120a:	8f 81       	ldd	r24, Y+7	; 0x07
    120c:	98 85       	ldd	r25, Y+8	; 0x08
    120e:	fc 01       	movw	r30, r24
    1210:	86 81       	ldd	r24, Z+6	; 0x06
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x15e>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	2a 95       	dec	r18
    1222:	e2 f7       	brpl	.-8      	; 0x121c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x15a>
    1224:	80 95       	com	r24
    1226:	90 95       	com	r25
    1228:	29 81       	ldd	r18, Y+1	; 0x01
    122a:	3a 81       	ldd	r19, Y+2	; 0x02
    122c:	82 23       	and	r24, r18
    122e:	93 23       	and	r25, r19
    1230:	9a 83       	std	Y+2, r25	; 0x02
    1232:	89 83       	std	Y+1, r24	; 0x01
    _i2c.writeGPIOAB(out);   
    1234:	8f 81       	ldd	r24, Y+7	; 0x07
    1236:	98 85       	ldd	r25, Y+8	; 0x08
    1238:	4b 96       	adiw	r24, 0x1b	; 27
    123a:	29 81       	ldd	r18, Y+1	; 0x01
    123c:	3a 81       	ldd	r19, Y+2	; 0x02
    123e:	b9 01       	movw	r22, r18
    1240:	1d da       	rcall	.-3014   	; 0x67c <_ZN17Adafruit_MCP2301711writeGPIOABEj>
    delayMicroseconds(100);
    1242:	84 e6       	ldi	r24, 0x64	; 100
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <delayMicroseconds>
    124a:	36 c0       	rjmp	.+108    	; 0x12b8 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x1f6>

  } else {
    for (int i = 0; i < 4; i++) {
    124c:	1e 82       	std	Y+6, r1	; 0x06
    124e:	1d 82       	std	Y+5, r1	; 0x05
    1250:	2b c0       	rjmp	.+86     	; 0x12a8 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x1e6>
     _pinMode(_data_pins[i], OUTPUT);
    1252:	2f 81       	ldd	r18, Y+7	; 0x07
    1254:	38 85       	ldd	r19, Y+8	; 0x08
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	82 0f       	add	r24, r18
    125c:	93 1f       	adc	r25, r19
    125e:	07 96       	adiw	r24, 0x07	; 7
    1260:	fc 01       	movw	r30, r24
    1262:	20 81       	ld	r18, Z
    1264:	8f 81       	ldd	r24, Y+7	; 0x07
    1266:	98 85       	ldd	r25, Y+8	; 0x08
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	62 2f       	mov	r22, r18
    126c:	89 de       	rcall	.-750    	; 0xf80 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
     _digitalWrite(_data_pins[i], (value >> i) & 0x01);
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0d 80       	ldd	r0, Y+5	; 0x05
    1276:	02 c0       	rjmp	.+4      	; 0x127c <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x1ba>
    1278:	95 95       	asr	r25
    127a:	87 95       	ror	r24
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x1b6>
    1280:	48 2f       	mov	r20, r24
    1282:	41 70       	andi	r20, 0x01	; 1
    1284:	2f 81       	ldd	r18, Y+7	; 0x07
    1286:	38 85       	ldd	r19, Y+8	; 0x08
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	82 0f       	add	r24, r18
    128e:	93 1f       	adc	r25, r19
    1290:	07 96       	adiw	r24, 0x07	; 7
    1292:	fc 01       	movw	r30, r24
    1294:	20 81       	ld	r18, Z
    1296:	8f 81       	ldd	r24, Y+7	; 0x07
    1298:	98 85       	ldd	r25, Y+8	; 0x08
    129a:	62 2f       	mov	r22, r18
    129c:	13 de       	rcall	.-986    	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    out &= ~(1 << _enable_pin);
    _i2c.writeGPIOAB(out);   
    delayMicroseconds(100);

  } else {
    for (int i = 0; i < 4; i++) {
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	9e 81       	ldd	r25, Y+6	; 0x06
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	84 30       	cpi	r24, 0x04	; 4
    12ae:	91 05       	cpc	r25, r1
    12b0:	84 f2       	brlt	.-96     	; 0x1252 <_ZN21Adafruit_RGBLCDShield10write4bitsEh+0x190>
     _pinMode(_data_pins[i], OUTPUT);
     _digitalWrite(_data_pins[i], (value >> i) & 0x01);
    }
    pulseEnable();
    12b2:	8f 81       	ldd	r24, Y+7	; 0x07
    12b4:	98 85       	ldd	r25, Y+8	; 0x08
    12b6:	d2 de       	rcall	.-604    	; 0x105c <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>
  }
}
    12b8:	29 96       	adiw	r28, 0x09	; 9
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <_ZN21Adafruit_RGBLCDShield10write8bitsEh>:

void Adafruit_RGBLCDShield::write8bits(uint8_t value) {
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x6>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x8>
    12d2:	1f 92       	push	r1
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	9c 83       	std	Y+4, r25	; 0x04
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	6d 83       	std	Y+5, r22	; 0x05
  for (int i = 0; i < 8; i++) {
    12de:	1a 82       	std	Y+2, r1	; 0x02
    12e0:	19 82       	std	Y+1, r1	; 0x01
    12e2:	2b c0       	rjmp	.+86     	; 0x133a <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x70>
    _pinMode(_data_pins[i], OUTPUT);
    12e4:	2b 81       	ldd	r18, Y+3	; 0x03
    12e6:	3c 81       	ldd	r19, Y+4	; 0x04
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
    12f0:	07 96       	adiw	r24, 0x07	; 7
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 81       	ld	r18, Z
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	62 2f       	mov	r22, r18
    12fe:	40 de       	rcall	.-896    	; 0xf80 <_ZN21Adafruit_RGBLCDShield8_pinModeEhh>
    _digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	09 80       	ldd	r0, Y+1	; 0x01
    1308:	02 c0       	rjmp	.+4      	; 0x130e <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x44>
    130a:	95 95       	asr	r25
    130c:	87 95       	ror	r24
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x40>
    1312:	48 2f       	mov	r20, r24
    1314:	41 70       	andi	r20, 0x01	; 1
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	82 0f       	add	r24, r18
    1320:	93 1f       	adc	r25, r19
    1322:	07 96       	adiw	r24, 0x07	; 7
    1324:	fc 01       	movw	r30, r24
    1326:	20 81       	ld	r18, Z
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	62 2f       	mov	r22, r18
    132e:	ca dd       	rcall	.-1132   	; 0xec4 <_ZN21Adafruit_RGBLCDShield13_digitalWriteEhh>
    pulseEnable();
  }
}

void Adafruit_RGBLCDShield::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	88 30       	cpi	r24, 0x08	; 8
    1340:	91 05       	cpc	r25, r1
    1342:	84 f2       	brlt	.-96     	; 0x12e4 <_ZN21Adafruit_RGBLCDShield10write8bitsEh+0x1a>
    _pinMode(_data_pins[i], OUTPUT);
    _digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	89 de       	rcall	.-750    	; 0x105c <_ZN21Adafruit_RGBLCDShield11pulseEnableEv>
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <_ZN21Adafruit_RGBLCDShield11readButtonsEv>:

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	00 d0       	rcall	.+0      	; 0x1360 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x6>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x8>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
  uint8_t reply = 0x1F;
    136a:	8f e1       	ldi	r24, 0x1F	; 31
    136c:	89 83       	std	Y+1, r24	; 0x01

  for (uint8_t i=0; i<5; i++) {
    136e:	1a 82       	std	Y+2, r1	; 0x02
    1370:	24 c0       	rjmp	.+72     	; 0x13ba <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x60>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	2b 81       	ldd	r18, Y+3	; 0x03
    137a:	3c 81       	ldd	r19, Y+4	; 0x04
    137c:	82 0f       	add	r24, r18
    137e:	93 1f       	adc	r25, r19
    1380:	0f 96       	adiw	r24, 0x0f	; 15
    1382:	fc 01       	movw	r30, r24
    1384:	20 81       	ld	r18, Z
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	4b 96       	adiw	r24, 0x1b	; 27
    138c:	62 2f       	mov	r22, r18
    138e:	9d da       	rcall	.-2758   	; 0x8ca <_ZN17Adafruit_MCP2301711digitalReadEh>
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	2a 81       	ldd	r18, Y+2	; 0x02
    1396:	22 2f       	mov	r18, r18
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x46>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	2a 95       	dec	r18
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x42>
    13a4:	80 95       	com	r24
    13a6:	90 95       	com	r25
    13a8:	29 81       	ldd	r18, Y+1	; 0x01
    13aa:	22 2f       	mov	r18, r18
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	82 23       	and	r24, r18
    13b0:	93 23       	and	r25, r19
    13b2:	89 83       	std	Y+1, r24	; 0x01
}

uint8_t Adafruit_RGBLCDShield::readButtons(void) {
  uint8_t reply = 0x1F;

  for (uint8_t i=0; i<5; i++) {
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	85 30       	cpi	r24, 0x05	; 5
    13be:	c8 f2       	brcs	.-78     	; 0x1372 <_ZN21Adafruit_RGBLCDShield11readButtonsEv+0x18>
    reply &= ~((_i2c.digitalRead(_button_pins[i])) << i);
  }
  return reply;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <_ZN3MsgC1E7MsgType7MsgCode>:

// Returns true if the button is pressed.
bool Button::isPressed() const
{
    return m_logicState == m_activeState;
}
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <_ZN3MsgC1E7MsgType7MsgCode+0x6>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <_ZN3MsgC1E7MsgType7MsgCode+0x8>
    13d8:	1f 92       	push	r1
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	7c 83       	std	Y+4, r23	; 0x04
    13e4:	6b 83       	std	Y+3, r22	; 0x03
    13e6:	4d 83       	std	Y+5, r20	; 0x05
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	2b 81       	ldd	r18, Y+3	; 0x03
    13ee:	3c 81       	ldd	r19, Y+4	; 0x04
    13f0:	fc 01       	movw	r30, r24
    13f2:	31 83       	std	Z+1, r19	; 0x01
    13f4:	20 83       	st	Z, r18
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	2d 81       	ldd	r18, Y+5	; 0x05
    13fc:	fc 01       	movw	r30, r24
    13fe:	22 83       	std	Z+2, r18	; 0x02
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	fc 01       	movw	r30, r24
    1406:	14 82       	std	Z+4, r1	; 0x04
    1408:	13 82       	std	Z+3, r1	; 0x03
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <_ZN6ButtonC1EP15ReadButtonStatei7MsgCodeb>:
    141a:	0f 93       	push	r16
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	28 97       	sbiw	r28, 0x08	; 8
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	7c 83       	std	Y+4, r23	; 0x04
    1436:	6b 83       	std	Y+3, r22	; 0x03
    1438:	5e 83       	std	Y+6, r21	; 0x06
    143a:	4d 83       	std	Y+5, r20	; 0x05
    143c:	2f 83       	std	Y+7, r18	; 0x07
    143e:	08 87       	std	Y+8, r16	; 0x08
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	fc 01       	movw	r30, r24
    144a:	31 83       	std	Z+1, r19	; 0x01
    144c:	20 83       	st	Z, r18
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	28 85       	ldd	r18, Y+8	; 0x08
    1454:	fc 01       	movw	r30, r24
    1456:	22 83       	std	Z+2, r18	; 0x02
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	9a 81       	ldd	r25, Y+2	; 0x02
    145c:	2d 81       	ldd	r18, Y+5	; 0x05
    145e:	3e 81       	ldd	r19, Y+6	; 0x06
    1460:	fc 01       	movw	r30, r24
    1462:	34 83       	std	Z+4, r19	; 0x04
    1464:	23 83       	std	Z+3, r18	; 0x03
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	2f 81       	ldd	r18, Y+7	; 0x07
    146c:	fc 01       	movw	r30, r24
    146e:	25 83       	std	Z+5, r18	; 0x05
    1470:	98 85       	ldd	r25, Y+8	; 0x08
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 27       	eor	r24, r25
    1476:	28 2f       	mov	r18, r24
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	fc 01       	movw	r30, r24
    147e:	26 83       	std	Z+6, r18	; 0x06
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	07 96       	adiw	r24, 0x07	; 7
    1486:	4f 81       	ldd	r20, Y+7	; 0x07
    1488:	6f ef       	ldi	r22, 0xFF	; 255
    148a:	7f ef       	ldi	r23, 0xFF	; 255
    148c:	a1 df       	rcall	.-190    	; 0x13d0 <_ZN3MsgC1E7MsgType7MsgCode>
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	fc 01       	movw	r30, r24
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01
    1498:	fc 01       	movw	r30, r24
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	06 96       	adiw	r24, 0x06	; 6
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 81       	ld	r18, Z
    14a4:	31 81       	ldd	r19, Z+1	; 0x01
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	fc 01       	movw	r30, r24
    14ac:	83 81       	ldd	r24, Z+3	; 0x03
    14ae:	94 81       	ldd	r25, Z+4	; 0x04
    14b0:	58 2f       	mov	r21, r24
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	fc 01       	movw	r30, r24
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	65 2f       	mov	r22, r21
    14c0:	f9 01       	movw	r30, r18
    14c2:	09 95       	icall
    14c4:	28 96       	adiw	r28, 0x08	; 8
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	0f 91       	pop	r16
    14d6:	08 95       	ret

000014d8 <_ZN6Button6getMsgEv>:


// Returns information about the current
// state of the button.
Msg& Button::getMsg()
{
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	00 d0       	rcall	.+0      	; 0x14de <_ZN6Button6getMsgEv+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <_ZN6Button6getMsgEv+0x8>
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <_ZN6Button6getMsgEv+0xa>
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
	m_msg.m_type = eButtonActionNone;
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	2f ef       	ldi	r18, 0xFF	; 255
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	fc 01       	movw	r30, r24
    14f4:	30 87       	std	Z+8, r19	; 0x08
    14f6:	27 83       	std	Z+7, r18	; 0x07
    unsigned long curState = m_buttonStateReader->isPressed(m_mcuPin);
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	fc 01       	movw	r30, r24
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	fc 01       	movw	r30, r24
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	04 96       	adiw	r24, 0x04	; 4
    150a:	fc 01       	movw	r30, r24
    150c:	20 81       	ld	r18, Z
    150e:	31 81       	ldd	r19, Z+1	; 0x01
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	fc 01       	movw	r30, r24
    1516:	83 81       	ldd	r24, Z+3	; 0x03
    1518:	94 81       	ldd	r25, Z+4	; 0x04
    151a:	48 2f       	mov	r20, r24
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	fc 01       	movw	r30, r24
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	64 2f       	mov	r22, r20
    1528:	f9 01       	movw	r30, r18
    152a:	09 95       	icall
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e0       	ldi	r26, 0x00	; 0
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	ab 83       	std	Y+3, r26	; 0x03
    153a:	bc 83       	std	Y+4, r27	; 0x04
    if(curState != m_logicState)
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	fc 01       	movw	r30, r24
    1542:	86 81       	ldd	r24, Z+6	; 0x06
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	9a 81       	ldd	r25, Y+2	; 0x02
    1550:	ab 81       	ldd	r26, Y+3	; 0x03
    1552:	bc 81       	ldd	r27, Y+4	; 0x04
    1554:	28 17       	cp	r18, r24
    1556:	39 07       	cpc	r19, r25
    1558:	4a 07       	cpc	r20, r26
    155a:	5b 07       	cpc	r21, r27
    155c:	f1 f0       	breq	.+60     	; 0x159a <_ZN6Button6getMsgEv+0xc2>
    {
        if(curState == m_activeState)
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	fc 01       	movw	r30, r24
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	ab 81       	ldd	r26, Y+3	; 0x03
    1574:	bc 81       	ldd	r27, Y+4	; 0x04
    1576:	28 17       	cp	r18, r24
    1578:	39 07       	cpc	r19, r25
    157a:	4a 07       	cpc	r20, r26
    157c:	5b 07       	cpc	r21, r27
    157e:	31 f4       	brne	.+12     	; 0x158c <_ZN6Button6getMsgEv+0xb4>
        {
            m_msg.m_type = eButtonActionPress;
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	fc 01       	movw	r30, r24
    1586:	10 86       	std	Z+8, r1	; 0x08
    1588:	17 82       	std	Z+7, r1	; 0x07
    158a:	07 c0       	rjmp	.+14     	; 0x159a <_ZN6Button6getMsgEv+0xc2>
        }
        else
        {
            m_msg.m_type = eButtonActionRelease;
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	fc 01       	movw	r30, r24
    1596:	30 87       	std	Z+8, r19	; 0x08
    1598:	27 83       	std	Z+7, r18	; 0x07
        }
    }
    m_logicState = curState;
    159a:	29 81       	ldd	r18, Y+1	; 0x01
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	fc 01       	movw	r30, r24
    15a2:	26 83       	std	Z+6, r18	; 0x06
    return m_msg;
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	07 96       	adiw	r24, 0x07	; 7
}
    15aa:	26 96       	adiw	r28, 0x06	; 6
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <_ZN5Portb3SetEh>:
#ifdef USE_PORTA

MAKE_PORT(PORTA, DDRA, PINA, Porta, 'A')
#endif
#ifdef USE_PORTB
MAKE_PORT(PORTB, DDRB, PINB, Portb, 'B')
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	1f 92       	push	r1
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	85 e2       	ldi	r24, 0x25	; 37
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	25 e2       	ldi	r18, 0x25	; 37
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	f9 01       	movw	r30, r18
    15d2:	30 81       	ld	r19, Z
    15d4:	29 81       	ldd	r18, Y+1	; 0x01
    15d6:	23 2b       	or	r18, r19
    15d8:	fc 01       	movw	r30, r24
    15da:	20 83       	st	Z, r18
    15dc:	0f 90       	pop	r0
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <_ZN5Portb5ClearEh>:
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	1f 92       	push	r1
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	85 e2       	ldi	r24, 0x25	; 37
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	25 e2       	ldi	r18, 0x25	; 37
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	20 81       	ld	r18, Z
    15fc:	32 2f       	mov	r19, r18
    15fe:	29 81       	ldd	r18, Y+1	; 0x01
    1600:	20 95       	com	r18
    1602:	23 23       	and	r18, r19
    1604:	fc 01       	movw	r30, r24
    1606:	20 83       	st	Z, r18
    1608:	0f 90       	pop	r0
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <_ZN5Portb6DirSetEh>:
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	1f 92       	push	r1
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	84 e2       	ldi	r24, 0x24	; 36
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	24 e2       	ldi	r18, 0x24	; 36
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	f9 01       	movw	r30, r18
    1626:	30 81       	ld	r19, Z
    1628:	29 81       	ldd	r18, Y+1	; 0x01
    162a:	23 2b       	or	r18, r19
    162c:	fc 01       	movw	r30, r24
    162e:	20 83       	st	Z, r18
    1630:	0f 90       	pop	r0
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <_ZN5Portb8DirClearEh>:
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	1f 92       	push	r1
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	84 e2       	ldi	r24, 0x24	; 36
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	24 e2       	ldi	r18, 0x24	; 36
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	f9 01       	movw	r30, r18
    164e:	20 81       	ld	r18, Z
    1650:	32 2f       	mov	r19, r18
    1652:	29 81       	ldd	r18, Y+1	; 0x01
    1654:	20 95       	com	r18
    1656:	23 23       	and	r18, r19
    1658:	fc 01       	movw	r30, r24
    165a:	20 83       	st	Z, r18
    165c:	0f 90       	pop	r0
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <_ZN12SetupHandler14setDriveAmountEm>:
	void updateRestoreFocusUI(int change = 0);
	void advanceCaret(uint8_t dir); // -1 = left, 1 right. All other values ignored
 public:
    SetupHandler(MessagePump *_pump, uint32_t driveAmount, uint32_t frames);
    uint32_t getDriveAmount() const { return m_driveAmount;}
    void setDriveAmount(uint32_t driveAmount) { m_driveAmount = driveAmount;}
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	00 d0       	rcall	.+0      	; 0x166a <_ZN12SetupHandler14setDriveAmountEm+0x6>
    166a:	00 d0       	rcall	.+0      	; 0x166c <_ZN12SetupHandler14setDriveAmountEm+0x8>
    166c:	00 d0       	rcall	.+0      	; 0x166e <_ZN12SetupHandler14setDriveAmountEm+0xa>
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	4b 83       	std	Y+3, r20	; 0x03
    1678:	5c 83       	std	Y+4, r21	; 0x04
    167a:	6d 83       	std	Y+5, r22	; 0x05
    167c:	7e 83       	std	Y+6, r23	; 0x06
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	ad 81       	ldd	r26, Y+5	; 0x05
    1684:	be 81       	ldd	r27, Y+6	; 0x06
    1686:	29 81       	ldd	r18, Y+1	; 0x01
    1688:	3a 81       	ldd	r19, Y+2	; 0x02
    168a:	f9 01       	movw	r30, r18
    168c:	86 87       	std	Z+14, r24	; 0x0e
    168e:	97 87       	std	Z+15, r25	; 0x0f
    1690:	a0 8b       	std	Z+16, r26	; 0x10
    1692:	b1 8b       	std	Z+17, r27	; 0x11
    1694:	26 96       	adiw	r28, 0x06	; 6
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <_ZN12SetupHandler12setNumFramesEm>:
    uint32_t getNumFrames() const { return m_numFrames; }
    void setNumFrames(uint32_t numFrames) { m_numFrames = numFrames;}
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <_ZN12SetupHandler12setNumFramesEm+0x6>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <_ZN12SetupHandler12setNumFramesEm+0x8>
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <_ZN12SetupHandler12setNumFramesEm+0xa>
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	4b 83       	std	Y+3, r20	; 0x03
    16ba:	5c 83       	std	Y+4, r21	; 0x04
    16bc:	6d 83       	std	Y+5, r22	; 0x05
    16be:	7e 83       	std	Y+6, r23	; 0x06
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	ad 81       	ldd	r26, Y+5	; 0x05
    16c6:	be 81       	ldd	r27, Y+6	; 0x06
    16c8:	29 81       	ldd	r18, Y+1	; 0x01
    16ca:	3a 81       	ldd	r19, Y+2	; 0x02
    16cc:	f9 01       	movw	r30, r18
    16ce:	82 8b       	std	Z+18, r24	; 0x12
    16d0:	93 8b       	std	Z+19, r25	; 0x13
    16d2:	a4 8b       	std	Z+20, r26	; 0x14
    16d4:	b5 8b       	std	Z+21, r27	; 0x15
    16d6:	26 96       	adiw	r28, 0x06	; 6
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <_ZNK12SetupHandler25getFrameDelayMillisecondsEv>:
	uint32_t getFrameDelayMilliseconds() const { return m_frameDelaySeconds * 1000; }
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <_ZNK12SetupHandler25getFrameDelayMillisecondsEv+0x6>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	fc 01       	movw	r30, r24
    16fc:	26 89       	ldd	r18, Z+22	; 0x16
    16fe:	37 89       	ldd	r19, Z+23	; 0x17
    1700:	40 8d       	ldd	r20, Z+24	; 0x18
    1702:	51 8d       	ldd	r21, Z+25	; 0x19
    1704:	88 ee       	ldi	r24, 0xE8	; 232
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	dc 01       	movw	r26, r24
    170a:	0e 94 f1 3e 	call	0x7de2	; 0x7de2 <__muluhisi3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <_ZN12SetupHandler20setFrameDelaySecondsEm>:
	void setFrameDelaySeconds(uint32_t delay) { m_frameDelaySeconds = delay; }
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	00 d0       	rcall	.+0      	; 0x1726 <_ZN12SetupHandler20setFrameDelaySecondsEm+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <_ZN12SetupHandler20setFrameDelaySecondsEm+0x8>
    1728:	00 d0       	rcall	.+0      	; 0x172a <_ZN12SetupHandler20setFrameDelaySecondsEm+0xa>
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	4b 83       	std	Y+3, r20	; 0x03
    1734:	5c 83       	std	Y+4, r21	; 0x04
    1736:	6d 83       	std	Y+5, r22	; 0x05
    1738:	7e 83       	std	Y+6, r23	; 0x06
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	ad 81       	ldd	r26, Y+5	; 0x05
    1740:	be 81       	ldd	r27, Y+6	; 0x06
    1742:	29 81       	ldd	r18, Y+1	; 0x01
    1744:	3a 81       	ldd	r19, Y+2	; 0x02
    1746:	f9 01       	movw	r30, r18
    1748:	86 8b       	std	Z+22, r24	; 0x16
    174a:	97 8b       	std	Z+23, r25	; 0x17
    174c:	a0 8f       	std	Z+24, r26	; 0x18
    174e:	b1 8f       	std	Z+25, r27	; 0x19
    1750:	26 96       	adiw	r28, 0x06	; 6
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	08 95       	ret

00001762 <_ZN12SetupHandler15setRestoreFocusEb>:
	
	bool getRestoreFocus() const { return m_restoreFocus; }
	void setRestoreFocus(bool restore) { m_restoreFocus = restore; }
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	00 d0       	rcall	.+0      	; 0x1768 <_ZN12SetupHandler15setRestoreFocusEb+0x6>
    1768:	1f 92       	push	r1
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	6b 83       	std	Y+3, r22	; 0x03
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	2b 81       	ldd	r18, Y+3	; 0x03
    177a:	fc 01       	movw	r30, r24
    177c:	22 8f       	std	Z+26, r18	; 0x1a
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <setup>:
Button buttonDown(&buttonStateReader, BUTTON_DOWN, eDown, HIGH);
Button buttonSelect(&buttonStateReader, BUTTON_SELECT, eSelect, HIGH);
Button* buttons[5] = {&buttonLeft, &buttonRight, &buttonUp, &buttonDown, &buttonSelect};


void setup() {
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
	// Debugging output
	Serial.begin(SERIAL_SPEED);
    1792:	40 e8       	ldi	r20, 0x80	; 128
    1794:	55 e2       	ldi	r21, 0x25	; 37
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	84 e7       	ldi	r24, 0x74	; 116
    179c:	94 e0       	ldi	r25, 0x04	; 4
    179e:	0e 94 3c 2a 	call	0x5478	; 0x5478 <_ZN14HardwareSerial5beginEm>
	// set up the LCD's number of columns and rows:
	lcd.begin(16, 2);
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	42 e0       	ldi	r20, 0x02	; 2
    17a6:	60 e1       	ldi	r22, 0x10	; 16
    17a8:	87 e5       	ldi	r24, 0x57	; 87
    17aa:	93 e0       	ldi	r25, 0x03	; 3
    17ac:	4c d9       	rcall	.-3432   	; 0xa46 <_ZN21Adafruit_RGBLCDShield5beginEhhh>
	// Setup usb.
	if (Usb.Init() == -1)
    17ae:	87 ea       	ldi	r24, 0xA7	; 167
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	b4 d1       	rcall	.+872    	; 0x1b1c <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv>
    17b4:	98 2f       	mov	r25, r24
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	9f 3f       	cpi	r25, 0xFF	; 255
    17ba:	09 f0       	breq	.+2      	; 0x17be <setup+0x34>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	88 23       	and	r24, r24
    17c0:	89 f0       	breq	.+34     	; 0x17e4 <setup+0x5a>
	{
		Serial.println("OSC did not start.");
    17c2:	62 e2       	ldi	r22, 0x22	; 34
    17c4:	71 e0       	ldi	r23, 0x01	; 1
    17c6:	84 e7       	ldi	r24, 0x74	; 116
    17c8:	94 e0       	ldi	r25, 0x04	; 4
    17ca:	0e 94 9b 2b 	call	0x5736	; 0x5736 <_ZN5Print7printlnEPKc>
		g_print->print(F("USB did not start."));
    17ce:	2a e5       	ldi	r18, 0x5A	; 90
    17d0:	32 e0       	ldi	r19, 0x02	; 2
    17d2:	80 91 0a 01 	lds	r24, 0x010A
    17d6:	90 91 0b 01 	lds	r25, 0x010B
    17da:	b9 01       	movw	r22, r18
    17dc:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
		g_usbOK = false;
    17e0:	10 92 09 01 	sts	0x0109, r1
	}
	// Restore previous settings
	if((g_savedFocusAmount = eeprom_read_word(&ePromFocusAmount)) != 0xffff)
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <__eerd_word_m328p>
    17ec:	90 93 07 01 	sts	0x0107, r25
    17f0:	80 93 06 01 	sts	0x0106, r24
    17f4:	80 91 06 01 	lds	r24, 0x0106
    17f8:	90 91 07 01 	lds	r25, 0x0107
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	93 07       	cpc	r25, r19
    1804:	09 f4       	brne	.+2      	; 0x1808 <setup+0x7e>
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	22 23       	and	r18, r18
    180a:	61 f0       	breq	.+24     	; 0x1824 <setup+0x9a>
	{
		g_setup.setDriveAmount(g_savedFocusAmount);	
    180c:	80 91 06 01 	lds	r24, 0x0106
    1810:	90 91 07 01 	lds	r25, 0x0107
    1814:	cc 01       	movw	r24, r24
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ac 01       	movw	r20, r24
    181c:	bd 01       	movw	r22, r26
    181e:	8a e7       	ldi	r24, 0x7A	; 122
    1820:	92 e0       	ldi	r25, 0x02	; 2
    1822:	20 df       	rcall	.-448    	; 0x1664 <_ZN12SetupHandler14setDriveAmountEm>
	}
	
	if((g_savedFrameDelay = eeprom_read_word(&ePromFrameDelay)) != 0xffff)
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <__eerd_word_m328p>
    182c:	90 93 55 03 	sts	0x0355, r25
    1830:	80 93 54 03 	sts	0x0354, r24
    1834:	80 91 54 03 	lds	r24, 0x0354
    1838:	90 91 55 03 	lds	r25, 0x0355
    183c:	21 e0       	ldi	r18, 0x01	; 1
    183e:	8f 3f       	cpi	r24, 0xFF	; 255
    1840:	3f ef       	ldi	r19, 0xFF	; 255
    1842:	93 07       	cpc	r25, r19
    1844:	09 f4       	brne	.+2      	; 0x1848 <setup+0xbe>
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	22 23       	and	r18, r18
    184a:	61 f0       	breq	.+24     	; 0x1864 <setup+0xda>
	{
		g_setup.setFrameDelaySeconds(g_savedFrameDelay);	
    184c:	80 91 54 03 	lds	r24, 0x0354
    1850:	90 91 55 03 	lds	r25, 0x0355
    1854:	cc 01       	movw	r24, r24
    1856:	a0 e0       	ldi	r26, 0x00	; 0
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ac 01       	movw	r20, r24
    185c:	bd 01       	movw	r22, r26
    185e:	8a e7       	ldi	r24, 0x7A	; 122
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	5e df       	rcall	.-324    	; 0x1720 <_ZN12SetupHandler20setFrameDelaySecondsEm>
	}
	
	if((g_savedNumFrames = eeprom_read_byte(&ePromNumFrames)) != 0xff)
    1864:	84 e0       	ldi	r24, 0x04	; 4
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__eerd_byte_m328p>
    186c:	80 93 08 01 	sts	0x0108, r24
    1870:	90 91 08 01 	lds	r25, 0x0108
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	9f 3f       	cpi	r25, 0xFF	; 255
    1878:	09 f4       	brne	.+2      	; 0x187c <setup+0xf2>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	88 23       	and	r24, r24
    187e:	59 f0       	breq	.+22     	; 0x1896 <setup+0x10c>
	{
		g_setup.setNumFrames(g_savedNumFrames);
    1880:	80 91 08 01 	lds	r24, 0x0108
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e0       	ldi	r26, 0x00	; 0
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ac 01       	movw	r20, r24
    188e:	bd 01       	movw	r22, r26
    1890:	8a e7       	ldi	r24, 0x7A	; 122
    1892:	92 e0       	ldi	r25, 0x02	; 2
    1894:	08 df       	rcall	.-496    	; 0x16a6 <_ZN12SetupHandler12setNumFramesEm>
	}
	if((g_savedRestoreFocus = eeprom_read_byte(&ePromRestoreFocus)) != 0xff)
    1896:	85 e0       	ldi	r24, 0x05	; 5
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__eerd_byte_m328p>
    189e:	80 93 56 03 	sts	0x0356, r24
    18a2:	90 91 56 03 	lds	r25, 0x0356
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	9f 3f       	cpi	r25, 0xFF	; 255
    18aa:	09 f4       	brne	.+2      	; 0x18ae <setup+0x124>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	88 23       	and	r24, r24
    18b0:	51 f0       	breq	.+20     	; 0x18c6 <setup+0x13c>
	{
		g_setup.setRestoreFocus(g_savedRestoreFocus);	
    18b2:	90 91 56 03 	lds	r25, 0x0356
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	99 23       	and	r25, r25
    18ba:	09 f4       	brne	.+2      	; 0x18be <setup+0x134>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	68 2f       	mov	r22, r24
    18c0:	8a e7       	ldi	r24, 0x7A	; 122
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	4e df       	rcall	.-356    	; 0x1762 <_ZN12SetupHandler15setRestoreFocusEb>
	}
}
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <loop>:

void loop()
{
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	2c 97       	sbiw	r28, 0x0c	; 12
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
	
	Usb.Task();
    18ec:	87 ea       	ldi	r24, 0xA7	; 167
    18ee:	92 e0       	ldi	r25, 0x02	; 2
    18f0:	0e 94 94 3d 	call	0x7b28	; 0x7b28 <_ZN3USB4TaskEv>
	for(size_t b = 0; b < sizeof(buttons) / sizeof(buttons[0]); b++)
    18f4:	1a 82       	std	Y+2, r1	; 0x02
    18f6:	19 82       	std	Y+1, r1	; 0x01
    18f8:	20 c0       	rjmp	.+64     	; 0x193a <loop+0x6e>
	{
		Msg& msg = buttons[b]->getMsg();
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	84 5f       	subi	r24, 0xF4	; 244
    1904:	9e 4f       	sbci	r25, 0xFE	; 254
    1906:	fc 01       	movw	r30, r24
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	e5 dd       	rcall	.-1078   	; 0x14d8 <_ZN6Button6getMsgEv>
    190e:	9c 83       	std	Y+4, r25	; 0x04
    1910:	8b 83       	std	Y+3, r24	; 0x03
		if(msg.m_type != eButtonActionNone) g_pump.dispatch(msg);
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	fc 01       	movw	r30, r24
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	8f 3f       	cpi	r24, 0xFF	; 255
    191e:	ff ef       	ldi	r31, 0xFF	; 255
    1920:	9f 07       	cpc	r25, r31
    1922:	31 f0       	breq	.+12     	; 0x1930 <loop+0x64>
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	bc 01       	movw	r22, r24
    192a:	8a e6       	ldi	r24, 0x6A	; 106
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	d9 d5       	rcall	.+2994   	; 0x24e2 <_ZN11MessagePump8dispatchER3Msg>

void loop()
{
	
	Usb.Task();
	for(size_t b = 0; b < sizeof(buttons) / sizeof(buttons[0]); b++)
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	25 e0       	ldi	r18, 0x05	; 5
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	82 17       	cp	r24, r18
    1944:	93 07       	cpc	r25, r19
    1946:	c8 f2       	brcs	.-78     	; 0x18fa <loop+0x2e>
	{
		Msg& msg = buttons[b]->getMsg();
		if(msg.m_type != eButtonActionNone) g_pump.dispatch(msg);
	}
	// Time the shutter release in case the user wants to let the flash recharge.
	const unsigned long now = millis();
    1948:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8d 83       	std	Y+5, r24	; 0x05
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	af 83       	std	Y+7, r26	; 0x07
    1956:	b8 87       	std	Y+8, r27	; 0x08
	if(nk3.isConnected() && nk3.isFocusStackActive())
    1958:	81 e2       	ldi	r24, 0x21	; 33
    195a:	93 e0       	ldi	r25, 0x03	; 3
    195c:	0e 94 4f 1a 	call	0x349e	; 0x349e <_ZNK10NikType00311isConnectedEv>
    1960:	88 23       	and	r24, r24
    1962:	41 f0       	breq	.+16     	; 0x1974 <loop+0xa8>
    1964:	81 e2       	ldi	r24, 0x21	; 33
    1966:	93 e0       	ldi	r25, 0x03	; 3
    1968:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <_ZNK10NikType00318isFocusStackActiveEv>
    196c:	88 23       	and	r24, r24
    196e:	11 f0       	breq	.+4      	; 0x1974 <loop+0xa8>
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <loop+0xaa>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <loop+0xb0>
    197a:	c1 c0       	rjmp	.+386    	; 0x1afe <loop+0x232>
	{
		// we're connected and a focus stack op is in progress
		if(!nk3.isCaptureInProgress())
    197c:	81 e2       	ldi	r24, 0x21	; 33
    197e:	93 e0       	ldi	r25, 0x03	; 3
    1980:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZNK10NikType00319isCaptureInProgressEv>
    1984:	98 2f       	mov	r25, r24
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	89 27       	eor	r24, r25
    198a:	88 23       	and	r24, r24
    198c:	09 f4       	brne	.+2      	; 0x1990 <loop+0xc4>
    198e:	b7 c0       	rjmp	.+366    	; 0x1afe <loop+0x232>
		{
			// Capture is complete. If there is no frame delay, prepare
			// the next frame & shoot it
			if(0 == g_pSetup->getFrameDelayMilliseconds())
    1990:	80 91 02 01 	lds	r24, 0x0102
    1994:	90 91 03 01 	lds	r25, 0x0103
    1998:	a7 de       	rcall	.-690    	; 0x16e8 <_ZNK12SetupHandler25getFrameDelayMillisecondsEv>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	21 e0       	ldi	r18, 0x01	; 1
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	a1 05       	cpc	r26, r1
    19a4:	b1 05       	cpc	r27, r1
    19a6:	09 f0       	breq	.+2      	; 0x19aa <loop+0xde>
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	22 23       	and	r18, r18
    19ac:	d9 f0       	breq	.+54     	; 0x19e4 <loop+0x118>
			{
				if(!nk3.isNextFrameFocused())
    19ae:	81 e2       	ldi	r24, 0x21	; 33
    19b0:	93 e0       	ldi	r25, 0x03	; 3
    19b2:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZNK10NikType00318isNextFrameFocusedEv>
    19b6:	98 2f       	mov	r25, r24
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 27       	eor	r24, r25
    19bc:	88 23       	and	r24, r24
    19be:	09 f4       	brne	.+2      	; 0x19c2 <loop+0xf6>
    19c0:	43 c0       	rjmp	.+134    	; 0x1a48 <loop+0x17c>
				{
					if(PTP_RC_OK == nk3.prepareNextFrame())
    19c2:	81 e2       	ldi	r24, 0x21	; 33
    19c4:	93 e0       	ldi	r25, 0x03	; 3
    19c6:	0e 94 41 18 	call	0x3082	; 0x3082 <_ZN10NikType00316prepareNextFrameEv>
    19ca:	21 e0       	ldi	r18, 0x01	; 1
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	00 e2       	ldi	r16, 0x20	; 32
    19d0:	90 07       	cpc	r25, r16
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <loop+0x10a>
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	22 23       	and	r18, r18
    19d8:	b9 f1       	breq	.+110    	; 0x1a48 <loop+0x17c>
					{
						nk3.focusStackNextFrame();
    19da:	81 e2       	ldi	r24, 0x21	; 33
    19dc:	93 e0       	ldi	r25, 0x03	; 3
    19de:	0e 94 1a 19 	call	0x3234	; 0x3234 <_ZN10NikType00319focusStackNextFrameEv>
    19e2:	32 c0       	rjmp	.+100    	; 0x1a48 <loop+0x17c>
					}	
				}
			}
			// else user requested a frame delay. Use that time to prepare the next frame
			else if(!nk3.isNextFrameFocused())
    19e4:	81 e2       	ldi	r24, 0x21	; 33
    19e6:	93 e0       	ldi	r25, 0x03	; 3
    19e8:	0e 94 91 1a 	call	0x3522	; 0x3522 <_ZNK10NikType00318isNextFrameFocusedEv>
    19ec:	98 2f       	mov	r25, r24
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	89 27       	eor	r24, r25
    19f2:	88 23       	and	r24, r24
    19f4:	29 f0       	breq	.+10     	; 0x1a00 <loop+0x134>
			{
				nk3.prepareNextFrame();
    19f6:	81 e2       	ldi	r24, 0x21	; 33
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 41 18 	call	0x3082	; 0x3082 <_ZN10NikType00316prepareNextFrameEv>
    19fe:	24 c0       	rjmp	.+72     	; 0x1a48 <loop+0x17c>
			}
			// else we're focused & waiting on the frame delay
			else if(now - nk3.getTimeLastCaptureStart() >= g_pSetup->getFrameDelayMilliseconds())
    1a00:	81 e2       	ldi	r24, 0x21	; 33
    1a02:	93 e0       	ldi	r25, 0x03	; 3
    1a04:	0e 94 a7 1a 	call	0x354e	; 0x354e <_ZNK10NikType00323getTimeLastCaptureStartEv>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a10:	4f 81       	ldd	r20, Y+7	; 0x07
    1a12:	58 85       	ldd	r21, Y+8	; 0x08
    1a14:	69 01       	movw	r12, r18
    1a16:	7a 01       	movw	r14, r20
    1a18:	c8 1a       	sub	r12, r24
    1a1a:	d9 0a       	sbc	r13, r25
    1a1c:	ea 0a       	sbc	r14, r26
    1a1e:	fb 0a       	sbc	r15, r27
    1a20:	80 91 02 01 	lds	r24, 0x0102
    1a24:	90 91 03 01 	lds	r25, 0x0103
    1a28:	5f de       	rcall	.-834    	; 0x16e8 <_ZNK12SetupHandler25getFrameDelayMillisecondsEv>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	c8 16       	cp	r12, r24
    1a32:	d9 06       	cpc	r13, r25
    1a34:	ea 06       	cpc	r14, r26
    1a36:	fb 06       	cpc	r15, r27
    1a38:	08 f4       	brcc	.+2      	; 0x1a3c <loop+0x170>
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	22 23       	and	r18, r18
    1a3e:	21 f0       	breq	.+8      	; 0x1a48 <loop+0x17c>
			{
				nk3.focusStackNextFrame();
    1a40:	81 e2       	ldi	r24, 0x21	; 33
    1a42:	93 e0       	ldi	r25, 0x03	; 3
    1a44:	0e 94 1a 19 	call	0x3234	; 0x3234 <_ZN10NikType00319focusStackNextFrameEv>
			}
			// else update the frame delay countdown once a second.
			if((0 != g_pSetup->getFrameDelayMilliseconds()) && (now - g_pRunStack->getLastUpdateTime() > 1000 ))
    1a48:	80 91 02 01 	lds	r24, 0x0102
    1a4c:	90 91 03 01 	lds	r25, 0x0103
    1a50:	4b de       	rcall	.-874    	; 0x16e8 <_ZNK12SetupHandler25getFrameDelayMillisecondsEv>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	a1 05       	cpc	r26, r1
    1a5a:	b1 05       	cpc	r27, r1
    1a5c:	e1 f0       	breq	.+56     	; 0x1a96 <loop+0x1ca>
    1a5e:	80 91 04 01 	lds	r24, 0x0104
    1a62:	90 91 05 01 	lds	r25, 0x0105
    1a66:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <_ZNK20RunFocusStackHandler17getLastUpdateTimeEv>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a70:	3e 81       	ldd	r19, Y+6	; 0x06
    1a72:	4f 81       	ldd	r20, Y+7	; 0x07
    1a74:	58 85       	ldd	r21, Y+8	; 0x08
    1a76:	79 01       	movw	r14, r18
    1a78:	8a 01       	movw	r16, r20
    1a7a:	e8 1a       	sub	r14, r24
    1a7c:	f9 0a       	sbc	r15, r25
    1a7e:	0a 0b       	sbc	r16, r26
    1a80:	1b 0b       	sbc	r17, r27
    1a82:	d8 01       	movw	r26, r16
    1a84:	c7 01       	movw	r24, r14
    1a86:	89 3e       	cpi	r24, 0xE9	; 233
    1a88:	03 e0       	ldi	r16, 0x03	; 3
    1a8a:	90 07       	cpc	r25, r16
    1a8c:	a1 05       	cpc	r26, r1
    1a8e:	b1 05       	cpc	r27, r1
    1a90:	10 f0       	brcs	.+4      	; 0x1a96 <loop+0x1ca>
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <loop+0x1cc>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	88 23       	and	r24, r24
    1a9a:	89 f1       	breq	.+98     	; 0x1afe <loop+0x232>
			{
				// Flash recharging: put up a countdown timer once a second.
				g_pRunStack->reportDelay((g_pSetup->getFrameDelayMilliseconds() - now + nk3.getTimeLastCaptureStart())  / 1000 + 1);
    1a9c:	80 91 02 01 	lds	r24, 0x0102
    1aa0:	90 91 03 01 	lds	r25, 0x0103
    1aa4:	21 de       	rcall	.-958    	; 0x16e8 <_ZNK12SetupHandler25getFrameDelayMillisecondsEv>
    1aa6:	9b 01       	movw	r18, r22
    1aa8:	ac 01       	movw	r20, r24
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	af 81       	ldd	r26, Y+7	; 0x07
    1ab0:	b8 85       	ldd	r27, Y+8	; 0x08
    1ab2:	69 01       	movw	r12, r18
    1ab4:	7a 01       	movw	r14, r20
    1ab6:	c8 1a       	sub	r12, r24
    1ab8:	d9 0a       	sbc	r13, r25
    1aba:	ea 0a       	sbc	r14, r26
    1abc:	fb 0a       	sbc	r15, r27
    1abe:	81 e2       	ldi	r24, 0x21	; 33
    1ac0:	93 e0       	ldi	r25, 0x03	; 3
    1ac2:	0e 94 a7 1a 	call	0x354e	; 0x354e <_ZNK10NikType00323getTimeLastCaptureStartEv>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	8c 0d       	add	r24, r12
    1acc:	9d 1d       	adc	r25, r13
    1ace:	ae 1d       	adc	r26, r14
    1ad0:	bf 1d       	adc	r27, r15
    1ad2:	28 ee       	ldi	r18, 0xE8	; 232
    1ad4:	33 e0       	ldi	r19, 0x03	; 3
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__udivmodsi4>
    1ae2:	da 01       	movw	r26, r20
    1ae4:	c9 01       	movw	r24, r18
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	a1 1d       	adc	r26, r1
    1aea:	b1 1d       	adc	r27, r1
    1aec:	20 91 04 01 	lds	r18, 0x0104
    1af0:	30 91 05 01 	lds	r19, 0x0105
    1af4:	ac 01       	movw	r20, r24
    1af6:	bd 01       	movw	r22, r26
    1af8:	c9 01       	movw	r24, r18
    1afa:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <_ZN20RunFocusStackHandler11reportDelayEm>
			}
		}
	}
}
    1afe:	2c 96       	adiw	r28, 0x0c	; 12
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	df 90       	pop	r13
    1b18:	cf 90       	pop	r12
    1b1a:	08 95       	ret

00001b1c <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x6>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
    1b2a:	44 d0       	rcall	.+136    	; 0x1bb4 <_ZN4TPinI5PortbLh2EE11SetDirWriteEv>
        SPI_SS::Set();
    1b2c:	4c d0       	rcall	.+152    	; 0x1bc6 <_ZN4TPinI5PortbLh2EE3SetEv>
        spi::init();
    1b2e:	54 d0       	rcall	.+168    	; 0x1bd8 <_ZN3SPiI4TPinI5PortbLh5EES0_IS1_Lh3EES0_IS1_Lh4EES0_IS1_Lh2EEE4initEv>
        INTR::SetDirRead();
    1b30:	68 d0       	rcall	.+208    	; 0x1c02 <_ZN4TPinI5PortbLh1EE10SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	9a 81       	ldd	r25, Y+2	; 0x02
    1b36:	48 e1       	ldi	r20, 0x18	; 24
    1b38:	68 e8       	ldi	r22, 0x88	; 136
    1b3a:	6c d0       	rcall	.+216    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	9c d0       	rcall	.+312    	; 0x1c7a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv>
    1b42:	21 e0       	ldi	r18, 0x01	; 1
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x2e>
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	22 23       	and	r18, r18
    1b4c:	11 f0       	breq	.+4      	; 0x1b52 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x36>
                return ( -1);
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	2c c0       	rjmp	.+88     	; 0x1baa <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x8e>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	41 ec       	ldi	r20, 0xC1	; 193
    1b58:	68 ed       	ldi	r22, 0xD8	; 216
    1b5a:	5c d0       	rcall	.+184    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	40 e6       	ldi	r20, 0x60	; 96
    1b62:	60 ed       	ldi	r22, 0xD0	; 208
    1b64:	57 d0       	rcall	.+174    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	44 e0       	ldi	r20, 0x04	; 4
    1b6c:	68 ee       	ldi	r22, 0xE8	; 232
    1b6e:	52 d0       	rcall	.+164    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
    1b70:	00 00       	nop
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	68 ee       	ldi	r22, 0xE8	; 232
    1b78:	ba d0       	rcall	.+372    	; 0x1cee <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh>
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	84 70       	andi	r24, 0x04	; 4
    1b80:	99 27       	eor	r25, r25
    1b82:	21 e0       	ldi	r18, 0x01	; 1
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x6e>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	22 23       	and	r18, r18
    1b8c:	91 f7       	brne	.-28     	; 0x1b72 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE4InitEv+0x56>

        busprobe(); //check if anything is connected
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	e2 d0       	rcall	.+452    	; 0x1d58 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	68 ec       	ldi	r22, 0xC8	; 200
    1b9c:	3b d0       	rcall	.+118    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	60 e8       	ldi	r22, 0x80	; 128
    1ba6:	36 d0       	rcall	.+108    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>

        return ( 0);
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <_ZN4TPinI5PortbLh2EE11SetDirWriteEv>:

        static void SetDirRead() {
                PORT::DirClear(1 << PIN);
        }

        static void SetDirWrite() {
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
                PORT::DirSet(1 << PIN);
    1bbc:	84 e0       	ldi	r24, 0x04	; 4
    1bbe:	28 dd       	rcall	.-1456   	; 0x1610 <_ZN5Portb6DirSetEh>
        }
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	08 95       	ret

00001bc6 <_ZN4TPinI5PortbLh2EE3SetEv>:

        enum {
                Number = PIN
        };

        static void Set() {
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
                PORT::Set(1 << PIN);
    1bce:	84 e0       	ldi	r24, 0x04	; 4
    1bd0:	f5 dc       	rcall	.-1558   	; 0x15bc <_ZN5Portb3SetEh>
        }
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	08 95       	ret

00001bd8 <_ZN3SPiI4TPinI5PortbLh5EES0_IS1_Lh3EES0_IS1_Lh4EES0_IS1_Lh2EEE4initEv>:
                SPI_SS::Set();
                SPI.begin();
                SPI.setClockDivider(4); // Set speed to 84MHz/4=21MHz - the MAX3421E can handle up to 26MHz
        }
#else
        static void init() {
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
                //uint8_t tmp;
                SPI_CLK::SetDirWrite();
    1be0:	32 d1       	rcall	.+612    	; 0x1e46 <_ZN4TPinI5PortbLh5EE11SetDirWriteEv>
                SPI_MOSI::SetDirWrite();
    1be2:	3a d1       	rcall	.+628    	; 0x1e58 <_ZN4TPinI5PortbLh3EE11SetDirWriteEv>
                SPI_MISO::SetDirRead();
    1be4:	42 d1       	rcall	.+644    	; 0x1e6a <_ZN4TPinI5PortbLh4EE10SetDirReadEv>
                SPI_SS::SetDirWrite();
    1be6:	e6 df       	rcall	.-52     	; 0x1bb4 <_ZN4TPinI5PortbLh2EE11SetDirWriteEv>
                /* mode 00 (CPOL=0, CPHA=0) master, fclk/2. Mode 11 (CPOL=11, CPHA=11) is also supported by MAX3421E */
                //SPCR = 0x50;
				// ketil
				SPCR = 0x50;
    1be8:	8c e4       	ldi	r24, 0x4C	; 76
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	20 e5       	ldi	r18, 0x50	; 80
    1bee:	fc 01       	movw	r30, r24
    1bf0:	20 83       	st	Z, r18
                SPSR = 0x01; // 0x01
    1bf2:	8d e4       	ldi	r24, 0x4D	; 77
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	21 e0       	ldi	r18, 0x01	; 1
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	20 83       	st	Z, r18
				
                /**/
                //tmp = SPSR;
                //tmp = SPDR;
        }
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <_ZN4TPinI5PortbLh1EE10SetDirReadEv>:

        static void Toggle() {
                PORT::Toggle(1 << PIN);
        }

        static void SetDirRead() {
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
                PORT::DirClear(1 << PIN);
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	15 dd       	rcall	.-1494   	; 0x1638 <_ZN5Portb8DirClearEh>
        }
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	08 95       	ret

00001c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>:
#endif
};

/* write single byte into MAX3421 register */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh+0x8>
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	6b 83       	std	Y+3, r22	; 0x03
    1c26:	4c 83       	std	Y+4, r20	; 0x04
        XMEM_ACQUIRE_SPI();
        SPI_SS::Clear();
    1c28:	29 d1       	rcall	.+594    	; 0x1e7c <_ZN4TPinI5PortbLh2EE5ClearEv>
        spi4teensy3::send(c, 2);
#elif defined(ARDUINO_SAM_DUE) && defined(__SAM3X8E__)
        SPI.transfer(reg | 0x02);
        SPI.transfer(data);
#else
        SPDR = (reg | 0x02);
    1c2a:	8e e4       	ldi	r24, 0x4E	; 78
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c30:	22 60       	ori	r18, 0x02	; 2
    1c32:	fc 01       	movw	r30, r24
    1c34:	20 83       	st	Z, r18
        while(!(SPSR & (1 << SPIF)));
    1c36:	8d e4       	ldi	r24, 0x4D	; 77
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 95       	com	r24
    1c40:	88 1f       	adc	r24, r24
    1c42:	88 27       	eor	r24, r24
    1c44:	88 1f       	adc	r24, r24
    1c46:	88 23       	and	r24, r24
    1c48:	b1 f7       	brne	.-20     	; 0x1c36 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh+0x22>
        SPDR = data;
    1c4a:	8e e4       	ldi	r24, 0x4E	; 78
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c50:	fc 01       	movw	r30, r24
    1c52:	20 83       	st	Z, r18
        while(!(SPSR & (1 << SPIF)));
    1c54:	8d e4       	ldi	r24, 0x4D	; 77
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	fc 01       	movw	r30, r24
    1c5a:	80 81       	ld	r24, Z
    1c5c:	80 95       	com	r24
    1c5e:	88 1f       	adc	r24, r24
    1c60:	88 27       	eor	r24, r24
    1c62:	88 1f       	adc	r24, r24
    1c64:	88 23       	and	r24, r24
    1c66:	b1 f7       	brne	.-20     	; 0x1c54 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh+0x40>
#endif
        SPI_SS::Set();
    1c68:	ae df       	rcall	.-164    	; 0x1bc6 <_ZN4TPinI5PortbLh2EE3SetEv>
        XMEM_RELEASE_SPI();
        return;
    1c6a:	00 00       	nop
};
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	08 95       	ret

00001c7a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv>:
}

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
template< typename SPI_SS, typename INTR >
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv+0x6>
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv+0x8>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
        uint16_t i = 0;
    1c8a:	1a 82       	std	Y+2, r1	; 0x02
    1c8c:	19 82       	std	Y+1, r1	; 0x01
        regWr(rUSBCTL, bmCHIPRES);
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	68 e7       	ldi	r22, 0x78	; 120
    1c96:	be df       	rcall	.-132    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>
        regWr(rUSBCTL, 0x00);
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	68 e7       	ldi	r22, 0x78	; 120
    1ca0:	b9 df       	rcall	.-142    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>
        while(++i) {
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv+0x48>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	68 e6       	ldi	r22, 0x68	; 104
    1caa:	21 d0       	rcall	.+66     	; 0x1cee <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh>
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	81 70       	andi	r24, 0x01	; 1
    1cb2:	99 27       	eor	r25, r25
    1cb4:	21 e0       	ldi	r18, 0x01	; 1
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv+0x42>
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	22 23       	and	r18, r18
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv+0x48>
                        break;
    1cc0:	0d c0       	rjmp	.+26     	; 0x1cdc <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv+0x62>
template< typename SPI_SS, typename INTR >
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
        uint16_t i = 0;
        regWr(rUSBCTL, bmCHIPRES);
        regWr(rUSBCTL, 0x00);
        while(++i) {
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	21 e0       	ldi	r18, 0x01	; 1
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv+0x5e>
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	22 23       	and	r18, r18
    1cda:	21 f7       	brne	.-56     	; 0x1ca4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5resetEv+0x2a>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
                        break;
                }
        }
        return ( i);
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	08 95       	ret

00001cee <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh>:
        return;
}

/* single host register read    */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh+0x6>
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh+0x8>
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	9b 83       	std	Y+3, r25	; 0x03
    1cfc:	8a 83       	std	Y+2, r24	; 0x02
    1cfe:	6c 83       	std	Y+4, r22	; 0x04
        XMEM_ACQUIRE_SPI();
        SPI_SS::Clear();
    1d00:	bd d0       	rcall	.+378    	; 0x1e7c <_ZN4TPinI5PortbLh2EE5ClearEv>
#elif defined(ARDUINO_SAM_DUE) && defined(__SAM3X8E__)
        SPI.transfer(reg);
        uint8_t rv = SPI.transfer(0);
        SPI_SS::Set();
#else
        SPDR = reg;
    1d02:	8e e4       	ldi	r24, 0x4E	; 78
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	2c 81       	ldd	r18, Y+4	; 0x04
    1d08:	fc 01       	movw	r30, r24
    1d0a:	20 83       	st	Z, r18
        while(!(SPSR & (1 << SPIF)));
    1d0c:	8d e4       	ldi	r24, 0x4D	; 77
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	fc 01       	movw	r30, r24
    1d12:	80 81       	ld	r24, Z
    1d14:	80 95       	com	r24
    1d16:	88 1f       	adc	r24, r24
    1d18:	88 27       	eor	r24, r24
    1d1a:	88 1f       	adc	r24, r24
    1d1c:	88 23       	and	r24, r24
    1d1e:	b1 f7       	brne	.-20     	; 0x1d0c <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh+0x1e>
        SPDR = 0; //send empty byte
    1d20:	8e e4       	ldi	r24, 0x4E	; 78
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	fc 01       	movw	r30, r24
    1d26:	10 82       	st	Z, r1
        while(!(SPSR & (1 << SPIF)));
    1d28:	8d e4       	ldi	r24, 0x4D	; 77
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 95       	com	r24
    1d32:	88 1f       	adc	r24, r24
    1d34:	88 27       	eor	r24, r24
    1d36:	88 1f       	adc	r24, r24
    1d38:	88 23       	and	r24, r24
    1d3a:	b1 f7       	brne	.-20     	; 0x1d28 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh+0x3a>
        SPI_SS::Set();
    1d3c:	44 df       	rcall	.-376    	; 0x1bc6 <_ZN4TPinI5PortbLh2EE3SetEv>
        uint8_t rv = SPDR;
    1d3e:	8e e4       	ldi	r24, 0x4E	; 78
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	fc 01       	movw	r30, r24
    1d44:	80 81       	ld	r24, Z
    1d46:	89 83       	std	Y+1, r24	; 0x01
#endif
        XMEM_RELEASE_SPI();
        return (rv);
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x6>
    1d5e:	1f 92       	push	r1
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	9b 83       	std	Y+3, r25	; 0x03
    1d66:	8a 83       	std	Y+2, r24	; 0x02
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6c:	68 ef       	ldi	r22, 0xF8	; 248
    1d6e:	bf df       	rcall	.-130    	; 0x1cee <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh>
    1d70:	89 83       	std	Y+1, r24	; 0x01
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	80 7c       	andi	r24, 0xC0	; 192
    1d76:	89 83       	std	Y+1, r24	; 0x01
        switch(bus_sample) { //start full-speed or low-speed host
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	80 34       	cpi	r24, 0x40	; 64
    1d80:	91 05       	cpc	r25, r1
    1d82:	79 f1       	breq	.+94     	; 0x1de2 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x8a>
    1d84:	81 34       	cpi	r24, 0x41	; 65
    1d86:	91 05       	cpc	r25, r1
    1d88:	24 f4       	brge	.+8      	; 0x1d92 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x3a>
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x38>
    1d8e:	4d c0       	rjmp	.+154    	; 0x1e2a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xd2>
    1d90:	54 c0       	rjmp	.+168    	; 0x1e3a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xe2>
    1d92:	80 38       	cpi	r24, 0x80	; 128
    1d94:	91 05       	cpc	r25, r1
    1d96:	29 f0       	breq	.+10     	; 0x1da2 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x4a>
    1d98:	80 3c       	cpi	r24, 0xC0	; 192
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x48>
    1d9e:	41 c0       	rjmp	.+130    	; 0x1e22 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xca>
    1da0:	4c c0       	rjmp	.+152    	; 0x1e3a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xe2>
                case( bmJSTATUS):
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	9b 81       	ldd	r25, Y+3	; 0x03
    1da6:	68 ed       	ldi	r22, 0xD8	; 216
    1da8:	a2 df       	rcall	.-188    	; 0x1cee <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh>
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	82 70       	andi	r24, 0x02	; 2
    1db0:	99 27       	eor	r25, r25
    1db2:	21 e0       	ldi	r18, 0x01	; 1
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	09 f0       	breq	.+2      	; 0x1dba <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x62>
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	22 23       	and	r18, r18
    1dbc:	49 f0       	breq	.+18     	; 0x1dd0 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0x78>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	49 ec       	ldi	r20, 0xC9	; 201
    1dc4:	68 ed       	ldi	r22, 0xD8	; 216
    1dc6:	26 df       	rcall	.-436    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>
                                vbusState = FSHOST;
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	80 93 b3 03 	sts	0x03B3, r24
                        } else {
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
                                vbusState = LSHOST;
                        }
                        break;
    1dce:	35 c0       	rjmp	.+106    	; 0x1e3a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xe2>
                case( bmJSTATUS):
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
                                vbusState = FSHOST;
                        } else {
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd4:	4b ec       	ldi	r20, 0xCB	; 203
    1dd6:	68 ed       	ldi	r22, 0xD8	; 216
    1dd8:	1d df       	rcall	.-454    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>
                                vbusState = LSHOST;
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	80 93 b3 03 	sts	0x03B3, r24
                        }
                        break;
    1de0:	2c c0       	rjmp	.+88     	; 0x1e3a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xe2>
                case( bmKSTATUS):
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	9b 81       	ldd	r25, Y+3	; 0x03
    1de6:	68 ed       	ldi	r22, 0xD8	; 216
    1de8:	82 df       	rcall	.-252    	; 0x1cee <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh>
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	82 70       	andi	r24, 0x02	; 2
    1df0:	99 27       	eor	r25, r25
    1df2:	21 e0       	ldi	r18, 0x01	; 1
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xa2>
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	22 23       	and	r18, r18
    1dfc:	49 f0       	breq	.+18     	; 0x1e10 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xb8>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	4b ec       	ldi	r20, 0xCB	; 203
    1e04:	68 ed       	ldi	r22, 0xD8	; 216
    1e06:	06 df       	rcall	.-500    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>
                                vbusState = LSHOST;
    1e08:	83 e0       	ldi	r24, 0x03	; 3
    1e0a:	80 93 b3 03 	sts	0x03B3, r24
                        } else {
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
                                vbusState = FSHOST;
                        }
                        break;
    1e0e:	15 c0       	rjmp	.+42     	; 0x1e3a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xe2>
                case( bmKSTATUS):
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
                                vbusState = LSHOST;
                        } else {
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	49 ec       	ldi	r20, 0xC9	; 201
    1e16:	68 ed       	ldi	r22, 0xD8	; 216
    1e18:	fd de       	rcall	.-518    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>
                                vbusState = FSHOST;
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	80 93 b3 03 	sts	0x03B3, r24
                        }
                        break;
    1e20:	0c c0       	rjmp	.+24     	; 0x1e3a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xe2>
                case( bmSE1): //illegal state
                        vbusState = SE1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	80 93 b3 03 	sts	0x03B3, r24
                        break;
    1e28:	08 c0       	rjmp	.+16     	; 0x1e3a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv+0xe2>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	41 ed       	ldi	r20, 0xD1	; 209
    1e30:	68 ed       	ldi	r22, 0xD8	; 216
    1e32:	f0 de       	rcall	.-544    	; 0x1c14 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh>
                        vbusState = SE0;
    1e34:	10 92 b3 03 	sts	0x03B3, r1
                        break;
    1e38:	00 00       	nop
        }//end switch( bus_sample )
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	08 95       	ret

00001e46 <_ZN4TPinI5PortbLh5EE11SetDirWriteEv>:

        static void SetDirWrite() {
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
                PORT::DirSet(1 << PIN);
    1e4e:	80 e2       	ldi	r24, 0x20	; 32
    1e50:	df db       	rcall	.-2114   	; 0x1610 <_ZN5Portb6DirSetEh>
        }
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	08 95       	ret

00001e58 <_ZN4TPinI5PortbLh3EE11SetDirWriteEv>:

        static void SetDirRead() {
                PORT::DirClear(1 << PIN);
        }

        static void SetDirWrite() {
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
                PORT::DirSet(1 << PIN);
    1e60:	88 e0       	ldi	r24, 0x08	; 8
    1e62:	d6 db       	rcall	.-2132   	; 0x1610 <_ZN5Portb6DirSetEh>
        }
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <_ZN4TPinI5PortbLh4EE10SetDirReadEv>:

        static void Toggle() {
                PORT::Toggle(1 << PIN);
        }

        static void SetDirRead() {
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
                PORT::DirClear(1 << PIN);
    1e72:	80 e1       	ldi	r24, 0x10	; 16
    1e74:	e1 db       	rcall	.-2110   	; 0x1638 <_ZN5Portb8DirClearEh>
        }
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	08 95       	ret

00001e7c <_ZN4TPinI5PortbLh2EE5ClearEv>:
                if(val)
                        SetDirWrite();
                else SetDirRead();
        }

        static void Clear() {
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
                PORT::Clear(1 << PIN);
    1e84:	84 e0       	ldi	r24, 0x04	; 4
    1e86:	ae db       	rcall	.-2212   	; 0x15e4 <_ZN5Portb5ClearEh>
        }
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	08 95       	ret

00001e8e <_Z41__static_initialization_and_destruction_0ii>:
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <_Z41__static_initialization_and_destruction_0ii+0xe>
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <_Z41__static_initialization_and_destruction_0ii+0x10>
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	7c 83       	std	Y+4, r23	; 0x04
    1ea8:	6b 83       	std	Y+3, r22	; 0x03
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <_Z41__static_initialization_and_destruction_0ii+0x28>
    1eb4:	6f c0       	rjmp	.+222    	; 0x1f94 <_Z41__static_initialization_and_destruction_0ii+0x106>
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	8f 3f       	cpi	r24, 0xFF	; 255
    1ebc:	2f ef       	ldi	r18, 0xFF	; 255
    1ebe:	92 07       	cpc	r25, r18
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <_Z41__static_initialization_and_destruction_0ii+0x36>
    1ec2:	68 c0       	rjmp	.+208    	; 0x1f94 <_Z41__static_initialization_and_destruction_0ii+0x106>
#include "RunFocusStackHandler.h"
#include "Button.h"


// g_pump dispatches MSG from Button objects to the current IMessageHandler
MessagePump		g_pump(NULL);
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	8a e6       	ldi	r24, 0x6A	; 106
    1eca:	92 e0       	ldi	r25, 0x02	; 2
    1ecc:	c7 d2       	rcall	.+1422   	; 0x245c <_ZN11MessagePumpC1EP15IMessageHandler>
// Default handler displayed on startup, and return from the other
// handlers.
MainMenuHandler	g_main(&g_pump);
    1ece:	6a e6       	ldi	r22, 0x6A	; 106
    1ed0:	72 e0       	ldi	r23, 0x02	; 2
    1ed2:	8c e6       	ldi	r24, 0x6C	; 108
    1ed4:	92 e0       	ldi	r25, 0x02	; 2
    1ed6:	aa d0       	rcall	.+340    	; 0x202c <_ZN15MainMenuHandlerC1EP11MessagePump>
// Handler to setup focus stack parameters
SetupHandler	g_setup(&g_pump, 250, 10);
    1ed8:	1a e0       	ldi	r17, 0x0A	; 10
    1eda:	e1 2e       	mov	r14, r17
    1edc:	f1 2c       	mov	r15, r1
    1ede:	00 e0       	ldi	r16, 0x00	; 0
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
    1ee2:	2a ef       	ldi	r18, 0xFA	; 250
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	6a e6       	ldi	r22, 0x6A	; 106
    1eec:	72 e0       	ldi	r23, 0x02	; 2
    1eee:	8a e7       	ldi	r24, 0x7A	; 122
    1ef0:	92 e0       	ldi	r25, 0x02	; 2
    1ef2:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <_ZN12SetupHandlerC1EP11MessagePumpmm>
// Handler for focus stack execution
RunFocusStackHandler g_runStack(&g_pump);
    1ef6:	6a e6       	ldi	r22, 0x6A	; 106
    1ef8:	72 e0       	ldi	r23, 0x02	; 2
    1efa:	85 e9       	ldi	r24, 0x95	; 149
    1efc:	92 e0       	ldi	r25, 0x02	; 2
    1efe:	0e 94 33 1c 	call	0x3866	; 0x3866 <_ZN20RunFocusStackHandlerC1EP11MessagePump>
SetupHandler            *g_pSetup	 = &g_setup;
RunFocusStackHandler    *g_pRunStack = &g_runStack;
MessagePump             *g_pPump     = &g_pump;

// USB/Ptp objects
USB                 Usb;
    1f02:	87 ea       	ldi	r24, 0xA7	; 167
    1f04:	92 e0       	ldi	r25, 0x02	; 2
    1f06:	0e 94 57 35 	call	0x6aae	; 0x6aae <_ZN3USBC1Ev>
//USBHub              Hub1(&Usb);
NikType003StateHandler nk3State;
    1f0a:	8e e1       	ldi	r24, 0x1E	; 30
    1f0c:	93 e0       	ldi	r25, 0x03	; 3
    1f0e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN22NikType003StateHandlerC1Ev>
NikType003  nk3(&Usb, &nk3State);
    1f12:	4e e1       	ldi	r20, 0x1E	; 30
    1f14:	53 e0       	ldi	r21, 0x03	; 3
    1f16:	67 ea       	ldi	r22, 0xA7	; 167
    1f18:	72 e0       	ldi	r23, 0x02	; 2
    1f1a:	81 e2       	ldi	r24, 0x21	; 33
    1f1c:	93 e0       	ldi	r25, 0x03	; 3
    1f1e:	be d4       	rcall	.+2428   	; 0x289c <_ZN10NikType003C1EP3USBP16PTPStateHandlers>

// The shield uses the I2C SCL and SDA pins. On classic Arduinos
// this is Analog 4 and 5 so you can't use those for analogRead() anymore
// However, you can connect other I2C sensors to the I2C bus and share
// the I2C bus.
Adafruit_RGBLCDShield lcd = Adafruit_RGBLCDShield();
    1f20:	87 e5       	ldi	r24, 0x57	; 87
    1f22:	93 e0       	ldi	r25, 0x03	; 3
    1f24:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN21Adafruit_RGBLCDShieldC1Ev>
Adafruit_RGBLCDShield *g_print = &lcd;
ReadAdaFruitLcdButtonState buttonStateReader (g_print);
    1f28:	80 91 0a 01 	lds	r24, 0x010A
    1f2c:	90 91 0b 01 	lds	r25, 0x010B
    1f30:	bc 01       	movw	r22, r24
    1f32:	83 e7       	ldi	r24, 0x73	; 115
    1f34:	93 e0       	ldi	r25, 0x03	; 3
    1f36:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN26ReadAdaFruitLcdButtonStateC1EP21Adafruit_RGBLCDShield>

// Buttons also implemented using the Adafruit LCD shield kit.
Button buttonLeft(&buttonStateReader, BUTTON_LEFT, eLeft, HIGH);
    1f3a:	01 e0       	ldi	r16, 0x01	; 1
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	40 e1       	ldi	r20, 0x10	; 16
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	63 e7       	ldi	r22, 0x73	; 115
    1f44:	73 e0       	ldi	r23, 0x03	; 3
    1f46:	87 e7       	ldi	r24, 0x77	; 119
    1f48:	93 e0       	ldi	r25, 0x03	; 3
    1f4a:	67 da       	rcall	.-2866   	; 0x141a <_ZN6ButtonC1EP15ReadButtonStatei7MsgCodeb>
Button buttonRight(&buttonStateReader, BUTTON_RIGHT, eRight, HIGH);
    1f4c:	01 e0       	ldi	r16, 0x01	; 1
    1f4e:	21 e0       	ldi	r18, 0x01	; 1
    1f50:	42 e0       	ldi	r20, 0x02	; 2
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	63 e7       	ldi	r22, 0x73	; 115
    1f56:	73 e0       	ldi	r23, 0x03	; 3
    1f58:	83 e8       	ldi	r24, 0x83	; 131
    1f5a:	93 e0       	ldi	r25, 0x03	; 3
    1f5c:	5e da       	rcall	.-2884   	; 0x141a <_ZN6ButtonC1EP15ReadButtonStatei7MsgCodeb>
Button buttonUp(&buttonStateReader, BUTTON_UP, eUp, HIGH);
    1f5e:	01 e0       	ldi	r16, 0x01	; 1
    1f60:	22 e0       	ldi	r18, 0x02	; 2
    1f62:	48 e0       	ldi	r20, 0x08	; 8
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	63 e7       	ldi	r22, 0x73	; 115
    1f68:	73 e0       	ldi	r23, 0x03	; 3
    1f6a:	8f e8       	ldi	r24, 0x8F	; 143
    1f6c:	93 e0       	ldi	r25, 0x03	; 3
    1f6e:	55 da       	rcall	.-2902   	; 0x141a <_ZN6ButtonC1EP15ReadButtonStatei7MsgCodeb>
Button buttonDown(&buttonStateReader, BUTTON_DOWN, eDown, HIGH);
    1f70:	01 e0       	ldi	r16, 0x01	; 1
    1f72:	23 e0       	ldi	r18, 0x03	; 3
    1f74:	44 e0       	ldi	r20, 0x04	; 4
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	63 e7       	ldi	r22, 0x73	; 115
    1f7a:	73 e0       	ldi	r23, 0x03	; 3
    1f7c:	8b e9       	ldi	r24, 0x9B	; 155
    1f7e:	93 e0       	ldi	r25, 0x03	; 3
    1f80:	4c da       	rcall	.-2920   	; 0x141a <_ZN6ButtonC1EP15ReadButtonStatei7MsgCodeb>
Button buttonSelect(&buttonStateReader, BUTTON_SELECT, eSelect, HIGH);
    1f82:	01 e0       	ldi	r16, 0x01	; 1
    1f84:	24 e0       	ldi	r18, 0x04	; 4
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	63 e7       	ldi	r22, 0x73	; 115
    1f8c:	73 e0       	ldi	r23, 0x03	; 3
    1f8e:	87 ea       	ldi	r24, 0xA7	; 167
    1f90:	93 e0       	ldi	r25, 0x03	; 3
    1f92:	43 da       	rcall	.-2938   	; 0x141a <_ZN6ButtonC1EP15ReadButtonStatei7MsgCodeb>
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	a9 f4       	brne	.+42     	; 0x1fc6 <_Z41__static_initialization_and_destruction_0ii+0x138>
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fa2:	2f ef       	ldi	r18, 0xFF	; 255
    1fa4:	92 07       	cpc	r25, r18
    1fa6:	79 f4       	brne	.+30     	; 0x1fc6 <_Z41__static_initialization_and_destruction_0ii+0x138>
// this is Analog 4 and 5 so you can't use those for analogRead() anymore
// However, you can connect other I2C sensors to the I2C bus and share
// the I2C bus.
Adafruit_RGBLCDShield lcd = Adafruit_RGBLCDShield();
Adafruit_RGBLCDShield *g_print = &lcd;
ReadAdaFruitLcdButtonState buttonStateReader (g_print);
    1fa8:	83 e7       	ldi	r24, 0x73	; 115
    1faa:	93 e0       	ldi	r25, 0x03	; 3
    1fac:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <_ZN26ReadAdaFruitLcdButtonStateD1Ev>
// handlers.
MainMenuHandler	g_main(&g_pump);
// Handler to setup focus stack parameters
SetupHandler	g_setup(&g_pump, 250, 10);
// Handler for focus stack execution
RunFocusStackHandler g_runStack(&g_pump);
    1fb0:	85 e9       	ldi	r24, 0x95	; 149
    1fb2:	92 e0       	ldi	r25, 0x02	; 2
    1fb4:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN20RunFocusStackHandlerD1Ev>
MessagePump		g_pump(NULL);
// Default handler displayed on startup, and return from the other
// handlers.
MainMenuHandler	g_main(&g_pump);
// Handler to setup focus stack parameters
SetupHandler	g_setup(&g_pump, 250, 10);
    1fb8:	8a e7       	ldi	r24, 0x7A	; 122
    1fba:	92 e0       	ldi	r25, 0x02	; 2
    1fbc:	0e 94 65 1e 	call	0x3cca	; 0x3cca <_ZN12SetupHandlerD1Ev>

// g_pump dispatches MSG from Button objects to the current IMessageHandler
MessagePump		g_pump(NULL);
// Default handler displayed on startup, and return from the other
// handlers.
MainMenuHandler	g_main(&g_pump);
    1fc0:	8c e6       	ldi	r24, 0x6C	; 108
    1fc2:	92 e0       	ldi	r25, 0x02	; 2
    1fc4:	5f d0       	rcall	.+190    	; 0x2084 <_ZN15MainMenuHandlerD1Ev>
				// Flash recharging: put up a countdown timer once a second.
				g_pRunStack->reportDelay((g_pSetup->getFrameDelayMilliseconds() - now + nk3.getTimeLastCaptureStart())  / 1000 + 1);
			}
		}
	}
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	08 95       	ret

00001fdc <_GLOBAL__sub_I_g_pump>:
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	6f ef       	ldi	r22, 0xFF	; 255
    1fe6:	7f ef       	ldi	r23, 0xFF	; 255
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	50 df       	rcall	.-352    	; 0x1e8e <_Z41__static_initialization_and_destruction_0ii>
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	08 95       	ret

00001ff4 <_GLOBAL__sub_D_g_pump>:
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	6f ef       	ldi	r22, 0xFF	; 255
    1ffe:	7f ef       	ldi	r23, 0xFF	; 255
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	44 df       	rcall	.-376    	; 0x1e8e <_Z41__static_initialization_and_destruction_0ii>
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	08 95       	ret

0000200c <_ZNK15IMessageHandler11getCaretColEv>:
    //void moveCaret(eCaretMoveDir);
	void moveCaret(uint8_t col, uint8_t row);
    // Hides or shows the caret
    void showCaret(bool);
    // Returns the current col location.
    unsigned char getCaretCol() const { return m_caretCol;}
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	00 d0       	rcall	.+0      	; 0x2012 <_ZNK15IMessageHandler11getCaretColEv+0x6>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	9a 81       	ldd	r25, Y+2	; 0x02
    201e:	fc 01       	movw	r30, r24
    2020:	84 85       	ldd	r24, Z+12	; 0x0c
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	08 95       	ret

0000202c <_ZN15MainMenuHandlerC1EP11MessagePump>:
#define SetupMenuPos 0
#define RunMenuPos 8

// Main menu ctor. Sets up the text strings
// to display.
MainMenuHandler::MainMenuHandler(MessagePump *_pump)
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	00 d0       	rcall	.+0      	; 0x2032 <_ZN15MainMenuHandlerC1EP11MessagePump+0x6>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <_ZN15MainMenuHandlerC1EP11MessagePump+0x8>
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	7c 83       	std	Y+4, r23	; 0x04
    203e:	6b 83       	std	Y+3, r22	; 0x03
    :
    IMessageHandler(_pump)
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	2b 81       	ldd	r18, Y+3	; 0x03
    2046:	3c 81       	ldd	r19, Y+4	; 0x04
    2048:	b9 01       	movw	r22, r18
    204a:	d2 d0       	rcall	.+420    	; 0x21f0 <_ZN15IMessageHandlerC1EP11MessagePump>
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	2e e8       	ldi	r18, 0x8E	; 142
    2052:	31 e0       	ldi	r19, 0x01	; 1
    2054:	fc 01       	movw	r30, r24
    2056:	31 83       	std	Z+1, r19	; 0x01
    2058:	20 83       	st	Z, r18
{
    menu[0] = "Setup";
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	25 e3       	ldi	r18, 0x35	; 53
    2060:	31 e0       	ldi	r19, 0x01	; 1
    2062:	fc 01       	movw	r30, r24
    2064:	35 83       	std	Z+5, r19	; 0x05
    2066:	24 83       	std	Z+4, r18	; 0x04
    menu[1] = "Run";
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	2b e3       	ldi	r18, 0x3B	; 59
    206e:	31 e0       	ldi	r19, 0x01	; 1
    2070:	fc 01       	movw	r30, r24
    2072:	37 83       	std	Z+7, r19	; 0x07
    2074:	26 83       	std	Z+6, r18	; 0x06
};
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <_ZN15MainMenuHandlerD1Ev>:
MainMenuHandler::~MainMenuHandler()
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	00 d0       	rcall	.+0      	; 0x208a <_ZN15MainMenuHandlerD1Ev+0x6>
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	2e e8       	ldi	r18, 0x8E	; 142
    2098:	31 e0       	ldi	r19, 0x01	; 1
    209a:	fc 01       	movw	r30, r24
    209c:	31 83       	std	Z+1, r19	; 0x01
    209e:	20 83       	st	Z, r18
{}
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	08 95       	ret

000020aa <_ZN15MainMenuHandler14processMessageER3Msg>:

// Listens for button press Msgs dispatched from loop().
MsgResp MainMenuHandler::processMessage(Msg& msg)
{
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <_ZN15MainMenuHandler14processMessageER3Msg+0x6>
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <_ZN15MainMenuHandler14processMessageER3Msg+0x8>
    20b2:	1f 92       	push	r1
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	9b 83       	std	Y+3, r25	; 0x03
    20ba:	8a 83       	std	Y+2, r24	; 0x02
    20bc:	7d 83       	std	Y+5, r23	; 0x05
    20be:	6c 83       	std	Y+4, r22	; 0x04
    MsgResp rsp = eFail;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	89 83       	std	Y+1, r24	; 0x01
    if(eButtonActionPress == msg.m_type)
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	9d 81       	ldd	r25, Y+5	; 0x05
    20c8:	fc 01       	movw	r30, r24
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <_ZN15MainMenuHandler14processMessageER3Msg+0x2a>
    20d2:	6f c0       	rjmp	.+222    	; 0x21b2 <_ZN15MainMenuHandler14processMessageER3Msg+0x108>
    {
        // up and down buttons move the caret.
        // select button invokes Setup or runStack
        // handling.
        switch(msg.m_code)
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	9d 81       	ldd	r25, Y+5	; 0x05
    20d8:	fc 01       	movw	r30, r24
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	82 30       	cpi	r24, 0x02	; 2
    20e2:	91 05       	cpc	r25, r1
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <_ZN15MainMenuHandler14processMessageER3Msg+0x3e>
    20e6:	62 c0       	rjmp	.+196    	; 0x21ac <_ZN15MainMenuHandler14processMessageER3Msg+0x102>
    20e8:	83 30       	cpi	r24, 0x03	; 3
    20ea:	91 05       	cpc	r25, r1
    20ec:	34 f4       	brge	.+12     	; 0x20fa <_ZN15MainMenuHandler14processMessageER3Msg+0x50>
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	61 f0       	breq	.+24     	; 0x210a <_ZN15MainMenuHandler14processMessageER3Msg+0x60>
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	91 05       	cpc	r25, r1
    20f6:	09 f1       	breq	.+66     	; 0x213a <_ZN15MainMenuHandler14processMessageER3Msg+0x90>
                }
                break;
            }
			case eUp:     { break; }
			case eDown:    { break; }
            default : { break; }
    20f8:	5c c0       	rjmp	.+184    	; 0x21b2 <_ZN15MainMenuHandler14processMessageER3Msg+0x108>
    if(eButtonActionPress == msg.m_type)
    {
        // up and down buttons move the caret.
        // select button invokes Setup or runStack
        // handling.
        switch(msg.m_code)
    20fa:	83 30       	cpi	r24, 0x03	; 3
    20fc:	91 05       	cpc	r25, r1
    20fe:	09 f4       	brne	.+2      	; 0x2102 <_ZN15MainMenuHandler14processMessageER3Msg+0x58>
    2100:	57 c0       	rjmp	.+174    	; 0x21b0 <_ZN15MainMenuHandler14processMessageER3Msg+0x106>
    2102:	84 30       	cpi	r24, 0x04	; 4
    2104:	91 05       	cpc	r25, r1
    2106:	29 f1       	breq	.+74     	; 0x2152 <_ZN15MainMenuHandler14processMessageER3Msg+0xa8>
                }
                break;
            }
			case eUp:     { break; }
			case eDown:    { break; }
            default : { break; }
    2108:	54 c0       	rjmp	.+168    	; 0x21b2 <_ZN15MainMenuHandler14processMessageER3Msg+0x108>
        // handling.
        switch(msg.m_code)
        {
            case eLeft:     
			{ 
				switch(getCaretCol())
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	7e df       	rcall	.-260    	; 0x200c <_ZNK15IMessageHandler11getCaretColEv>
    2110:	88 2f       	mov	r24, r24
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	21 f0       	breq	.+8      	; 0x2120 <_ZN15MainMenuHandler14processMessageER3Msg+0x76>
    2118:	88 30       	cpi	r24, 0x08	; 8
    211a:	91 05       	cpc	r25, r1
    211c:	39 f0       	breq	.+14     	; 0x212c <_ZN15MainMenuHandler14processMessageER3Msg+0x82>
				{
					case SetupMenuPos: moveCaret(RunMenuPos, 1); break;
					case RunMenuPos:   moveCaret(SetupMenuPos, 1); break;
					default: break;
    211e:	0c c0       	rjmp	.+24     	; 0x2138 <_ZN15MainMenuHandler14processMessageER3Msg+0x8e>
        {
            case eLeft:     
			{ 
				switch(getCaretCol())
				{
					case SetupMenuPos: moveCaret(RunMenuPos, 1); break;
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	9b 81       	ldd	r25, Y+3	; 0x03
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	68 e0       	ldi	r22, 0x08	; 8
    2128:	76 d1       	rcall	.+748    	; 0x2416 <_ZN15IMessageHandler9moveCaretEhh>
    212a:	06 c0       	rjmp	.+12     	; 0x2138 <_ZN15MainMenuHandler14processMessageER3Msg+0x8e>
					case RunMenuPos:   moveCaret(SetupMenuPos, 1); break;
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	70 d1       	rcall	.+736    	; 0x2416 <_ZN15IMessageHandler9moveCaretEhh>
    2136:	00 00       	nop
					default: break;
				}
				break;
    2138:	3c c0       	rjmp	.+120    	; 0x21b2 <_ZN15MainMenuHandler14processMessageER3Msg+0x108>
			}
            case eRight:
			{
				if(nk3.isConnected()) 
    213a:	81 e2       	ldi	r24, 0x21	; 33
    213c:	93 e0       	ldi	r25, 0x03	; 3
    213e:	0e 94 4f 1a 	call	0x349e	; 0x349e <_ZNK10NikType00311isConnectedEv>
    2142:	88 23       	and	r24, r24
    2144:	29 f0       	breq	.+10     	; 0x2150 <_ZN15MainMenuHandler14processMessageER3Msg+0xa6>
				{
					moveCaret(RunMenuPos, 1);
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	9b 81       	ldd	r25, Y+3	; 0x03
    214a:	41 e0       	ldi	r20, 0x01	; 1
    214c:	68 e0       	ldi	r22, 0x08	; 8
    214e:	63 d1       	rcall	.+710    	; 0x2416 <_ZN15IMessageHandler9moveCaretEhh>
				}
				break;
    2150:	30 c0       	rjmp	.+96     	; 0x21b2 <_ZN15MainMenuHandler14processMessageER3Msg+0x108>

			}
            case eSelect:
            {
                switch(m_caretCol)
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	fc 01       	movw	r30, r24
    2158:	84 85       	ldd	r24, Z+12	; 0x0c
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	83 30       	cpi	r24, 0x03	; 3
    2160:	91 05       	cpc	r25, r1
    2162:	11 f1       	breq	.+68     	; 0x21a8 <_ZN15MainMenuHandler14processMessageER3Msg+0xfe>
    2164:	88 30       	cpi	r24, 0x08	; 8
    2166:	91 05       	cpc	r25, r1
    2168:	71 f0       	breq	.+28     	; 0x2186 <_ZN15MainMenuHandler14processMessageER3Msg+0xdc>
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	09 f0       	breq	.+2      	; 0x2170 <_ZN15MainMenuHandler14processMessageER3Msg+0xc6>
                        // TODO: turn display off/on
                        // how far to sleep can we go
                        // and still wake?
                        break;
                    }
                    default: { break; }
    216e:	1d c0       	rjmp	.+58     	; 0x21aa <_ZN15MainMenuHandler14processMessageER3Msg+0x100>
            {
                switch(m_caretCol)
                {
                    case 0:
                    {
                        msg.m_nextHandler = g_pSetup;
    2170:	20 91 02 01 	lds	r18, 0x0102
    2174:	30 91 03 01 	lds	r19, 0x0103
    2178:	8c 81       	ldd	r24, Y+4	; 0x04
    217a:	9d 81       	ldd	r25, Y+5	; 0x05
    217c:	fc 01       	movw	r30, r24
    217e:	34 83       	std	Z+4, r19	; 0x04
    2180:	23 83       	std	Z+3, r18	; 0x03
                        rsp = eSuccess;
    2182:	19 82       	std	Y+1, r1	; 0x01
                        break;
    2184:	12 c0       	rjmp	.+36     	; 0x21aa <_ZN15MainMenuHandler14processMessageER3Msg+0x100>
                    }
                    case 8:
                    {
                        if(nk3.isConnected())
    2186:	81 e2       	ldi	r24, 0x21	; 33
    2188:	93 e0       	ldi	r25, 0x03	; 3
    218a:	0e 94 4f 1a 	call	0x349e	; 0x349e <_ZNK10NikType00311isConnectedEv>
    218e:	88 23       	and	r24, r24
    2190:	51 f0       	breq	.+20     	; 0x21a6 <_ZN15MainMenuHandler14processMessageER3Msg+0xfc>
                        {
                            msg.m_nextHandler = g_pRunStack;
    2192:	20 91 04 01 	lds	r18, 0x0104
    2196:	30 91 05 01 	lds	r19, 0x0105
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	9d 81       	ldd	r25, Y+5	; 0x05
    219e:	fc 01       	movw	r30, r24
    21a0:	34 83       	std	Z+4, r19	; 0x04
    21a2:	23 83       	std	Z+3, r18	; 0x03
                            rsp = eSuccess;
    21a4:	19 82       	std	Y+1, r1	; 0x01
                        }
                        break;
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <_ZN15MainMenuHandler14processMessageER3Msg+0x100>
                    {
                        // on/off?
                        // TODO: turn display off/on
                        // how far to sleep can we go
                        // and still wake?
                        break;
    21a8:	00 00       	nop
                    }
                    default: { break; }
                }
                break;
    21aa:	03 c0       	rjmp	.+6      	; 0x21b2 <_ZN15MainMenuHandler14processMessageER3Msg+0x108>
            }
			case eUp:     { break; }
    21ac:	00 00       	nop
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <_ZN15MainMenuHandler14processMessageER3Msg+0x108>
			case eDown:    { break; }
    21b0:	00 00       	nop
            default : { break; }
        }
    }
    return rsp;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	08 95       	ret

000021c4 <_ZN15MainMenuHandler4showEv>:
// Show the main menu, the camera type & connection state.
extern bool g_usbOK;
void MainMenuHandler::show()
{
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <_ZN15MainMenuHandler4showEv+0x6>
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	9a 83       	std	Y+2, r25	; 0x02
    21d0:	89 83       	std	Y+1, r24	; 0x01
	if(!g_usbOK) return;
    21d2:	90 91 09 01 	lds	r25, 0x0109
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 27       	eor	r24, r25
    21da:	88 23       	and	r24, r24
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <_ZN15MainMenuHandler4showEv+0x1c>
    21de:	03 c0       	rjmp	.+6      	; 0x21e6 <_ZN15MainMenuHandler4showEv+0x22>
    IMessageHandler::show();
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	63 d0       	rcall	.+198    	; 0x22ac <_ZN15IMessageHandler4showEv>
            //g_print->print(F("Nikon "));
            //break;
        //}
    //}
    //g_print->print(nk3.isConnected() ? F("connected") : F("disconnected"));
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	08 95       	ret

000021f0 <_ZN15IMessageHandlerC1EP11MessagePump>:
#include "MessagePump.h"
#include "MessageHandler.h"
#include "LcdImpl.h"

// Base class ctor just initializes OK on bottom line of menu[].
IMessageHandler::IMessageHandler(MessagePump* _pump)
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <_ZN15IMessageHandlerC1EP11MessagePump+0x6>
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <_ZN15IMessageHandlerC1EP11MessagePump+0x8>
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	9a 83       	std	Y+2, r25	; 0x02
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	7c 83       	std	Y+4, r23	; 0x04
    2202:	6b 83       	std	Y+3, r22	; 0x03
    :
    m_pump(_pump),
    m_caretCol(0),
	m_caretRow(1)
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	26 e9       	ldi	r18, 0x96	; 150
    220a:	31 e0       	ldi	r19, 0x01	; 1
    220c:	fc 01       	movw	r30, r24
    220e:	31 83       	std	Z+1, r19	; 0x01
    2210:	20 83       	st	Z, r18
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	2b 81       	ldd	r18, Y+3	; 0x03
    2218:	3c 81       	ldd	r19, Y+4	; 0x04
    221a:	fc 01       	movw	r30, r24
    221c:	33 83       	std	Z+3, r19	; 0x03
    221e:	22 83       	std	Z+2, r18	; 0x02
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	fc 01       	movw	r30, r24
    2226:	14 86       	std	Z+12, r1	; 0x0c
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	9a 81       	ldd	r25, Y+2	; 0x02
    222c:	21 e0       	ldi	r18, 0x01	; 1
    222e:	fc 01       	movw	r30, r24
    2230:	25 87       	std	Z+13, r18	; 0x0d
{
    //for(unsigned int line = 0; line < sizeof(menu) / sizeof(menu[0]); line++) menu[line] = NULL;
	memset(menu, 0, sizeof(menu)); // 33076
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	04 96       	adiw	r24, 0x04	; 4
    2238:	48 e0       	ldi	r20, 0x08	; 8
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	0e 94 27 3f 	call	0x7e4e	; 0x7e4e <memset>
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	08 95       	ret

00002252 <_ZN15IMessageHandler13printMenuItemEhh>:

void IMessageHandler::printMenuItem(uint8_t col, uint8_t item)
{
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	00 d0       	rcall	.+0      	; 0x2258 <_ZN15IMessageHandler13printMenuItemEhh+0x6>
    2258:	00 d0       	rcall	.+0      	; 0x225a <_ZN15IMessageHandler13printMenuItemEhh+0x8>
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	6b 83       	std	Y+3, r22	; 0x03
    2264:	4c 83       	std	Y+4, r20	; 0x04
	g_print->setCursor(col, 0);
    2266:	80 91 0a 01 	lds	r24, 0x010A
    226a:	90 91 0b 01 	lds	r25, 0x010B
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	6b 81       	ldd	r22, Y+3	; 0x03
    2272:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	g_print->print(menu[item]);
    2276:	8c 81       	ldd	r24, Y+4	; 0x04
    2278:	88 2f       	mov	r24, r24
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	29 81       	ldd	r18, Y+1	; 0x01
    227e:	3a 81       	ldd	r19, Y+2	; 0x02
    2280:	02 96       	adiw	r24, 0x02	; 2
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	82 0f       	add	r24, r18
    2288:	93 1f       	adc	r25, r19
    228a:	fc 01       	movw	r30, r24
    228c:	20 81       	ld	r18, Z
    228e:	31 81       	ldd	r19, Z+1	; 0x01
    2290:	80 91 0a 01 	lds	r24, 0x010A
    2294:	90 91 0b 01 	lds	r25, 0x010B
    2298:	b9 01       	movw	r22, r18
    229a:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN5Print5printEPKc>
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <_ZN15IMessageHandler4showEv>:
// Draws the menu text, indenting all lines but
// the 1st by one column
void IMessageHandler::show()
{
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <_ZN15IMessageHandler4showEv+0x6>
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01
    g_print->clear();
    22ba:	80 91 0a 01 	lds	r24, 0x010A
    22be:	90 91 0b 01 	lds	r25, 0x010B
    22c2:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN21Adafruit_RGBLCDShield5clearEv>
	
	if(menu[0])
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	fc 01       	movw	r30, r24
    22cc:	84 81       	ldd	r24, Z+4	; 0x04
    22ce:	95 81       	ldd	r25, Z+5	; 0x05
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	a1 f0       	breq	.+40     	; 0x22fc <_ZN15IMessageHandler4showEv+0x50>
	{
		g_print->setCursor(0, 0);
    22d4:	80 91 0a 01 	lds	r24, 0x010A
    22d8:	90 91 0b 01 	lds	r25, 0x010B
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
		g_print->print(menu[0]);
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	9a 81       	ldd	r25, Y+2	; 0x02
    22e8:	fc 01       	movw	r30, r24
    22ea:	24 81       	ldd	r18, Z+4	; 0x04
    22ec:	35 81       	ldd	r19, Z+5	; 0x05
    22ee:	80 91 0a 01 	lds	r24, 0x010A
    22f2:	90 91 0b 01 	lds	r25, 0x010B
    22f6:	b9 01       	movw	r22, r18
    22f8:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN5Print5printEPKc>
	}
	if(menu[1])
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	fc 01       	movw	r30, r24
    2302:	86 81       	ldd	r24, Z+6	; 0x06
    2304:	97 81       	ldd	r25, Z+7	; 0x07
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	a1 f0       	breq	.+40     	; 0x2332 <_ZN15IMessageHandler4showEv+0x86>
	{
		g_print->setCursor(8, 0);
    230a:	80 91 0a 01 	lds	r24, 0x010A
    230e:	90 91 0b 01 	lds	r25, 0x010B
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	68 e0       	ldi	r22, 0x08	; 8
    2316:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
		g_print->print(menu[1]);
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	fc 01       	movw	r30, r24
    2320:	26 81       	ldd	r18, Z+6	; 0x06
    2322:	37 81       	ldd	r19, Z+7	; 0x07
    2324:	80 91 0a 01 	lds	r24, 0x010A
    2328:	90 91 0b 01 	lds	r25, 0x010B
    232c:	b9 01       	movw	r22, r18
    232e:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN5Print5printEPKc>
	}
	if(menu[2])
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	fc 01       	movw	r30, r24
    2338:	80 85       	ldd	r24, Z+8	; 0x08
    233a:	91 85       	ldd	r25, Z+9	; 0x09
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	a1 f0       	breq	.+40     	; 0x2368 <_ZN15IMessageHandler4showEv+0xbc>
	{
		g_print->setCursor(0, 1);
    2340:	80 91 0a 01 	lds	r24, 0x010A
    2344:	90 91 0b 01 	lds	r25, 0x010B
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
		g_print->print(menu[2]);
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	fc 01       	movw	r30, r24
    2356:	20 85       	ldd	r18, Z+8	; 0x08
    2358:	31 85       	ldd	r19, Z+9	; 0x09
    235a:	80 91 0a 01 	lds	r24, 0x010A
    235e:	90 91 0b 01 	lds	r25, 0x010B
    2362:	b9 01       	movw	r22, r18
    2364:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN5Print5printEPKc>
	}
	if(menu[3])
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	fc 01       	movw	r30, r24
    236e:	82 85       	ldd	r24, Z+10	; 0x0a
    2370:	93 85       	ldd	r25, Z+11	; 0x0b
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	a1 f0       	breq	.+40     	; 0x239e <_ZN15IMessageHandler4showEv+0xf2>
	{
		g_print->setCursor(8, 1);
    2376:	80 91 0a 01 	lds	r24, 0x010A
    237a:	90 91 0b 01 	lds	r25, 0x010B
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	68 e0       	ldi	r22, 0x08	; 8
    2382:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
		g_print->print(menu[2]);
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	fc 01       	movw	r30, r24
    238c:	20 85       	ldd	r18, Z+8	; 0x08
    238e:	31 85       	ldd	r19, Z+9	; 0x09
    2390:	80 91 0a 01 	lds	r24, 0x010A
    2394:	90 91 0b 01 	lds	r25, 0x010B
    2398:	b9 01       	movw	r22, r18
    239a:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN5Print5printEPKc>
	}
	m_caretCol = 0;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	fc 01       	movw	r30, r24
    23a4:	14 86       	std	Z+12, r1	; 0x0c
    showCaret(true);
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	61 e0       	ldi	r22, 0x01	; 1
    23ac:	05 d0       	rcall	.+10     	; 0x23b8 <_ZN15IMessageHandler9showCaretEb>
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <_ZN15IMessageHandler9showCaretEb>:

// Draws or hides the caret.
void IMessageHandler::showCaret(bool show)
{
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	00 d0       	rcall	.+0      	; 0x23be <_ZN15IMessageHandler9showCaretEb+0x6>
    23be:	1f 92       	push	r1
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	6b 83       	std	Y+3, r22	; 0x03
    g_print->setCursor(m_caretCol, m_caretRow);
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	fc 01       	movw	r30, r24
    23d0:	35 85       	ldd	r19, Z+13	; 0x0d
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	fc 01       	movw	r30, r24
    23d8:	24 85       	ldd	r18, Z+12	; 0x0c
    23da:	80 91 0a 01 	lds	r24, 0x010A
    23de:	90 91 0b 01 	lds	r25, 0x010B
    23e2:	43 2f       	mov	r20, r19
    23e4:	62 2f       	mov	r22, r18
    23e6:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
    if(show)
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	88 23       	and	r24, r24
    23ee:	39 f0       	breq	.+14     	; 0x23fe <_ZN15IMessageHandler9showCaretEb+0x46>
    {
       // g_print->print(F(">"));
	   g_print->cursor();
    23f0:	80 91 0a 01 	lds	r24, 0x010A
    23f4:	90 91 0b 01 	lds	r25, 0x010B
    23f8:	0e 94 18 07 	call	0xe30	; 0xe30 <_ZN21Adafruit_RGBLCDShield6cursorEv>
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <_ZN15IMessageHandler9showCaretEb+0x52>
    }
    else
    {
		g_print->noCursor();
    23fe:	80 91 0a 01 	lds	r24, 0x010A
    2402:	90 91 0b 01 	lds	r25, 0x010B
    2406:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN21Adafruit_RGBLCDShield8noCursorEv>
        //g_print->print(F(" "));
    }
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	08 95       	ret

00002416 <_ZN15IMessageHandler9moveCaretEhh>:

// Redraws the caret at the specified location
void IMessageHandler::moveCaret(uint8_t col, uint8_t row)
{
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	00 d0       	rcall	.+0      	; 0x241c <_ZN15IMessageHandler9moveCaretEhh+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <_ZN15IMessageHandler9moveCaretEhh+0x8>
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	6b 83       	std	Y+3, r22	; 0x03
    2428:	4c 83       	std	Y+4, r20	; 0x04
	showCaret(false);
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	c3 df       	rcall	.-122    	; 0x23b8 <_ZN15IMessageHandler9showCaretEb>
	m_caretCol  = col;	
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	2b 81       	ldd	r18, Y+3	; 0x03
    2438:	fc 01       	movw	r30, r24
    243a:	24 87       	std	Z+12, r18	; 0x0c
	m_caretRow = row;
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	2c 81       	ldd	r18, Y+4	; 0x04
    2442:	fc 01       	movw	r30, r24
    2444:	25 87       	std	Z+13, r18	; 0x0d
	showCaret(true);
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	61 e0       	ldi	r22, 0x01	; 1
    244c:	b5 df       	rcall	.-150    	; 0x23b8 <_ZN15IMessageHandler9showCaretEb>
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	08 95       	ret

0000245c <_ZN11MessagePumpC1EP15IMessageHandler>:

#include "MessagePump.h"
#include "MessageHandler.h"

// Construct with a handler, or NULL.
MessagePump::MessagePump(IMessageHandler *handler)
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	00 d0       	rcall	.+0      	; 0x2462 <_ZN11MessagePumpC1EP15IMessageHandler+0x6>
    2462:	00 d0       	rcall	.+0      	; 0x2464 <_ZN11MessagePumpC1EP15IMessageHandler+0x8>
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	7c 83       	std	Y+4, r23	; 0x04
    246e:	6b 83       	std	Y+3, r22	; 0x03
    :
    m_currentHandler(handler)
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	2b 81       	ldd	r18, Y+3	; 0x03
    2476:	3c 81       	ldd	r19, Y+4	; 0x04
    2478:	fc 01       	movw	r30, r24
    247a:	31 83       	std	Z+1, r19	; 0x01
    247c:	20 83       	st	Z, r18
{}
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	08 95       	ret

0000248c <_ZN11MessagePump14setNextHandlerEP15IMessageHandler>:

// Shows next IMessageHandler to the user, and makes
// it the handler of subsequent Msgs.
void MessagePump::setNextHandler(IMessageHandler *next)
{
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	00 d0       	rcall	.+0      	; 0x2492 <_ZN11MessagePump14setNextHandlerEP15IMessageHandler+0x6>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <_ZN11MessagePump14setNextHandlerEP15IMessageHandler+0x8>
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	7c 83       	std	Y+4, r23	; 0x04
    249e:	6b 83       	std	Y+3, r22	; 0x03
    m_currentHandler = next;
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	2b 81       	ldd	r18, Y+3	; 0x03
    24a6:	3c 81       	ldd	r19, Y+4	; 0x04
    24a8:	fc 01       	movw	r30, r24
    24aa:	31 83       	std	Z+1, r19	; 0x01
    24ac:	20 83       	st	Z, r18
    m_currentHandler->show();
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	9a 81       	ldd	r25, Y+2	; 0x02
    24b2:	fc 01       	movw	r30, r24
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	fc 01       	movw	r30, r24
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	02 96       	adiw	r24, 0x02	; 2
    24c0:	fc 01       	movw	r30, r24
    24c2:	20 81       	ld	r18, Z
    24c4:	31 81       	ldd	r19, Z+1	; 0x01
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	fc 01       	movw	r30, r24
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	f9 01       	movw	r30, r18
    24d2:	09 95       	icall
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	08 95       	ret

000024e2 <_ZN11MessagePump8dispatchER3Msg>:

// If there is a current handler, calls processMessage
// on it, passing msg.
uint16_t MessagePump::dispatch(Msg& msg)
{
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	28 97       	sbiw	r28, 0x08	; 8
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	78 87       	std	Y+8, r23	; 0x08
    24fc:	6f 83       	std	Y+7, r22	; 0x07
    uint16_t rc = eFail;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01
    if(m_currentHandler)
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	fc 01       	movw	r30, r24
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	09 f4       	brne	.+2      	; 0x2516 <_ZN11MessagePump8dispatchER3Msg+0x34>
    2514:	43 c0       	rjmp	.+134    	; 0x259c <_ZN11MessagePump8dispatchER3Msg+0xba>
    {
        uint16_t rc = m_currentHandler->processMessage(msg);
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	9e 81       	ldd	r25, Y+6	; 0x06
    251a:	fc 01       	movw	r30, r24
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	fc 01       	movw	r30, r24
    2522:	80 81       	ld	r24, Z
    2524:	91 81       	ldd	r25, Z+1	; 0x01
    2526:	fc 01       	movw	r30, r24
    2528:	20 81       	ld	r18, Z
    252a:	31 81       	ldd	r19, Z+1	; 0x01
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    2530:	fc 01       	movw	r30, r24
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	4f 81       	ldd	r20, Y+7	; 0x07
    2538:	58 85       	ldd	r21, Y+8	; 0x08
    253a:	ba 01       	movw	r22, r20
    253c:	f9 01       	movw	r30, r18
    253e:	09 95       	icall
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	8b 83       	std	Y+3, r24	; 0x03
        switch(rc)
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	09 f0       	breq	.+2      	; 0x2552 <_ZN11MessagePump8dispatchER3Msg+0x70>
                break;
            }
            default:
            {
                // TODO: optionally beep() or do something more informative on eFail.
                break;
    2550:	25 c0       	rjmp	.+74     	; 0x259c <_ZN11MessagePump8dispatchER3Msg+0xba>
        uint16_t rc = m_currentHandler->processMessage(msg);
        switch(rc)
        {
            case eSuccess: // todo: why aren't we looking for eSetNextHandler?
            {
                if(msg.m_nextHandler)
    2552:	8f 81       	ldd	r24, Y+7	; 0x07
    2554:	98 85       	ldd	r25, Y+8	; 0x08
    2556:	fc 01       	movw	r30, r24
    2558:	83 81       	ldd	r24, Z+3	; 0x03
    255a:	94 81       	ldd	r25, Z+4	; 0x04
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	e9 f0       	breq	.+58     	; 0x259a <_ZN11MessagePump8dispatchER3Msg+0xb8>
                {
                    m_currentHandler = msg.m_nextHandler;
    2560:	8f 81       	ldd	r24, Y+7	; 0x07
    2562:	98 85       	ldd	r25, Y+8	; 0x08
    2564:	fc 01       	movw	r30, r24
    2566:	23 81       	ldd	r18, Z+3	; 0x03
    2568:	34 81       	ldd	r19, Z+4	; 0x04
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	fc 01       	movw	r30, r24
    2570:	31 83       	std	Z+1, r19	; 0x01
    2572:	20 83       	st	Z, r18
                    m_currentHandler->show();
    2574:	8d 81       	ldd	r24, Y+5	; 0x05
    2576:	9e 81       	ldd	r25, Y+6	; 0x06
    2578:	fc 01       	movw	r30, r24
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	fc 01       	movw	r30, r24
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	02 96       	adiw	r24, 0x02	; 2
    2586:	fc 01       	movw	r30, r24
    2588:	20 81       	ld	r18, Z
    258a:	31 81       	ldd	r19, Z+1	; 0x01
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	fc 01       	movw	r30, r24
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	f9 01       	movw	r30, r18
    2598:	09 95       	icall
                }
                break;
    259a:	00 00       	nop
            }
        }
    }
    // Make sure that there can be no chance of a Msg
    // retaining a stale handler across successive loops().
    msg.m_nextHandler = NULL;
    259c:	8f 81       	ldd	r24, Y+7	; 0x07
    259e:	98 85       	ldd	r25, Y+8	; 0x08
    25a0:	fc 01       	movw	r30, r24
    25a2:	14 82       	std	Z+4, r1	; 0x04
    25a4:	13 82       	std	Z+3, r1	; 0x03
    return rc;
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	28 96       	adiw	r28, 0x08	; 8
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	08 95       	ret

000025bc <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:
bool NikType003::isConnected() const { return m_stateFlags.m_connected; }
bool NikType003::isLiveViewEnabled() const { return m_stateFlags.m_lvEnabled; }
bool NikType003::isCaptureInProgress() const { return m_stateFlags.m_captureInProgress;}
bool NikType003::isFocusStackActive() const { return m_stateFlags.m_stackActive; }
bool NikType003::isNextFrameFocused() const { return m_stateFlags.m_preparedNextFrame; }
uint16_t NikType003::getProductID() const { return m_idProduct; }
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb+0x6>
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb+0x8>
    25c4:	1f 92       	push	r1
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	6b 83       	std	Y+3, r22	; 0x03
    25d0:	4c 83       	std	Y+4, r20	; 0x04
    25d2:	2d 83       	std	Y+5, r18	; 0x05
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	08 95       	ret

000025e6 <_ZN15USBDeviceConfig12ResetHubPortEh>:
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <_ZN15USBDeviceConfig12ResetHubPortEh+0x6>
    25ec:	1f 92       	push	r1
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	6b 83       	std	Y+3, r22	; 0x03
    25f8:	00 00       	nop
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	08 95       	ret

00002606 <_ZN15USBDeviceConfig8VIDPIDOKEjj>:
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	00 d0       	rcall	.+0      	; 0x260c <_ZN15USBDeviceConfig8VIDPIDOKEjj+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <_ZN15USBDeviceConfig8VIDPIDOKEjj+0x8>
    260e:	00 d0       	rcall	.+0      	; 0x2610 <_ZN15USBDeviceConfig8VIDPIDOKEjj+0xa>
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	7c 83       	std	Y+4, r23	; 0x04
    261a:	6b 83       	std	Y+3, r22	; 0x03
    261c:	5e 83       	std	Y+6, r21	; 0x06
    261e:	4d 83       	std	Y+5, r20	; 0x05
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	26 96       	adiw	r28, 0x06	; 6
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	08 95       	ret

00002634 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	00 d0       	rcall	.+0      	; 0x263a <_ZN15USBDeviceConfig10DEVCLASSOKEh+0x6>
    263a:	1f 92       	push	r1
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	6b 83       	std	Y+3, r22	; 0x03
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	08 95       	ret

00002654 <_ZN3USB14GetAddressPoolEv>:
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	00 d0       	rcall	.+0      	; 0x265a <_ZN3USB14GetAddressPoolEv+0x6>
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	08 95       	ret

00002670 <_ZN20MultiByteValueParserC1Ev>:
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	00 d0       	rcall	.+0      	; 0x2676 <_ZN20MultiByteValueParserC1Ev+0x6>
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	fc 01       	movw	r30, r24
    2684:	11 82       	std	Z+1, r1	; 0x01
    2686:	10 82       	st	Z, r1
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	9a 81       	ldd	r25, Y+2	; 0x02
    268c:	fc 01       	movw	r30, r24
    268e:	12 82       	std	Z+2, r1	; 0x02
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	fc 01       	movw	r30, r24
    2696:	13 82       	std	Z+3, r1	; 0x03
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	08 95       	ret

000026a2 <_ZN3PTP10GetAddressEv>:
    26a2:	cf 93       	push	r28
    26a4:	df 93       	push	r29
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <_ZN3PTP10GetAddressEv+0x6>
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	fc 01       	movw	r30, r24
    26b6:	82 85       	ldd	r24, Z+10	; 0x0a
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	08 95       	ret

000026c2 <_ZN13PTPReadParserC1Ev>:
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <_ZN13PTPReadParserC1Ev+0x6>
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	22 ec       	ldi	r18, 0xC2	; 194
    26d6:	31 e0       	ldi	r19, 0x01	; 1
    26d8:	fc 01       	movw	r30, r24
    26da:	31 83       	std	Z+1, r19	; 0x01
    26dc:	20 83       	st	Z, r18
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	08 95       	ret

000026e8 <_ZN13NKEventParserC1EP15NKEventHandlers>:
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <_ZN13NKEventParserC1EP15NKEventHandlers+0x6>
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <_ZN13NKEventParserC1EP15NKEventHandlers+0x8>
    26f0:	1f 92       	push	r1
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	7d 83       	std	Y+5, r23	; 0x05
    26fc:	6c 83       	std	Y+4, r22	; 0x04
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	9b 81       	ldd	r25, Y+3	; 0x03
    2702:	df df       	rcall	.-66     	; 0x26c2 <_ZN13PTPReadParserC1Ev>
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	28 e3       	ldi	r18, 0x38	; 56
    270a:	32 e0       	ldi	r19, 0x02	; 2
    270c:	fc 01       	movw	r30, r24
    270e:	31 83       	std	Z+1, r19	; 0x01
    2710:	20 83       	st	Z, r18
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	2f ef       	ldi	r18, 0xFF	; 255
    2718:	3f ef       	ldi	r19, 0xFF	; 255
    271a:	fc 01       	movw	r30, r24
    271c:	33 83       	std	Z+3, r19	; 0x03
    271e:	22 83       	std	Z+2, r18	; 0x02
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	9b 81       	ldd	r25, Y+3	; 0x03
    2724:	2c 81       	ldd	r18, Y+4	; 0x04
    2726:	3d 81       	ldd	r19, Y+5	; 0x05
    2728:	fc 01       	movw	r30, r24
    272a:	35 83       	std	Z+5, r19	; 0x05
    272c:	24 83       	std	Z+4, r18	; 0x04
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	9b 81       	ldd	r25, Y+3	; 0x03
    2732:	fc 01       	movw	r30, r24
    2734:	17 82       	std	Z+7, r1	; 0x07
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	9b 81       	ldd	r25, Y+3	; 0x03
    273a:	fc 01       	movw	r30, r24
    273c:	12 86       	std	Z+10, r1	; 0x0a
    273e:	11 86       	std	Z+9, r1	; 0x09
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	45 96       	adiw	r24, 0x15	; 21
    2746:	94 df       	rcall	.-216    	; 0x2670 <_ZN20MultiByteValueParserC1Ev>
    2748:	19 82       	std	Y+1, r1	; 0x01
    274a:	10 c0       	rjmp	.+32     	; 0x276c <_ZN13NKEventParserC1EP15NKEventHandlers+0x84>
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	88 2f       	mov	r24, r24
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	2a 81       	ldd	r18, Y+2	; 0x02
    2754:	3b 81       	ldd	r19, Y+3	; 0x03
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	82 0f       	add	r24, r18
    275c:	93 1f       	adc	r25, r19
    275e:	0f 96       	adiw	r24, 0x0f	; 15
    2760:	fc 01       	movw	r30, r24
    2762:	11 82       	std	Z+1, r1	; 0x01
    2764:	10 82       	st	Z, r1
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	8f 5f       	subi	r24, 0xFF	; 255
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	83 30       	cpi	r24, 0x03	; 3
    2770:	68 f3       	brcs	.-38     	; 0x274c <_ZN13NKEventParserC1EP15NKEventHandlers+0x64>
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	9b 81       	ldd	r25, Y+3	; 0x03
    2776:	9c 01       	movw	r18, r24
    2778:	21 5f       	subi	r18, 0xF1	; 241
    277a:	3f 4f       	sbci	r19, 0xFF	; 255
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	9b 81       	ldd	r25, Y+3	; 0x03
    2780:	fc 01       	movw	r30, r24
    2782:	36 87       	std	Z+14, r19	; 0x0e
    2784:	25 87       	std	Z+13, r18	; 0x0d
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	08 95       	ret

00002796 <_ZN13NikStateFlagsC1Ev>:
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	00 d0       	rcall	.+0      	; 0x279c <_ZN13NikStateFlagsC1Ev+0x6>
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	fc 01       	movw	r30, r24
    27aa:	20 81       	ld	r18, Z
    27ac:	2e 7f       	andi	r18, 0xFE	; 254
    27ae:	fc 01       	movw	r30, r24
    27b0:	20 83       	st	Z, r18
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	fc 01       	movw	r30, r24
    27b8:	20 81       	ld	r18, Z
    27ba:	2d 7f       	andi	r18, 0xFD	; 253
    27bc:	fc 01       	movw	r30, r24
    27be:	20 83       	st	Z, r18
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	9a 81       	ldd	r25, Y+2	; 0x02
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 81       	ld	r18, Z
    27c8:	2b 7f       	andi	r18, 0xFB	; 251
    27ca:	fc 01       	movw	r30, r24
    27cc:	20 83       	st	Z, r18
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	9a 81       	ldd	r25, Y+2	; 0x02
    27d2:	fc 01       	movw	r30, r24
    27d4:	20 81       	ld	r18, Z
    27d6:	27 7f       	andi	r18, 0xF7	; 247
    27d8:	fc 01       	movw	r30, r24
    27da:	20 83       	st	Z, r18
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	fc 01       	movw	r30, r24
    27e2:	20 81       	ld	r18, Z
    27e4:	2f 7e       	andi	r18, 0xEF	; 239
    27e6:	fc 01       	movw	r30, r24
    27e8:	20 83       	st	Z, r18
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	fc 01       	movw	r30, r24
    27f0:	20 81       	ld	r18, Z
    27f2:	20 62       	ori	r18, 0x20	; 32
    27f4:	fc 01       	movw	r30, r24
    27f6:	20 83       	st	Z, r18
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	08 95       	ret

00002802 <_ZNK12SetupHandler14getDriveAmountEv>:
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	00 d0       	rcall	.+0      	; 0x2808 <_ZNK12SetupHandler14getDriveAmountEv+0x6>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	9a 83       	std	Y+2, r25	; 0x02
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	9a 81       	ldd	r25, Y+2	; 0x02
    2814:	fc 01       	movw	r30, r24
    2816:	86 85       	ldd	r24, Z+14	; 0x0e
    2818:	97 85       	ldd	r25, Z+15	; 0x0f
    281a:	a0 89       	ldd	r26, Z+16	; 0x10
    281c:	b1 89       	ldd	r27, Z+17	; 0x11
    281e:	bc 01       	movw	r22, r24
    2820:	cd 01       	movw	r24, r26
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	08 95       	ret

0000282c <_ZNK12SetupHandler12getNumFramesEv>:
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	00 d0       	rcall	.+0      	; 0x2832 <_ZNK12SetupHandler12getNumFramesEv+0x6>
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	fc 01       	movw	r30, r24
    2840:	82 89       	ldd	r24, Z+18	; 0x12
    2842:	93 89       	ldd	r25, Z+19	; 0x13
    2844:	a4 89       	ldd	r26, Z+20	; 0x14
    2846:	b5 89       	ldd	r27, Z+21	; 0x15
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	08 95       	ret

00002856 <_ZNK12SetupHandler15getRestoreFocusEv>:
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	00 d0       	rcall	.+0      	; 0x285c <_ZNK12SetupHandler15getRestoreFocusEv+0x6>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	9a 83       	std	Y+2, r25	; 0x02
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	9a 81       	ldd	r25, Y+2	; 0x02
    2868:	fc 01       	movw	r30, r24
    286a:	82 8d       	ldd	r24, Z+26	; 0x1a
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	df 91       	pop	r29
    2872:	cf 91       	pop	r28
    2874:	08 95       	ret

00002876 <_ZN15NKEventHandlersC1Ev>:
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	00 d0       	rcall	.+0      	; 0x287c <_ZN15NKEventHandlersC1Ev+0x6>
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	2c eb       	ldi	r18, 0xBC	; 188
    288a:	31 e0       	ldi	r19, 0x01	; 1
    288c:	fc 01       	movw	r30, r24
    288e:	31 83       	std	Z+1, r19	; 0x01
    2890:	20 83       	st	Z, r18
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	08 95       	ret

0000289c <_ZN10NikType003C1EP3USBP16PTPStateHandlers>:
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <_ZN10NikType003C1EP3USBP16PTPStateHandlers+0x6>
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <_ZN10NikType003C1EP3USBP16PTPStateHandlers+0x8>
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <_ZN10NikType003C1EP3USBP16PTPStateHandlers+0xa>
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	7c 83       	std	Y+4, r23	; 0x04
    28b0:	6b 83       	std	Y+3, r22	; 0x03
    28b2:	5e 83       	std	Y+6, r21	; 0x06
    28b4:	4d 83       	std	Y+5, r20	; 0x05
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ba:	4d 81       	ldd	r20, Y+5	; 0x05
    28bc:	5e 81       	ldd	r21, Y+6	; 0x06
    28be:	2b 81       	ldd	r18, Y+3	; 0x03
    28c0:	3c 81       	ldd	r19, Y+4	; 0x04
    28c2:	b9 01       	movw	r22, r18
    28c4:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <_ZN3PTPC1EP3USBP16PTPStateHandlers>
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
    28cc:	4a 96       	adiw	r24, 0x1a	; 26
    28ce:	d3 df       	rcall	.-90     	; 0x2876 <_ZN15NKEventHandlersC1Ev>
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	2e e9       	ldi	r18, 0x9E	; 158
    28d6:	31 e0       	ldi	r19, 0x01	; 1
    28d8:	fc 01       	movw	r30, r24
    28da:	31 83       	std	Z+1, r19	; 0x01
    28dc:	20 83       	st	Z, r18
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	26 eb       	ldi	r18, 0xB6	; 182
    28e4:	31 e0       	ldi	r19, 0x01	; 1
    28e6:	fc 01       	movw	r30, r24
    28e8:	33 8f       	std	Z+27, r19	; 0x1b
    28ea:	22 8f       	std	Z+26, r18	; 0x1a
    28ec:	29 81       	ldd	r18, Y+1	; 0x01
    28ee:	3a 81       	ldd	r19, Y+2	; 0x02
    28f0:	88 ee       	ldi	r24, 0xE8	; 232
    28f2:	93 e0       	ldi	r25, 0x03	; 3
    28f4:	a0 e0       	ldi	r26, 0x00	; 0
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	f9 01       	movw	r30, r18
    28fa:	84 8f       	std	Z+28, r24	; 0x1c
    28fc:	95 8f       	std	Z+29, r25	; 0x1d
    28fe:	a6 8f       	std	Z+30, r26	; 0x1e
    2900:	b7 8f       	std	Z+31, r27	; 0x1f
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	fc 01       	movw	r30, r24
    2908:	10 a2       	std	Z+32, r1	; 0x20
    290a:	11 a2       	std	Z+33, r1	; 0x21
    290c:	12 a2       	std	Z+34, r1	; 0x22
    290e:	13 a2       	std	Z+35, r1	; 0x23
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	84 96       	adiw	r24, 0x24	; 36
    2916:	3f df       	rcall	.-386    	; 0x2796 <_ZN13NikStateFlagsC1Ev>
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	fc 01       	movw	r30, r24
    291e:	16 a2       	std	Z+38, r1	; 0x26
    2920:	15 a2       	std	Z+37, r1	; 0x25
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	fc 01       	movw	r30, r24
    2928:	17 a2       	std	Z+39, r1	; 0x27
    292a:	10 a6       	std	Z+40, r1	; 0x28
    292c:	11 a6       	std	Z+41, r1	; 0x29
    292e:	12 a6       	std	Z+42, r1	; 0x2a
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	fc 01       	movw	r30, r24
    2936:	14 a6       	std	Z+44, r1	; 0x2c
    2938:	13 a6       	std	Z+43, r1	; 0x2b
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	9a 81       	ldd	r25, Y+2	; 0x02
    293e:	24 e6       	ldi	r18, 0x64	; 100
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	fc 01       	movw	r30, r24
    2944:	36 a7       	std	Z+46, r19	; 0x2e
    2946:	25 a7       	std	Z+45, r18	; 0x2d
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	fc 01       	movw	r30, r24
    294e:	17 a6       	std	Z+47, r1	; 0x2f
    2950:	10 aa       	std	Z+48, r1	; 0x30
    2952:	11 aa       	std	Z+49, r1	; 0x31
    2954:	12 aa       	std	Z+50, r1	; 0x32
    2956:	26 96       	adiw	r28, 0x06	; 6
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	08 95       	ret

00002968 <_ZN10NikType0034InitEhhb>:
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	6a 97       	sbiw	r28, 0x1a	; 26
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	9f 8b       	std	Y+23, r25	; 0x17
    2982:	8e 8b       	std	Y+22, r24	; 0x16
    2984:	68 8f       	std	Y+24, r22	; 0x18
    2986:	49 8f       	std	Y+25, r20	; 0x19
    2988:	2a 8f       	std	Y+26, r18	; 0x1a
    298a:	1a 82       	std	Y+2, r1	; 0x02
    298c:	19 82       	std	Y+1, r1	; 0x01
    298e:	1c 82       	std	Y+4, r1	; 0x04
    2990:	1b 82       	std	Y+3, r1	; 0x03
    2992:	8e 89       	ldd	r24, Y+22	; 0x16
    2994:	9f 89       	ldd	r25, Y+23	; 0x17
    2996:	fc 01       	movw	r30, r24
    2998:	84 85       	ldd	r24, Z+12	; 0x0c
    299a:	95 85       	ldd	r25, Z+13	; 0x0d
    299c:	5b de       	rcall	.-842    	; 0x2654 <_ZN3USB14GetAddressPoolEv>
    299e:	9e 83       	std	Y+6, r25	; 0x06
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    29a2:	8e 89       	ldd	r24, Y+22	; 0x16
    29a4:	9f 89       	ldd	r25, Y+23	; 0x17
    29a6:	fc 01       	movw	r30, r24
    29a8:	82 85       	ldd	r24, Z+10	; 0x0a
    29aa:	88 23       	and	r24, r24
    29ac:	11 f0       	breq	.+4      	; 0x29b2 <_ZN10NikType0034InitEhhb+0x4a>
    29ae:	89 ed       	ldi	r24, 0xD9	; 217
    29b0:	80 c0       	rjmp	.+256    	; 0x2ab2 <_ZN10NikType0034InitEhhb+0x14a>
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	9e 81       	ldd	r25, Y+6	; 0x06
    29b6:	fc 01       	movw	r30, r24
    29b8:	80 81       	ld	r24, Z
    29ba:	91 81       	ldd	r25, Z+1	; 0x01
    29bc:	fc 01       	movw	r30, r24
    29be:	20 81       	ld	r18, Z
    29c0:	31 81       	ldd	r19, Z+1	; 0x01
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	60 e0       	ldi	r22, 0x00	; 0
    29c8:	f9 01       	movw	r30, r18
    29ca:	09 95       	icall
    29cc:	9a 83       	std	Y+2, r25	; 0x02
    29ce:	89 83       	std	Y+1, r24	; 0x01
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	9a 81       	ldd	r25, Y+2	; 0x02
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	11 f4       	brne	.+4      	; 0x29dc <_ZN10NikType0034InitEhhb+0x74>
    29d8:	86 ed       	ldi	r24, 0xD6	; 214
    29da:	6b c0       	rjmp	.+214    	; 0x2ab2 <_ZN10NikType0034InitEhhb+0x14a>
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	9a 81       	ldd	r25, Y+2	; 0x02
    29e0:	fc 01       	movw	r30, r24
    29e2:	80 81       	ld	r24, Z
    29e4:	91 81       	ldd	r25, Z+1	; 0x01
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	11 f4       	brne	.+4      	; 0x29ee <_ZN10NikType0034InitEhhb+0x86>
    29ea:	87 ed       	ldi	r24, 0xD7	; 215
    29ec:	62 c0       	rjmp	.+196    	; 0x2ab2 <_ZN10NikType0034InitEhhb+0x14a>
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	9a 81       	ldd	r25, Y+2	; 0x02
    29f2:	fc 01       	movw	r30, r24
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	9c 83       	std	Y+4, r25	; 0x04
    29fa:	8b 83       	std	Y+3, r24	; 0x03
    29fc:	8e 89       	ldd	r24, Y+22	; 0x16
    29fe:	9f 89       	ldd	r25, Y+23	; 0x17
    2a00:	9c 01       	movw	r18, r24
    2a02:	22 5f       	subi	r18, 0xF2	; 242
    2a04:	3f 4f       	sbci	r19, 0xFF	; 255
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	31 83       	std	Z+1, r19	; 0x01
    2a0e:	20 83       	st	Z, r18
    2a10:	8e 89       	ldd	r24, Y+22	; 0x16
    2a12:	9f 89       	ldd	r25, Y+23	; 0x17
    2a14:	fc 01       	movw	r30, r24
    2a16:	84 85       	ldd	r24, Z+12	; 0x0c
    2a18:	95 85       	ldd	r25, Z+13	; 0x0d
    2a1a:	9e 01       	movw	r18, r28
    2a1c:	26 5f       	subi	r18, 0xF6	; 246
    2a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a20:	89 01       	movw	r16, r18
    2a22:	2c e0       	ldi	r18, 0x0C	; 12
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <_ZN3USB11getDevDescrEhhjPh>
    2a2e:	8f 83       	std	Y+7, r24	; 0x07
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	9a 81       	ldd	r25, Y+2	; 0x02
    2a34:	2b 81       	ldd	r18, Y+3	; 0x03
    2a36:	3c 81       	ldd	r19, Y+4	; 0x04
    2a38:	fc 01       	movw	r30, r24
    2a3a:	31 83       	std	Z+1, r19	; 0x01
    2a3c:	20 83       	st	Z, r18
    2a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a40:	88 23       	and	r24, r24
    2a42:	41 f0       	breq	.+16     	; 0x2a54 <_ZN10NikType0034InitEhhb+0xec>
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <delay>
    2a50:	8f 81       	ldd	r24, Y+7	; 0x07
    2a52:	2f c0       	rjmp	.+94     	; 0x2ab2 <_ZN10NikType0034InitEhhb+0x14a>
    2a54:	ce 01       	movw	r24, r28
    2a56:	0a 96       	adiw	r24, 0x0a	; 10
    2a58:	99 87       	std	Y+9, r25	; 0x09
    2a5a:	88 87       	std	Y+8, r24	; 0x08
    2a5c:	88 85       	ldd	r24, Y+8	; 0x08
    2a5e:	99 85       	ldd	r25, Y+9	; 0x09
    2a60:	fc 01       	movw	r30, r24
    2a62:	80 85       	ldd	r24, Z+8	; 0x08
    2a64:	91 85       	ldd	r25, Z+9	; 0x09
    2a66:	80 3b       	cpi	r24, 0xB0	; 176
    2a68:	f4 e0       	ldi	r31, 0x04	; 4
    2a6a:	9f 07       	cpc	r25, r31
    2a6c:	91 f4       	brne	.+36     	; 0x2a92 <_ZN10NikType0034InitEhhb+0x12a>
    2a6e:	88 85       	ldd	r24, Y+8	; 0x08
    2a70:	99 85       	ldd	r25, Y+9	; 0x09
    2a72:	fc 01       	movw	r30, r24
    2a74:	22 85       	ldd	r18, Z+10	; 0x0a
    2a76:	33 85       	ldd	r19, Z+11	; 0x0b
    2a78:	8e 89       	ldd	r24, Y+22	; 0x16
    2a7a:	9f 89       	ldd	r25, Y+23	; 0x17
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	34 a7       	std	Z+44, r19	; 0x2c
    2a80:	23 a7       	std	Z+43, r18	; 0x2b
    2a82:	8e 89       	ldd	r24, Y+22	; 0x16
    2a84:	9f 89       	ldd	r25, Y+23	; 0x17
    2a86:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2a88:	49 8d       	ldd	r20, Y+25	; 0x19
    2a8a:	68 8d       	ldd	r22, Y+24	; 0x18
    2a8c:	0e 94 21 30 	call	0x6042	; 0x6042 <_ZN3PTP4InitEhhb>
    2a90:	10 c0       	rjmp	.+32     	; 0x2ab2 <_ZN10NikType0034InitEhhb+0x14a>
    2a92:	80 91 0a 01 	lds	r24, 0x010A
    2a96:	90 91 0b 01 	lds	r25, 0x010B
    2a9a:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN21Adafruit_RGBLCDShield5clearEv>
    2a9e:	2d e6       	ldi	r18, 0x6D	; 109
    2aa0:	32 e0       	ldi	r19, 0x02	; 2
    2aa2:	80 91 0a 01 	lds	r24, 0x010A
    2aa6:	90 91 0b 01 	lds	r25, 0x010B
    2aaa:	b9 01       	movw	r22, r18
    2aac:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
    2ab0:	81 ed       	ldi	r24, 0xD1	; 209
    2ab2:	6a 96       	adiw	r28, 0x1a	; 26
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	08 95       	ret

00002ac8 <_ZN10NikType0034PollEv>:
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	6f 97       	sbiw	r28, 0x1f	; 31
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	9f 8f       	std	Y+31, r25	; 0x1f
    2ade:	8e 8f       	std	Y+30, r24	; 0x1e
    2ae0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ae2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ae4:	0e 94 c0 31 	call	0x6380	; 0x6380 <_ZN3PTP4PollEv>
    2ae8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aec:	d8 d4       	rcall	.+2480   	; 0x349e <_ZNK10NikType00311isConnectedEv>
    2aee:	88 23       	and	r24, r24
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <_ZN10NikType0034PollEv+0x2c>
    2af2:	48 c0       	rjmp	.+144    	; 0x2b84 <_ZN10NikType0034PollEv+0xbc>
    2af4:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	89 83       	std	Y+1, r24	; 0x01
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	ab 83       	std	Y+3, r26	; 0x03
    2b02:	bc 83       	std	Y+4, r27	; 0x04
    2b04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b06:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b08:	fc 01       	movw	r30, r24
    2b0a:	20 a1       	ldd	r18, Z+32	; 0x20
    2b0c:	31 a1       	ldd	r19, Z+33	; 0x21
    2b0e:	42 a1       	ldd	r20, Z+34	; 0x22
    2b10:	53 a1       	ldd	r21, Z+35	; 0x23
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	ab 81       	ldd	r26, Y+3	; 0x03
    2b18:	bc 81       	ldd	r27, Y+4	; 0x04
    2b1a:	82 17       	cp	r24, r18
    2b1c:	93 07       	cpc	r25, r19
    2b1e:	a4 07       	cpc	r26, r20
    2b20:	b5 07       	cpc	r27, r21
    2b22:	80 f1       	brcs	.+96     	; 0x2b84 <_ZN10NikType0034PollEv+0xbc>
    2b24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b26:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b28:	9c 01       	movw	r18, r24
    2b2a:	26 5e       	subi	r18, 0xE6	; 230
    2b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2e:	ce 01       	movw	r24, r28
    2b30:	05 96       	adiw	r24, 0x05	; 5
    2b32:	b9 01       	movw	r22, r18
    2b34:	d9 dd       	rcall	.-1102   	; 0x26e8 <_ZN13NKEventParserC1EP15NKEventHandlers>
    2b36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	80 81       	ld	r24, Z
    2b3e:	91 81       	ldd	r25, Z+1	; 0x01
    2b40:	40 96       	adiw	r24, 0x10	; 16
    2b42:	fc 01       	movw	r30, r24
    2b44:	20 81       	ld	r18, Z
    2b46:	31 81       	ldd	r19, Z+1	; 0x01
    2b48:	ae 01       	movw	r20, r28
    2b4a:	4b 5f       	subi	r20, 0xFB	; 251
    2b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b52:	ba 01       	movw	r22, r20
    2b54:	f9 01       	movw	r30, r18
    2b56:	09 95       	icall
    2b58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	24 8d       	ldd	r18, Z+28	; 0x1c
    2b60:	35 8d       	ldd	r19, Z+29	; 0x1d
    2b62:	46 8d       	ldd	r20, Z+30	; 0x1e
    2b64:	57 8d       	ldd	r21, Z+31	; 0x1f
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b6c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b6e:	82 0f       	add	r24, r18
    2b70:	93 1f       	adc	r25, r19
    2b72:	a4 1f       	adc	r26, r20
    2b74:	b5 1f       	adc	r27, r21
    2b76:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2b78:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2b7a:	f9 01       	movw	r30, r18
    2b7c:	80 a3       	std	Z+32, r24	; 0x20
    2b7e:	91 a3       	std	Z+33, r25	; 0x21
    2b80:	a2 a3       	std	Z+34, r26	; 0x22
    2b82:	b3 a3       	std	Z+35, r27	; 0x23
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	6f 96       	adiw	r28, 0x1f	; 31
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <_ZN10NikType00310EventCheckEP13PTPReadParser>:
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	00 d0       	rcall	.+0      	; 0x2ba2 <_ZN10NikType00310EventCheckEP13PTPReadParser+0xa>
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <_ZN10NikType00310EventCheckEP13PTPReadParser+0xc>
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <_ZN10NikType00310EventCheckEP13PTPReadParser+0xe>
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	9c 83       	std	Y+4, r25	; 0x04
    2bac:	8b 83       	std	Y+3, r24	; 0x03
    2bae:	7e 83       	std	Y+6, r23	; 0x06
    2bb0:	6d 83       	std	Y+5, r22	; 0x05
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	88 7f       	andi	r24, 0xF8	; 248
    2bb6:	89 83       	std	Y+1, r24	; 0x01
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	87 7c       	andi	r24, 0xC7	; 199
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	8f 7b       	andi	r24, 0xBF	; 191
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	80 68       	ori	r24, 0x80	; 128
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	8c 7f       	andi	r24, 0xFC	; 252
    2bce:	81 60       	ori	r24, 0x01	; 1
    2bd0:	8a 83       	std	Y+2, r24	; 0x02
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	83 70       	andi	r24, 0x03	; 3
    2bd6:	8a 83       	std	Y+2, r24	; 0x02
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	2d 81       	ldd	r18, Y+5	; 0x05
    2bde:	3e 81       	ldd	r19, Y+6	; 0x06
    2be0:	89 01       	movw	r16, r18
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	ae 01       	movw	r20, r28
    2be8:	4f 5f       	subi	r20, 0xFF	; 255
    2bea:	5f 4f       	sbci	r21, 0xFF	; 255
    2bec:	67 ec       	ldi	r22, 0xC7	; 199
    2bee:	70 e9       	ldi	r23, 0x90	; 144
    2bf0:	0e 94 c6 31 	call	0x638c	; 0x638c <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv>
    2bf4:	26 96       	adiw	r28, 0x06	; 6
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	08 95       	ret

00002c0a <_ZN10NikType0037OnEventEPK7NKEvent>:
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <_ZN10NikType0037OnEventEPK7NKEvent+0x6>
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <_ZN10NikType0037OnEventEPK7NKEvent+0x8>
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	9a 83       	std	Y+2, r25	; 0x02
    2c18:	89 83       	std	Y+1, r24	; 0x01
    2c1a:	7c 83       	std	Y+4, r23	; 0x04
    2c1c:	6b 83       	std	Y+3, r22	; 0x03
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	9c 81       	ldd	r25, Y+4	; 0x04
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <_ZN10NikType0037OnEventEPK7NKEvent+0x1e>
    2c26:	22 c0       	rjmp	.+68     	; 0x2c6c <_ZN10NikType0037OnEventEPK7NKEvent+0x62>
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	80 81       	ld	r24, Z
    2c30:	91 81       	ldd	r25, Z+1	; 0x01
    2c32:	8d 30       	cpi	r24, 0x0D	; 13
    2c34:	f0 e4       	ldi	r31, 0x40	; 64
    2c36:	9f 07       	cpc	r25, r31
    2c38:	c9 f4       	brne	.+50     	; 0x2c6c <_ZN10NikType0037OnEventEPK7NKEvent+0x62>
    2c3a:	27 e7       	ldi	r18, 0x77	; 119
    2c3c:	32 e0       	ldi	r19, 0x02	; 2
    2c3e:	80 91 04 01 	lds	r24, 0x0104
    2c42:	90 91 05 01 	lds	r25, 0x0105
    2c46:	b9 01       	movw	r22, r18
    2c48:	9f d6       	rcall	.+3390   	; 0x3988 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper>
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4e:	fc 01       	movw	r30, r24
    2c50:	24 a1       	ldd	r18, Z+36	; 0x24
    2c52:	2b 7f       	andi	r18, 0xFB	; 251
    2c54:	fc 01       	movw	r30, r24
    2c56:	24 a3       	std	Z+36, r18	; 0x24
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	85 a1       	ldd	r24, Z+37	; 0x25
    2c60:	96 a1       	ldd	r25, Z+38	; 0x26
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	19 f4       	brne	.+6      	; 0x2c6c <_ZN10NikType0037OnEventEPK7NKEvent+0x62>
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6a:	e4 d2       	rcall	.+1480   	; 0x3234 <_ZN10NikType00319focusStackNextFrameEv>
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	08 95       	ret

00002c7a <_ZN10NikType00312waitForReadyEj>:
    2c7a:	cf 93       	push	r28
    2c7c:	df 93       	push	r29
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	2a 97       	sbiw	r28, 0x0a	; 10
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	98 87       	std	Y+8, r25	; 0x08
    2c90:	8f 83       	std	Y+7, r24	; 0x07
    2c92:	7a 87       	std	Y+10, r23	; 0x0a
    2c94:	69 87       	std	Y+9, r22	; 0x09
    2c96:	19 82       	std	Y+1, r1	; 0x01
    2c98:	1a 82       	std	Y+2, r1	; 0x02
    2c9a:	1b 82       	std	Y+3, r1	; 0x03
    2c9c:	1c 82       	std	Y+4, r1	; 0x04
    2c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca0:	98 85       	ldd	r25, Y+8	; 0x08
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	68 ec       	ldi	r22, 0xC8	; 200
    2caa:	70 e9       	ldi	r23, 0x90	; 144
    2cac:	0e 94 02 35 	call	0x6a04	; 0x6a04 <_ZN3PTP9OperationEjhPm>
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb6:	98 85       	ldd	r25, Y+8	; 0x08
    2cb8:	fc 01       	movw	r30, r24
    2cba:	85 a5       	ldd	r24, Z+45	; 0x2d
    2cbc:	96 a5       	ldd	r25, Z+46	; 0x2e
    2cbe:	cc 01       	movw	r24, r24
    2cc0:	a0 e0       	ldi	r26, 0x00	; 0
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <delay>
    2ccc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cce:	98 85       	ldd	r25, Y+8	; 0x08
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	68 ec       	ldi	r22, 0xC8	; 200
    2cd8:	70 e9       	ldi	r23, 0x90	; 144
    2cda:	0e 94 02 35 	call	0x6a04	; 0x6a04 <_ZN3PTP9OperationEjhPm>
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ce4:	98 85       	ldd	r25, Y+8	; 0x08
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	85 a5       	ldd	r24, Z+45	; 0x2d
    2cea:	96 a5       	ldd	r25, Z+46	; 0x2e
    2cec:	cc 01       	movw	r24, r24
    2cee:	a0 e0       	ldi	r26, 0x00	; 0
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <delay>
    2cfa:	17 c0       	rjmp	.+46     	; 0x2d2a <_ZN10NikType00312waitForReadyEj+0xb0>
    2cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cfe:	98 85       	ldd	r25, Y+8	; 0x08
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	68 ec       	ldi	r22, 0xC8	; 200
    2d08:	70 e9       	ldi	r23, 0x90	; 144
    2d0a:	0e 94 02 35 	call	0x6a04	; 0x6a04 <_ZN3PTP9OperationEjhPm>
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
    2d12:	8f 81       	ldd	r24, Y+7	; 0x07
    2d14:	98 85       	ldd	r25, Y+8	; 0x08
    2d16:	fc 01       	movw	r30, r24
    2d18:	85 a5       	ldd	r24, Z+45	; 0x2d
    2d1a:	96 a5       	ldd	r25, Z+46	; 0x2e
    2d1c:	cc 01       	movw	r24, r24
    2d1e:	a0 e0       	ldi	r26, 0x00	; 0
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	bc 01       	movw	r22, r24
    2d24:	cd 01       	movw	r24, r26
    2d26:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <delay>
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2e:	89 31       	cpi	r24, 0x19	; 25
    2d30:	f0 e2       	ldi	r31, 0x20	; 32
    2d32:	9f 07       	cpc	r25, r31
    2d34:	d9 f4       	brne	.+54     	; 0x2d6c <_ZN10NikType00312waitForReadyEj+0xf2>
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3a:	ab 81       	ldd	r26, Y+3	; 0x03
    2d3c:	bc 81       	ldd	r27, Y+4	; 0x04
    2d3e:	01 96       	adiw	r24, 0x01	; 1
    2d40:	a1 1d       	adc	r26, r1
    2d42:	b1 1d       	adc	r27, r1
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	9a 83       	std	Y+2, r25	; 0x02
    2d48:	ab 83       	std	Y+3, r26	; 0x03
    2d4a:	bc 83       	std	Y+4, r27	; 0x04
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	cc 01       	movw	r24, r24
    2d52:	a0 e0       	ldi	r26, 0x00	; 0
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	29 81       	ldd	r18, Y+1	; 0x01
    2d58:	3a 81       	ldd	r19, Y+2	; 0x02
    2d5a:	4b 81       	ldd	r20, Y+3	; 0x03
    2d5c:	5c 81       	ldd	r21, Y+4	; 0x04
    2d5e:	28 17       	cp	r18, r24
    2d60:	39 07       	cpc	r19, r25
    2d62:	4a 07       	cpc	r20, r26
    2d64:	5b 07       	cpc	r21, r27
    2d66:	10 f4       	brcc	.+4      	; 0x2d6c <_ZN10NikType00312waitForReadyEj+0xf2>
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <_ZN10NikType00312waitForReadyEj+0xf4>
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	88 23       	and	r24, r24
    2d70:	29 f6       	brne	.-118    	; 0x2cfc <_ZN10NikType00312waitForReadyEj+0x82>
    2d72:	8d 81       	ldd	r24, Y+5	; 0x05
    2d74:	9e 81       	ldd	r25, Y+6	; 0x06
    2d76:	2a 96       	adiw	r28, 0x0a	; 10
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	08 95       	ret

00002d88 <_ZN10NikType00314enableLiveViewEb>:
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <_ZN10NikType00314enableLiveViewEb+0x6>
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <_ZN10NikType00314enableLiveViewEb+0x8>
    2d90:	1f 92       	push	r1
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	9c 83       	std	Y+4, r25	; 0x04
    2d98:	8b 83       	std	Y+3, r24	; 0x03
    2d9a:	6d 83       	std	Y+5, r22	; 0x05
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	90 e2       	ldi	r25, 0x20	; 32
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	9d 81       	ldd	r25, Y+5	; 0x05
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	89 27       	eor	r24, r25
    2daa:	88 23       	and	r24, r24
    2dac:	61 f0       	breq	.+24     	; 0x2dc6 <_ZN10NikType00314enableLiveViewEb+0x3e>
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	9c 81       	ldd	r25, Y+4	; 0x04
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e0       	ldi	r20, 0x00	; 0
    2db8:	62 e0       	ldi	r22, 0x02	; 2
    2dba:	72 e9       	ldi	r23, 0x92	; 146
    2dbc:	0e 94 02 35 	call	0x6a04	; 0x6a04 <_ZN3PTP9OperationEjhPm>
    2dc0:	9a 83       	std	Y+2, r25	; 0x02
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	0b c0       	rjmp	.+22     	; 0x2ddc <_ZN10NikType00314enableLiveViewEb+0x54>
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	72 e9       	ldi	r23, 0x92	; 146
    2dd4:	0e 94 02 35 	call	0x6a04	; 0x6a04 <_ZN3PTP9OperationEjhPm>
    2dd8:	9a 83       	std	Y+2, r25	; 0x02
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	9a 81       	ldd	r25, Y+2	; 0x02
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	20 e2       	ldi	r18, 0x20	; 32
    2de4:	92 07       	cpc	r25, r18
    2de6:	69 f4       	brne	.+26     	; 0x2e02 <_ZN10NikType00314enableLiveViewEb+0x7a>
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	28 2f       	mov	r18, r24
    2dec:	21 70       	andi	r18, 0x01	; 1
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	9c 81       	ldd	r25, Y+4	; 0x04
    2df2:	21 70       	andi	r18, 0x01	; 1
    2df4:	22 0f       	add	r18, r18
    2df6:	fc 01       	movw	r30, r24
    2df8:	34 a1       	ldd	r19, Z+36	; 0x24
    2dfa:	3d 7f       	andi	r19, 0xFD	; 253
    2dfc:	23 2b       	or	r18, r19
    2dfe:	fc 01       	movw	r30, r24
    2e00:	24 a3       	std	Z+36, r18	; 0x24
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	9a 81       	ldd	r25, Y+2	; 0x02
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	08 95       	ret

00002e16 <_ZN10NikType00313captureToCardEv>:
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	2c 97       	sbiw	r28, 0x0c	; 12
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	9c 87       	std	Y+12, r25	; 0x0c
    2e2c:	8b 87       	std	Y+11, r24	; 0x0b
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	90 e2       	ldi	r25, 0x20	; 32
    2e32:	9a 83       	std	Y+2, r25	; 0x02
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	84 a1       	ldd	r24, Z+36	; 0x24
    2e3e:	84 70       	andi	r24, 0x04	; 4
    2e40:	88 23       	and	r24, r24
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <_ZN10NikType00313captureToCardEv+0x30>
    2e44:	51 c0       	rjmp	.+162    	; 0x2ee8 <_ZN10NikType00313captureToCardEv+0xd2>
    2e46:	2e e7       	ldi	r18, 0x7E	; 126
    2e48:	32 e0       	ldi	r19, 0x02	; 2
    2e4a:	80 91 04 01 	lds	r24, 0x0104
    2e4e:	90 91 05 01 	lds	r25, 0x0105
    2e52:	b9 01       	movw	r22, r18
    2e54:	99 d5       	rcall	.+2866   	; 0x3988 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper>
    2e56:	8f ef       	ldi	r24, 0xFF	; 255
    2e58:	9f ef       	ldi	r25, 0xFF	; 255
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	8b 83       	std	Y+3, r24	; 0x03
    2e5e:	9c 83       	std	Y+4, r25	; 0x04
    2e60:	ad 83       	std	Y+5, r26	; 0x05
    2e62:	be 83       	std	Y+6, r27	; 0x06
    2e64:	1f 82       	std	Y+7, r1	; 0x07
    2e66:	18 86       	std	Y+8, r1	; 0x08
    2e68:	19 86       	std	Y+9, r1	; 0x09
    2e6a:	1a 86       	std	Y+10, r1	; 0x0a
    2e6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e70:	9e 01       	movw	r18, r28
    2e72:	2d 5f       	subi	r18, 0xFD	; 253
    2e74:	3f 4f       	sbci	r19, 0xFF	; 255
    2e76:	42 e0       	ldi	r20, 0x02	; 2
    2e78:	67 e0       	ldi	r22, 0x07	; 7
    2e7a:	72 e9       	ldi	r23, 0x92	; 146
    2e7c:	0e 94 02 35 	call	0x6a04	; 0x6a04 <_ZN3PTP9OperationEjhPm>
    2e80:	9a 83       	std	Y+2, r25	; 0x02
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	21 e0       	ldi	r18, 0x01	; 1
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8a:	81 30       	cpi	r24, 0x01	; 1
    2e8c:	f0 e2       	ldi	r31, 0x20	; 32
    2e8e:	9f 07       	cpc	r25, r31
    2e90:	09 f0       	breq	.+2      	; 0x2e94 <_ZN10NikType00313captureToCardEv+0x7e>
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	22 23       	and	r18, r18
    2e96:	41 f1       	breq	.+80     	; 0x2ee8 <_ZN10NikType00313captureToCardEv+0xd2>
    2e98:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	85 a1       	ldd	r24, Z+37	; 0x25
    2ea0:	96 a1       	ldd	r25, Z+38	; 0x26
    2ea2:	21 e0       	ldi	r18, 0x01	; 1
    2ea4:	82 30       	cpi	r24, 0x02	; 2
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	08 f0       	brcs	.+2      	; 0x2eac <_ZN10NikType00313captureToCardEv+0x96>
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eae:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eb0:	21 70       	andi	r18, 0x01	; 1
    2eb2:	22 95       	swap	r18
    2eb4:	22 0f       	add	r18, r18
    2eb6:	20 7e       	andi	r18, 0xE0	; 224
    2eb8:	fc 01       	movw	r30, r24
    2eba:	34 a1       	ldd	r19, Z+36	; 0x24
    2ebc:	3f 7d       	andi	r19, 0xDF	; 223
    2ebe:	23 2b       	or	r18, r19
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	24 a3       	std	Z+36, r18	; 0x24
    2ec4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ec6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ec8:	fc 01       	movw	r30, r24
    2eca:	24 a1       	ldd	r18, Z+36	; 0x24
    2ecc:	24 60       	ori	r18, 0x04	; 4
    2ece:	fc 01       	movw	r30, r24
    2ed0:	24 a3       	std	Z+36, r18	; 0x24
    2ed2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	2b 85       	ldd	r18, Y+11	; 0x0b
    2edc:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ede:	f9 01       	movw	r30, r18
    2ee0:	87 a7       	std	Z+47, r24	; 0x2f
    2ee2:	90 ab       	std	Z+48, r25	; 0x30
    2ee4:	a1 ab       	std	Z+49, r26	; 0x31
    2ee6:	b2 ab       	std	Z+50, r27	; 0x32
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	2c 96       	adiw	r28, 0x0c	; 12
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	08 95       	ret

00002efe <_ZN10NikType0039moveFocusEmm>:
    2efe:	0f 93       	push	r16
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	64 97       	sbiw	r28, 0x14	; 20
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	9c 87       	std	Y+12, r25	; 0x0c
    2f18:	8b 87       	std	Y+11, r24	; 0x0b
    2f1a:	4d 87       	std	Y+13, r20	; 0x0d
    2f1c:	5e 87       	std	Y+14, r21	; 0x0e
    2f1e:	6f 87       	std	Y+15, r22	; 0x0f
    2f20:	78 8b       	std	Y+16, r23	; 0x10
    2f22:	09 8b       	std	Y+17, r16	; 0x11
    2f24:	1a 8b       	std	Y+18, r17	; 0x12
    2f26:	2b 8b       	std	Y+19, r18	; 0x13
    2f28:	3c 8b       	std	Y+20, r19	; 0x14
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	88 7f       	andi	r24, 0xF8	; 248
    2f2e:	82 60       	ori	r24, 0x02	; 2
    2f30:	89 83       	std	Y+1, r24	; 0x01
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	87 7c       	andi	r24, 0xC7	; 199
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	8f 7b       	andi	r24, 0xBF	; 191
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	8f 77       	andi	r24, 0x7F	; 127
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	8c 7f       	andi	r24, 0xFC	; 252
    2f48:	8a 83       	std	Y+2, r24	; 0x02
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	83 70       	andi	r24, 0x03	; 3
    2f4e:	8a 83       	std	Y+2, r24	; 0x02
    2f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f54:	af 85       	ldd	r26, Y+15	; 0x0f
    2f56:	b8 89       	ldd	r27, Y+16	; 0x10
    2f58:	8b 83       	std	Y+3, r24	; 0x03
    2f5a:	9c 83       	std	Y+4, r25	; 0x04
    2f5c:	ad 83       	std	Y+5, r26	; 0x05
    2f5e:	be 83       	std	Y+6, r27	; 0x06
    2f60:	89 89       	ldd	r24, Y+17	; 0x11
    2f62:	9a 89       	ldd	r25, Y+18	; 0x12
    2f64:	ab 89       	ldd	r26, Y+19	; 0x13
    2f66:	bc 89       	ldd	r27, Y+20	; 0x14
    2f68:	8f 83       	std	Y+7, r24	; 0x07
    2f6a:	98 87       	std	Y+8, r25	; 0x08
    2f6c:	a9 87       	std	Y+9, r26	; 0x09
    2f6e:	ba 87       	std	Y+10, r27	; 0x0a
    2f70:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f72:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f74:	9e 01       	movw	r18, r28
    2f76:	2d 5f       	subi	r18, 0xFD	; 253
    2f78:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7a:	00 e0       	ldi	r16, 0x00	; 0
    2f7c:	10 e0       	ldi	r17, 0x00	; 0
    2f7e:	ae 01       	movw	r20, r28
    2f80:	4f 5f       	subi	r20, 0xFF	; 255
    2f82:	5f 4f       	sbci	r21, 0xFF	; 255
    2f84:	64 e0       	ldi	r22, 0x04	; 4
    2f86:	72 e9       	ldi	r23, 0x92	; 146
    2f88:	0e 94 c6 31 	call	0x638c	; 0x638c <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv>
    2f8c:	64 96       	adiw	r28, 0x14	; 20
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	1f 91       	pop	r17
    2f9e:	0f 91       	pop	r16
    2fa0:	08 95       	ret

00002fa2 <_ZN10NikType00315startFocusStackEv>:
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <_ZN10NikType00315startFocusStackEv+0x6>
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <_ZN10NikType00315startFocusStackEv+0x8>
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	90 e2       	ldi	r25, 0x20	; 32
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	80 91 02 01 	lds	r24, 0x0102
    2fbe:	90 91 03 01 	lds	r25, 0x0103
    2fc2:	34 dc       	rcall	.-1944   	; 0x282c <_ZNK12SetupHandler12getNumFramesEv>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9c 01       	movw	r18, r24
    2fca:	8b 81       	ldd	r24, Y+3	; 0x03
    2fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fce:	fc 01       	movw	r30, r24
    2fd0:	36 a3       	std	Z+38, r19	; 0x26
    2fd2:	25 a3       	std	Z+37, r18	; 0x25
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	fc 01       	movw	r30, r24
    2fda:	25 a1       	ldd	r18, Z+37	; 0x25
    2fdc:	36 a1       	ldd	r19, Z+38	; 0x26
    2fde:	80 91 04 01 	lds	r24, 0x0104
    2fe2:	90 91 05 01 	lds	r25, 0x0105
    2fe6:	b9 01       	movw	r22, r18
    2fe8:	02 d5       	rcall	.+2564   	; 0x39ee <_ZN20RunFocusStackHandler11reportFrameEj>
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	9c 81       	ldd	r25, Y+4	; 0x04
    2fee:	fc 01       	movw	r30, r24
    2ff0:	17 a2       	std	Z+39, r1	; 0x27
    2ff2:	10 a6       	std	Z+40, r1	; 0x28
    2ff4:	11 a6       	std	Z+41, r1	; 0x29
    2ff6:	12 a6       	std	Z+42, r1	; 0x2a
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	24 a1       	ldd	r18, Z+36	; 0x24
    3000:	28 60       	ori	r18, 0x08	; 8
    3002:	fc 01       	movw	r30, r24
    3004:	24 a3       	std	Z+36, r18	; 0x24
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	9c 81       	ldd	r25, Y+4	; 0x04
    300a:	fc 01       	movw	r30, r24
    300c:	24 a1       	ldd	r18, Z+36	; 0x24
    300e:	2f 7e       	andi	r18, 0xEF	; 239
    3010:	fc 01       	movw	r30, r24
    3012:	24 a3       	std	Z+36, r18	; 0x24
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	9c 81       	ldd	r25, Y+4	; 0x04
    3018:	fe de       	rcall	.-516    	; 0x2e16 <_ZN10NikType00313captureToCardEv>
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	81 30       	cpi	r24, 0x01	; 1
    3024:	f0 e2       	ldi	r31, 0x20	; 32
    3026:	9f 07       	cpc	r25, r31
    3028:	f1 f4       	brne	.+60     	; 0x3066 <_ZN10NikType00315startFocusStackEv+0xc4>
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	9c 81       	ldd	r25, Y+4	; 0x04
    302e:	fc 01       	movw	r30, r24
    3030:	25 a1       	ldd	r18, Z+37	; 0x25
    3032:	36 a1       	ldd	r19, Z+38	; 0x26
    3034:	80 91 04 01 	lds	r24, 0x0104
    3038:	90 91 05 01 	lds	r25, 0x0105
    303c:	b9 01       	movw	r22, r18
    303e:	d7 d4       	rcall	.+2478   	; 0x39ee <_ZN20RunFocusStackHandler11reportFrameEj>
    3040:	80 91 04 01 	lds	r24, 0x0104
    3044:	90 91 05 01 	lds	r25, 0x0105
    3048:	a3 d5       	rcall	.+2886   	; 0x3b90 <_ZN20RunFocusStackHandler19resetLastUpdateTimeEv>
    304a:	8b 81       	ldd	r24, Y+3	; 0x03
    304c:	9c 81       	ldd	r25, Y+4	; 0x04
    304e:	fc 01       	movw	r30, r24
    3050:	85 a1       	ldd	r24, Z+37	; 0x25
    3052:	96 a1       	ldd	r25, Z+38	; 0x26
    3054:	9c 01       	movw	r18, r24
    3056:	21 50       	subi	r18, 0x01	; 1
    3058:	31 09       	sbc	r19, r1
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	9c 81       	ldd	r25, Y+4	; 0x04
    305e:	fc 01       	movw	r30, r24
    3060:	36 a3       	std	Z+38, r19	; 0x26
    3062:	25 a3       	std	Z+37, r18	; 0x25
    3064:	05 c0       	rjmp	.+10     	; 0x3070 <_ZN10NikType00315startFocusStackEv+0xce>
    3066:	8b 81       	ldd	r24, Y+3	; 0x03
    3068:	9c 81       	ldd	r25, Y+4	; 0x04
    306a:	fc 01       	movw	r30, r24
    306c:	16 a2       	std	Z+38, r1	; 0x26
    306e:	15 a2       	std	Z+37, r1	; 0x25
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	9a 81       	ldd	r25, Y+2	; 0x02
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	df 91       	pop	r29
    307e:	cf 91       	pop	r28
    3080:	08 95       	ret

00003082 <_ZN10NikType00316prepareNextFrameEv>:
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	00 d0       	rcall	.+0      	; 0x308c <_ZN10NikType00316prepareNextFrameEv+0xa>
    308c:	00 d0       	rcall	.+0      	; 0x308e <_ZN10NikType00316prepareNextFrameEv+0xc>
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	9c 83       	std	Y+4, r25	; 0x04
    3094:	8b 83       	std	Y+3, r24	; 0x03
    3096:	82 e0       	ldi	r24, 0x02	; 2
    3098:	90 e2       	ldi	r25, 0x20	; 32
    309a:	9a 83       	std	Y+2, r25	; 0x02
    309c:	89 83       	std	Y+1, r24	; 0x01
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	9c 81       	ldd	r25, Y+4	; 0x04
    30a2:	fc 01       	movw	r30, r24
    30a4:	85 a1       	ldd	r24, Z+37	; 0x25
    30a6:	96 a1       	ldd	r25, Z+38	; 0x26
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	09 f4       	brne	.+2      	; 0x30ae <_ZN10NikType00316prepareNextFrameEv+0x2c>
    30ac:	b8 c0       	rjmp	.+368    	; 0x321e <_ZN10NikType00316prepareNextFrameEv+0x19c>
    30ae:	26 e8       	ldi	r18, 0x86	; 134
    30b0:	32 e0       	ldi	r19, 0x02	; 2
    30b2:	80 91 04 01 	lds	r24, 0x0104
    30b6:	90 91 05 01 	lds	r25, 0x0105
    30ba:	b9 01       	movw	r22, r18
    30bc:	65 d4       	rcall	.+2250   	; 0x3988 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper>
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
    30c0:	9c 81       	ldd	r25, Y+4	; 0x04
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	61 de       	rcall	.-830    	; 0x2d88 <_ZN10NikType00314enableLiveViewEb>
    30c6:	9a 83       	std	Y+2, r25	; 0x02
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	21 e0       	ldi	r18, 0x01	; 1
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	9a 81       	ldd	r25, Y+2	; 0x02
    30d0:	81 30       	cpi	r24, 0x01	; 1
    30d2:	f0 e2       	ldi	r31, 0x20	; 32
    30d4:	9f 07       	cpc	r25, r31
    30d6:	09 f0       	breq	.+2      	; 0x30da <_ZN10NikType00316prepareNextFrameEv+0x58>
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	22 23       	and	r18, r18
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <_ZN10NikType00316prepareNextFrameEv+0x5e>
    30de:	82 c0       	rjmp	.+260    	; 0x31e4 <_ZN10NikType00316prepareNextFrameEv+0x162>
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	9c 81       	ldd	r25, Y+4	; 0x04
    30e4:	68 ee       	ldi	r22, 0xE8	; 232
    30e6:	73 e0       	ldi	r23, 0x03	; 3
    30e8:	c8 dd       	rcall	.-1136   	; 0x2c7a <_ZN10NikType00312waitForReadyEj>
    30ea:	9a 83       	std	Y+2, r25	; 0x02
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	21 e0       	ldi	r18, 0x01	; 1
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	9a 81       	ldd	r25, Y+2	; 0x02
    30f4:	81 30       	cpi	r24, 0x01	; 1
    30f6:	30 e2       	ldi	r19, 0x20	; 32
    30f8:	93 07       	cpc	r25, r19
    30fa:	09 f0       	breq	.+2      	; 0x30fe <_ZN10NikType00316prepareNextFrameEv+0x7c>
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	22 23       	and	r18, r18
    3100:	09 f4       	brne	.+2      	; 0x3104 <_ZN10NikType00316prepareNextFrameEv+0x82>
    3102:	70 c0       	rjmp	.+224    	; 0x31e4 <_ZN10NikType00316prepareNextFrameEv+0x162>
    3104:	2c e8       	ldi	r18, 0x8C	; 140
    3106:	32 e0       	ldi	r19, 0x02	; 2
    3108:	80 91 04 01 	lds	r24, 0x0104
    310c:	90 91 05 01 	lds	r25, 0x0105
    3110:	b9 01       	movw	r22, r18
    3112:	3a d4       	rcall	.+2164   	; 0x3988 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper>
    3114:	80 91 02 01 	lds	r24, 0x0102
    3118:	90 91 03 01 	lds	r25, 0x0103
    311c:	72 db       	rcall	.-2332   	; 0x2802 <_ZNK12SetupHandler14getDriveAmountEv>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	eb 81       	ldd	r30, Y+3	; 0x03
    3124:	fc 81       	ldd	r31, Y+4	; 0x04
    3126:	8c 01       	movw	r16, r24
    3128:	9d 01       	movw	r18, r26
    312a:	42 e0       	ldi	r20, 0x02	; 2
    312c:	50 e0       	ldi	r21, 0x00	; 0
    312e:	60 e0       	ldi	r22, 0x00	; 0
    3130:	70 e0       	ldi	r23, 0x00	; 0
    3132:	cf 01       	movw	r24, r30
    3134:	e4 de       	rcall	.-568    	; 0x2efe <_ZN10NikType0039moveFocusEmm>
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
    313a:	21 e0       	ldi	r18, 0x01	; 1
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	9a 81       	ldd	r25, Y+2	; 0x02
    3140:	81 30       	cpi	r24, 0x01	; 1
    3142:	e0 e2       	ldi	r30, 0x20	; 32
    3144:	9e 07       	cpc	r25, r30
    3146:	09 f0       	breq	.+2      	; 0x314a <_ZN10NikType00316prepareNextFrameEv+0xc8>
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	22 23       	and	r18, r18
    314c:	09 f4       	brne	.+2      	; 0x3150 <_ZN10NikType00316prepareNextFrameEv+0xce>
    314e:	4a c0       	rjmp	.+148    	; 0x31e4 <_ZN10NikType00316prepareNextFrameEv+0x162>
    3150:	80 91 02 01 	lds	r24, 0x0102
    3154:	90 91 03 01 	lds	r25, 0x0103
    3158:	54 db       	rcall	.-2392   	; 0x2802 <_ZNK12SetupHandler14getDriveAmountEv>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	2b 81       	ldd	r18, Y+3	; 0x03
    3160:	3c 81       	ldd	r19, Y+4	; 0x04
    3162:	f9 01       	movw	r30, r18
    3164:	27 a1       	ldd	r18, Z+39	; 0x27
    3166:	30 a5       	ldd	r19, Z+40	; 0x28
    3168:	41 a5       	ldd	r20, Z+41	; 0x29
    316a:	52 a5       	ldd	r21, Z+42	; 0x2a
    316c:	82 0f       	add	r24, r18
    316e:	93 1f       	adc	r25, r19
    3170:	a4 1f       	adc	r26, r20
    3172:	b5 1f       	adc	r27, r21
    3174:	2b 81       	ldd	r18, Y+3	; 0x03
    3176:	3c 81       	ldd	r19, Y+4	; 0x04
    3178:	f9 01       	movw	r30, r18
    317a:	87 a3       	std	Z+39, r24	; 0x27
    317c:	90 a7       	std	Z+40, r25	; 0x28
    317e:	a1 a7       	std	Z+41, r26	; 0x29
    3180:	b2 a7       	std	Z+42, r27	; 0x2a
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	68 ee       	ldi	r22, 0xE8	; 232
    3188:	73 e0       	ldi	r23, 0x03	; 3
    318a:	77 dd       	rcall	.-1298   	; 0x2c7a <_ZN10NikType00312waitForReadyEj>
    318c:	9a 83       	std	Y+2, r25	; 0x02
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	21 e0       	ldi	r18, 0x01	; 1
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	9a 81       	ldd	r25, Y+2	; 0x02
    3196:	81 30       	cpi	r24, 0x01	; 1
    3198:	f0 e2       	ldi	r31, 0x20	; 32
    319a:	9f 07       	cpc	r25, r31
    319c:	09 f0       	breq	.+2      	; 0x31a0 <_ZN10NikType00316prepareNextFrameEv+0x11e>
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	22 23       	and	r18, r18
    31a2:	01 f1       	breq	.+64     	; 0x31e4 <_ZN10NikType00316prepareNextFrameEv+0x162>
    31a4:	22 e9       	ldi	r18, 0x92	; 146
    31a6:	32 e0       	ldi	r19, 0x02	; 2
    31a8:	80 91 04 01 	lds	r24, 0x0104
    31ac:	90 91 05 01 	lds	r25, 0x0105
    31b0:	b9 01       	movw	r22, r18
    31b2:	ea d3       	rcall	.+2004   	; 0x3988 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper>
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	9c 81       	ldd	r25, Y+4	; 0x04
    31b8:	60 e0       	ldi	r22, 0x00	; 0
    31ba:	e6 dd       	rcall	.-1076   	; 0x2d88 <_ZN10NikType00314enableLiveViewEb>
    31bc:	9a 83       	std	Y+2, r25	; 0x02
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	fc 01       	movw	r30, r24
    31c6:	24 a1       	ldd	r18, Z+36	; 0x24
    31c8:	20 62       	ori	r18, 0x20	; 32
    31ca:	fc 01       	movw	r30, r24
    31cc:	24 a3       	std	Z+36, r18	; 0x24
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	fc 01       	movw	r30, r24
    31d4:	25 a1       	ldd	r18, Z+37	; 0x25
    31d6:	36 a1       	ldd	r19, Z+38	; 0x26
    31d8:	80 91 04 01 	lds	r24, 0x0104
    31dc:	90 91 05 01 	lds	r25, 0x0105
    31e0:	b9 01       	movw	r22, r18
    31e2:	05 d4       	rcall	.+2058   	; 0x39ee <_ZN20RunFocusStackHandler11reportFrameEj>
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	9a 81       	ldd	r25, Y+2	; 0x02
    31e8:	81 30       	cpi	r24, 0x01	; 1
    31ea:	f0 e2       	ldi	r31, 0x20	; 32
    31ec:	9f 07       	cpc	r25, r31
    31ee:	69 f0       	breq	.+26     	; 0x320a <_ZN10NikType00316prepareNextFrameEv+0x188>
    31f0:	8e 30       	cpi	r24, 0x0E	; 14
    31f2:	20 ea       	ldi	r18, 0xA0	; 160
    31f4:	92 07       	cpc	r25, r18
    31f6:	51 f4       	brne	.+20     	; 0x320c <_ZN10NikType00316prepareNextFrameEv+0x18a>
    31f8:	29 e9       	ldi	r18, 0x99	; 153
    31fa:	32 e0       	ldi	r19, 0x02	; 2
    31fc:	80 91 04 01 	lds	r24, 0x0104
    3200:	90 91 05 01 	lds	r25, 0x0105
    3204:	b9 01       	movw	r22, r18
    3206:	c0 d3       	rcall	.+1920   	; 0x3988 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper>
    3208:	01 c0       	rjmp	.+2      	; 0x320c <_ZN10NikType00316prepareNextFrameEv+0x18a>
    320a:	00 00       	nop
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	9a 81       	ldd	r25, Y+2	; 0x02
    3210:	81 30       	cpi	r24, 0x01	; 1
    3212:	30 e2       	ldi	r19, 0x20	; 32
    3214:	93 07       	cpc	r25, r19
    3216:	19 f0       	breq	.+6      	; 0x321e <_ZN10NikType00316prepareNextFrameEv+0x19c>
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	9c 81       	ldd	r25, Y+4	; 0x04
    321c:	89 d0       	rcall	.+274    	; 0x3330 <_ZN10NikType00316cancelFocusStackEv>
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	9a 81       	ldd	r25, Y+2	; 0x02
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	1f 91       	pop	r17
    3230:	0f 91       	pop	r16
    3232:	08 95       	ret

00003234 <_ZN10NikType00319focusStackNextFrameEv>:
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	00 d0       	rcall	.+0      	; 0x323a <_ZN10NikType00319focusStackNextFrameEv+0x6>
    323a:	00 d0       	rcall	.+0      	; 0x323c <_ZN10NikType00319focusStackNextFrameEv+0x8>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	9c 83       	std	Y+4, r25	; 0x04
    3242:	8b 83       	std	Y+3, r24	; 0x03
    3244:	82 e0       	ldi	r24, 0x02	; 2
    3246:	90 e2       	ldi	r25, 0x20	; 32
    3248:	9a 83       	std	Y+2, r25	; 0x02
    324a:	89 83       	std	Y+1, r24	; 0x01
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	9c 81       	ldd	r25, Y+4	; 0x04
    3250:	fc 01       	movw	r30, r24
    3252:	85 a1       	ldd	r24, Z+37	; 0x25
    3254:	96 a1       	ldd	r25, Z+38	; 0x26
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	09 f4       	brne	.+2      	; 0x325c <_ZN10NikType00319focusStackNextFrameEv+0x28>
    325a:	48 c0       	rjmp	.+144    	; 0x32ec <_ZN10NikType00319focusStackNextFrameEv+0xb8>
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	9c 81       	ldd	r25, Y+4	; 0x04
    3260:	da dd       	rcall	.-1100   	; 0x2e16 <_ZN10NikType00313captureToCardEv>
    3262:	9a 83       	std	Y+2, r25	; 0x02
    3264:	89 83       	std	Y+1, r24	; 0x01
    3266:	21 e0       	ldi	r18, 0x01	; 1
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	9a 81       	ldd	r25, Y+2	; 0x02
    326c:	81 30       	cpi	r24, 0x01	; 1
    326e:	f0 e2       	ldi	r31, 0x20	; 32
    3270:	9f 07       	cpc	r25, r31
    3272:	09 f0       	breq	.+2      	; 0x3276 <_ZN10NikType00319focusStackNextFrameEv+0x42>
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	22 23       	and	r18, r18
    3278:	d9 f0       	breq	.+54     	; 0x32b0 <_ZN10NikType00319focusStackNextFrameEv+0x7c>
    327a:	8b 81       	ldd	r24, Y+3	; 0x03
    327c:	9c 81       	ldd	r25, Y+4	; 0x04
    327e:	fc 01       	movw	r30, r24
    3280:	85 a1       	ldd	r24, Z+37	; 0x25
    3282:	96 a1       	ldd	r25, Z+38	; 0x26
    3284:	9c 01       	movw	r18, r24
    3286:	21 50       	subi	r18, 0x01	; 1
    3288:	31 09       	sbc	r19, r1
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	9c 81       	ldd	r25, Y+4	; 0x04
    328e:	fc 01       	movw	r30, r24
    3290:	36 a3       	std	Z+38, r19	; 0x26
    3292:	25 a3       	std	Z+37, r18	; 0x25
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	9c 81       	ldd	r25, Y+4	; 0x04
    3298:	fc 01       	movw	r30, r24
    329a:	85 a1       	ldd	r24, Z+37	; 0x25
    329c:	96 a1       	ldd	r25, Z+38	; 0x26
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	39 f4       	brne	.+14     	; 0x32b0 <_ZN10NikType00319focusStackNextFrameEv+0x7c>
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	fc 01       	movw	r30, r24
    32a8:	24 a1       	ldd	r18, Z+36	; 0x24
    32aa:	20 61       	ori	r18, 0x10	; 16
    32ac:	fc 01       	movw	r30, r24
    32ae:	24 a3       	std	Z+36, r18	; 0x24
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	9a 81       	ldd	r25, Y+2	; 0x02
    32b4:	81 30       	cpi	r24, 0x01	; 1
    32b6:	f0 e2       	ldi	r31, 0x20	; 32
    32b8:	9f 07       	cpc	r25, r31
    32ba:	69 f0       	breq	.+26     	; 0x32d6 <_ZN10NikType00319focusStackNextFrameEv+0xa2>
    32bc:	8c 30       	cpi	r24, 0x0C	; 12
    32be:	20 e2       	ldi	r18, 0x20	; 32
    32c0:	92 07       	cpc	r25, r18
    32c2:	51 f4       	brne	.+20     	; 0x32d8 <_ZN10NikType00319focusStackNextFrameEv+0xa4>
    32c4:	2d e9       	ldi	r18, 0x9D	; 157
    32c6:	32 e0       	ldi	r19, 0x02	; 2
    32c8:	80 91 04 01 	lds	r24, 0x0104
    32cc:	90 91 05 01 	lds	r25, 0x0105
    32d0:	b9 01       	movw	r22, r18
    32d2:	5a d3       	rcall	.+1716   	; 0x3988 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper>
    32d4:	01 c0       	rjmp	.+2      	; 0x32d8 <_ZN10NikType00319focusStackNextFrameEv+0xa4>
    32d6:	00 00       	nop
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	9a 81       	ldd	r25, Y+2	; 0x02
    32dc:	81 30       	cpi	r24, 0x01	; 1
    32de:	30 e2       	ldi	r19, 0x20	; 32
    32e0:	93 07       	cpc	r25, r19
    32e2:	19 f0       	breq	.+6      	; 0x32ea <_ZN10NikType00319focusStackNextFrameEv+0xb6>
    32e4:	8b 81       	ldd	r24, Y+3	; 0x03
    32e6:	9c 81       	ldd	r25, Y+4	; 0x04
    32e8:	23 d0       	rcall	.+70     	; 0x3330 <_ZN10NikType00316cancelFocusStackEv>
    32ea:	19 c0       	rjmp	.+50     	; 0x331e <_ZN10NikType00319focusStackNextFrameEv+0xea>
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	fc 01       	movw	r30, r24
    32f2:	24 a1       	ldd	r18, Z+36	; 0x24
    32f4:	27 7f       	andi	r18, 0xF7	; 247
    32f6:	fc 01       	movw	r30, r24
    32f8:	24 a3       	std	Z+36, r18	; 0x24
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	9c 81       	ldd	r25, Y+4	; 0x04
    32fe:	fc 01       	movw	r30, r24
    3300:	84 a1       	ldd	r24, Z+36	; 0x24
    3302:	80 71       	andi	r24, 0x10	; 16
    3304:	88 23       	and	r24, r24
    3306:	19 f0       	breq	.+6      	; 0x330e <_ZN10NikType00319focusStackNextFrameEv+0xda>
    3308:	8b 81       	ldd	r24, Y+3	; 0x03
    330a:	9c 81       	ldd	r25, Y+4	; 0x04
    330c:	29 d0       	rcall	.+82     	; 0x3360 <_ZN10NikType00320restoreOriginalFocusEv>
    330e:	80 91 00 01 	lds	r24, 0x0100
    3312:	90 91 01 01 	lds	r25, 0x0101
    3316:	bc 01       	movw	r22, r24
    3318:	8a e6       	ldi	r24, 0x6A	; 106
    331a:	92 e0       	ldi	r25, 0x02	; 2
    331c:	b7 d8       	rcall	.-3730   	; 0x248c <_ZN11MessagePump14setNextHandlerEP15IMessageHandler>
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	08 95       	ret

00003330 <_ZN10NikType00316cancelFocusStackEv>:
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	00 d0       	rcall	.+0      	; 0x3336 <_ZN10NikType00316cancelFocusStackEv+0x6>
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	9a 83       	std	Y+2, r25	; 0x02
    333c:	89 83       	std	Y+1, r24	; 0x01
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	9a 81       	ldd	r25, Y+2	; 0x02
    3342:	fc 01       	movw	r30, r24
    3344:	16 a2       	std	Z+38, r1	; 0x26
    3346:	15 a2       	std	Z+37, r1	; 0x25
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	9a 81       	ldd	r25, Y+2	; 0x02
    334c:	fc 01       	movw	r30, r24
    334e:	24 a1       	ldd	r18, Z+36	; 0x24
    3350:	27 7f       	andi	r18, 0xF7	; 247
    3352:	fc 01       	movw	r30, r24
    3354:	24 a3       	std	Z+36, r18	; 0x24
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <_ZN10NikType00320restoreOriginalFocusEv>:
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	cf 93       	push	r28
    3366:	df 93       	push	r29
    3368:	00 d0       	rcall	.+0      	; 0x336a <_ZN10NikType00320restoreOriginalFocusEv+0xa>
    336a:	00 d0       	rcall	.+0      	; 0x336c <_ZN10NikType00320restoreOriginalFocusEv+0xc>
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	9c 83       	std	Y+4, r25	; 0x04
    3372:	8b 83       	std	Y+3, r24	; 0x03
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	90 e2       	ldi	r25, 0x20	; 32
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	80 91 02 01 	lds	r24, 0x0102
    3380:	90 91 03 01 	lds	r25, 0x0103
    3384:	68 da       	rcall	.-2864   	; 0x2856 <_ZNK12SetupHandler15getRestoreFocusEv>
    3386:	88 23       	and	r24, r24
    3388:	09 f4       	brne	.+2      	; 0x338c <_ZN10NikType00320restoreOriginalFocusEv+0x2c>
    338a:	5f c0       	rjmp	.+190    	; 0x344a <_ZN10NikType00320restoreOriginalFocusEv+0xea>
    338c:	26 ea       	ldi	r18, 0xA6	; 166
    338e:	32 e0       	ldi	r19, 0x02	; 2
    3390:	80 91 04 01 	lds	r24, 0x0104
    3394:	90 91 05 01 	lds	r25, 0x0105
    3398:	b9 01       	movw	r22, r18
    339a:	f6 d2       	rcall	.+1516   	; 0x3988 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper>
    339c:	8b 81       	ldd	r24, Y+3	; 0x03
    339e:	9c 81       	ldd	r25, Y+4	; 0x04
    33a0:	61 e0       	ldi	r22, 0x01	; 1
    33a2:	f2 dc       	rcall	.-1564   	; 0x2d88 <_ZN10NikType00314enableLiveViewEb>
    33a4:	9a 83       	std	Y+2, r25	; 0x02
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	21 e0       	ldi	r18, 0x01	; 1
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	9a 81       	ldd	r25, Y+2	; 0x02
    33ae:	81 30       	cpi	r24, 0x01	; 1
    33b0:	30 e2       	ldi	r19, 0x20	; 32
    33b2:	93 07       	cpc	r25, r19
    33b4:	09 f0       	breq	.+2      	; 0x33b8 <_ZN10NikType00320restoreOriginalFocusEv+0x58>
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	22 23       	and	r18, r18
    33ba:	09 f4       	brne	.+2      	; 0x33be <_ZN10NikType00320restoreOriginalFocusEv+0x5e>
    33bc:	45 c0       	rjmp	.+138    	; 0x3448 <_ZN10NikType00320restoreOriginalFocusEv+0xe8>
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	9c 81       	ldd	r25, Y+4	; 0x04
    33c2:	68 ee       	ldi	r22, 0xE8	; 232
    33c4:	73 e0       	ldi	r23, 0x03	; 3
    33c6:	59 dc       	rcall	.-1870   	; 0x2c7a <_ZN10NikType00312waitForReadyEj>
    33c8:	9a 83       	std	Y+2, r25	; 0x02
    33ca:	89 83       	std	Y+1, r24	; 0x01
    33cc:	21 e0       	ldi	r18, 0x01	; 1
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	9a 81       	ldd	r25, Y+2	; 0x02
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	e0 e2       	ldi	r30, 0x20	; 32
    33d6:	9e 07       	cpc	r25, r30
    33d8:	09 f0       	breq	.+2      	; 0x33dc <_ZN10NikType00320restoreOriginalFocusEv+0x7c>
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	22 23       	and	r18, r18
    33de:	a1 f1       	breq	.+104    	; 0x3448 <_ZN10NikType00320restoreOriginalFocusEv+0xe8>
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	9c 81       	ldd	r25, Y+4	; 0x04
    33e4:	fc 01       	movw	r30, r24
    33e6:	87 a1       	ldd	r24, Z+39	; 0x27
    33e8:	90 a5       	ldd	r25, Z+40	; 0x28
    33ea:	a1 a5       	ldd	r26, Z+41	; 0x29
    33ec:	b2 a5       	ldd	r27, Z+42	; 0x2a
    33ee:	eb 81       	ldd	r30, Y+3	; 0x03
    33f0:	fc 81       	ldd	r31, Y+4	; 0x04
    33f2:	8c 01       	movw	r16, r24
    33f4:	9d 01       	movw	r18, r26
    33f6:	41 e0       	ldi	r20, 0x01	; 1
    33f8:	50 e0       	ldi	r21, 0x00	; 0
    33fa:	60 e0       	ldi	r22, 0x00	; 0
    33fc:	70 e0       	ldi	r23, 0x00	; 0
    33fe:	cf 01       	movw	r24, r30
    3400:	7e dd       	rcall	.-1284   	; 0x2efe <_ZN10NikType0039moveFocusEmm>
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	21 e0       	ldi	r18, 0x01	; 1
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	9a 81       	ldd	r25, Y+2	; 0x02
    340c:	81 30       	cpi	r24, 0x01	; 1
    340e:	f0 e2       	ldi	r31, 0x20	; 32
    3410:	9f 07       	cpc	r25, r31
    3412:	09 f0       	breq	.+2      	; 0x3416 <_ZN10NikType00320restoreOriginalFocusEv+0xb6>
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	22 23       	and	r18, r18
    3418:	b9 f0       	breq	.+46     	; 0x3448 <_ZN10NikType00320restoreOriginalFocusEv+0xe8>
    341a:	8b 81       	ldd	r24, Y+3	; 0x03
    341c:	9c 81       	ldd	r25, Y+4	; 0x04
    341e:	68 ee       	ldi	r22, 0xE8	; 232
    3420:	73 e0       	ldi	r23, 0x03	; 3
    3422:	2b dc       	rcall	.-1962   	; 0x2c7a <_ZN10NikType00312waitForReadyEj>
    3424:	9a 83       	std	Y+2, r25	; 0x02
    3426:	89 83       	std	Y+1, r24	; 0x01
    3428:	21 e0       	ldi	r18, 0x01	; 1
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	9a 81       	ldd	r25, Y+2	; 0x02
    342e:	81 30       	cpi	r24, 0x01	; 1
    3430:	30 e2       	ldi	r19, 0x20	; 32
    3432:	93 07       	cpc	r25, r19
    3434:	09 f0       	breq	.+2      	; 0x3438 <_ZN10NikType00320restoreOriginalFocusEv+0xd8>
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	22 23       	and	r18, r18
    343a:	31 f0       	breq	.+12     	; 0x3448 <_ZN10NikType00320restoreOriginalFocusEv+0xe8>
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	9c 81       	ldd	r25, Y+4	; 0x04
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	a2 dc       	rcall	.-1724   	; 0x2d88 <_ZN10NikType00314enableLiveViewEb>
    3444:	9a 83       	std	Y+2, r25	; 0x02
    3446:	89 83       	std	Y+1, r24	; 0x01
    3448:	04 c0       	rjmp	.+8      	; 0x3452 <_ZN10NikType00320restoreOriginalFocusEv+0xf2>
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e2       	ldi	r25, 0x20	; 32
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	9a 81       	ldd	r25, Y+2	; 0x02
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	df 91       	pop	r29
    3460:	cf 91       	pop	r28
    3462:	1f 91       	pop	r17
    3464:	0f 91       	pop	r16
    3466:	08 95       	ret

00003468 <_ZN10NikType00314setIsConnectedEb>:
    3468:	cf 93       	push	r28
    346a:	df 93       	push	r29
    346c:	00 d0       	rcall	.+0      	; 0x346e <_ZN10NikType00314setIsConnectedEb+0x6>
    346e:	1f 92       	push	r1
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	9a 83       	std	Y+2, r25	; 0x02
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	6b 83       	std	Y+3, r22	; 0x03
    347a:	8b 81       	ldd	r24, Y+3	; 0x03
    347c:	28 2f       	mov	r18, r24
    347e:	21 70       	andi	r18, 0x01	; 1
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	9a 81       	ldd	r25, Y+2	; 0x02
    3484:	21 70       	andi	r18, 0x01	; 1
    3486:	fc 01       	movw	r30, r24
    3488:	34 a1       	ldd	r19, Z+36	; 0x24
    348a:	3e 7f       	andi	r19, 0xFE	; 254
    348c:	23 2b       	or	r18, r19
    348e:	fc 01       	movw	r30, r24
    3490:	24 a3       	std	Z+36, r18	; 0x24
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	0f 90       	pop	r0
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	08 95       	ret

0000349e <_ZNK10NikType00311isConnectedEv>:
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <_ZNK10NikType00311isConnectedEv+0x6>
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	9a 83       	std	Y+2, r25	; 0x02
    34aa:	89 83       	std	Y+1, r24	; 0x01
    34ac:	89 81       	ldd	r24, Y+1	; 0x01
    34ae:	9a 81       	ldd	r25, Y+2	; 0x02
    34b0:	fc 01       	movw	r30, r24
    34b2:	84 a1       	ldd	r24, Z+36	; 0x24
    34b4:	98 2f       	mov	r25, r24
    34b6:	91 70       	andi	r25, 0x01	; 1
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	99 23       	and	r25, r25
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <_ZNK10NikType00311isConnectedEv+0x22>
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	0f 90       	pop	r0
    34c2:	0f 90       	pop	r0
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	08 95       	ret

000034ca <_ZNK10NikType00319isCaptureInProgressEv>:
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	00 d0       	rcall	.+0      	; 0x34d0 <_ZNK10NikType00319isCaptureInProgressEv+0x6>
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	9a 81       	ldd	r25, Y+2	; 0x02
    34dc:	fc 01       	movw	r30, r24
    34de:	84 a1       	ldd	r24, Z+36	; 0x24
    34e0:	98 2f       	mov	r25, r24
    34e2:	94 70       	andi	r25, 0x04	; 4
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	99 23       	and	r25, r25
    34e8:	09 f4       	brne	.+2      	; 0x34ec <_ZNK10NikType00319isCaptureInProgressEv+0x22>
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	08 95       	ret

000034f6 <_ZNK10NikType00318isFocusStackActiveEv>:
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <_ZNK10NikType00318isFocusStackActiveEv+0x6>
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	9a 83       	std	Y+2, r25	; 0x02
    3502:	89 83       	std	Y+1, r24	; 0x01
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	9a 81       	ldd	r25, Y+2	; 0x02
    3508:	fc 01       	movw	r30, r24
    350a:	84 a1       	ldd	r24, Z+36	; 0x24
    350c:	98 2f       	mov	r25, r24
    350e:	98 70       	andi	r25, 0x08	; 8
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	99 23       	and	r25, r25
    3514:	09 f4       	brne	.+2      	; 0x3518 <_ZNK10NikType00318isFocusStackActiveEv+0x22>
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	df 91       	pop	r29
    351e:	cf 91       	pop	r28
    3520:	08 95       	ret

00003522 <_ZNK10NikType00318isNextFrameFocusedEv>:
    3522:	cf 93       	push	r28
    3524:	df 93       	push	r29
    3526:	00 d0       	rcall	.+0      	; 0x3528 <_ZNK10NikType00318isNextFrameFocusedEv+0x6>
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	9a 83       	std	Y+2, r25	; 0x02
    352e:	89 83       	std	Y+1, r24	; 0x01
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	9a 81       	ldd	r25, Y+2	; 0x02
    3534:	fc 01       	movw	r30, r24
    3536:	84 a1       	ldd	r24, Z+36	; 0x24
    3538:	98 2f       	mov	r25, r24
    353a:	90 72       	andi	r25, 0x20	; 32
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	99 23       	and	r25, r25
    3540:	09 f4       	brne	.+2      	; 0x3544 <_ZNK10NikType00318isNextFrameFocusedEv+0x22>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	08 95       	ret

0000354e <_ZNK10NikType00323getTimeLastCaptureStartEv>:
uint32_t NikType003::getTimeLastCaptureStart() const { return m_timeLastCapture; }
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	00 d0       	rcall	.+0      	; 0x3554 <_ZNK10NikType00323getTimeLastCaptureStartEv+0x6>
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	9a 83       	std	Y+2, r25	; 0x02
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	fc 01       	movw	r30, r24
    3562:	87 a5       	ldd	r24, Z+47	; 0x2f
    3564:	90 a9       	ldd	r25, Z+48	; 0x30
    3566:	a1 a9       	ldd	r26, Z+49	; 0x31
    3568:	b2 a9       	ldd	r27, Z+50	; 0x32
    356a:	bc 01       	movw	r22, r24
    356c:	cd 01       	movw	r24, r26
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	df 91       	pop	r29
    3574:	cf 91       	pop	r28
    3576:	08 95       	ret

00003578 <_ZThn26_N10NikType0037OnEventEPK7NKEvent>:
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	00 d0       	rcall	.+0      	; 0x357e <_ZThn26_N10NikType0037OnEventEPK7NKEvent+0x6>
    357e:	00 d0       	rcall	.+0      	; 0x3580 <_ZThn26_N10NikType0037OnEventEPK7NKEvent+0x8>
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	9a 83       	std	Y+2, r25	; 0x02
    3586:	89 83       	std	Y+1, r24	; 0x01
    3588:	7c 83       	std	Y+4, r23	; 0x04
    358a:	6b 83       	std	Y+3, r22	; 0x03
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	9a 81       	ldd	r25, Y+2	; 0x02
    3590:	4a 97       	sbiw	r24, 0x1a	; 26
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	2b 81       	ldd	r18, Y+3	; 0x03
    359c:	3c 81       	ldd	r19, Y+4	; 0x04
    359e:	b9 01       	movw	r22, r18
    35a0:	34 db       	rcall	.-2456   	; 0x2c0a <_ZN10NikType0037OnEventEPK7NKEvent>
    35a2:	0f 90       	pop	r0
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	08 95       	ret

000035b0 <_ZN16PTPStateHandlersC1Ev>:

class PTP;
class PTPReadParser;
class PTPDataSupplier;

class PTPStateHandlers
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	00 d0       	rcall	.+0      	; 0x35b6 <_ZN16PTPStateHandlersC1Ev+0x6>
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	9a 83       	std	Y+2, r25	; 0x02
    35bc:	89 83       	std	Y+1, r24	; 0x01
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	9a 81       	ldd	r25, Y+2	; 0x02
    35c2:	2e e3       	ldi	r18, 0x3E	; 62
    35c4:	32 e0       	ldi	r19, 0x02	; 2
    35c6:	fc 01       	movw	r30, r24
    35c8:	31 83       	std	Z+1, r19	; 0x01
    35ca:	20 83       	st	Z, r18
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	df 91       	pop	r29
    35d2:	cf 91       	pop	r28
    35d4:	08 95       	ret

000035d6 <_ZN22NikType003StateHandlerC1Ev>:
#include "MainMenu.h"
extern MainMenuHandler *g_pMain;
extern MessagePump g_pump;


NikType003StateHandler::NikType003StateHandler()
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	00 d0       	rcall	.+0      	; 0x35dc <_ZN22NikType003StateHandlerC1Ev+0x6>
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	9a 83       	std	Y+2, r25	; 0x02
    35e2:	89 83       	std	Y+1, r24	; 0x01
    : stateConnected(stInitial)
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	9a 81       	ldd	r25, Y+2	; 0x02
    35e8:	e3 df       	rcall	.-58     	; 0x35b0 <_ZN16PTPStateHandlersC1Ev>
    35ea:	89 81       	ldd	r24, Y+1	; 0x01
    35ec:	9a 81       	ldd	r25, Y+2	; 0x02
    35ee:	28 ec       	ldi	r18, 0xC8	; 200
    35f0:	31 e0       	ldi	r19, 0x01	; 1
    35f2:	fc 01       	movw	r30, r24
    35f4:	31 83       	std	Z+1, r19	; 0x01
    35f6:	20 83       	st	Z, r18
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	9a 81       	ldd	r25, Y+2	; 0x02
    35fc:	fc 01       	movw	r30, r24
    35fe:	12 82       	std	Z+2, r1	; 0x02
{}
    3600:	0f 90       	pop	r0
    3602:	0f 90       	pop	r0
    3604:	df 91       	pop	r29
    3606:	cf 91       	pop	r28
    3608:	08 95       	ret

0000360a <_ZN22NikType003StateHandler25OnDeviceDisconnectedStateEP3PTP>:

// Tells NikType003 that it's disconnected.
// Setup menu will function, but stack will be unavailable.
void NikType003StateHandler::OnDeviceDisconnectedState(PTP *ptp)
{
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	00 d0       	rcall	.+0      	; 0x3610 <_ZN22NikType003StateHandler25OnDeviceDisconnectedStateEP3PTP+0x6>
    3610:	00 d0       	rcall	.+0      	; 0x3612 <_ZN22NikType003StateHandler25OnDeviceDisconnectedStateEP3PTP+0x8>
    3612:	00 d0       	rcall	.+0      	; 0x3614 <_ZN22NikType003StateHandler25OnDeviceDisconnectedStateEP3PTP+0xa>
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	9c 83       	std	Y+4, r25	; 0x04
    361a:	8b 83       	std	Y+3, r24	; 0x03
    361c:	7e 83       	std	Y+6, r23	; 0x06
    361e:	6d 83       	std	Y+5, r22	; 0x05
    if ((stateConnected == stConnected || stateConnected == stInitial))
    3620:	8b 81       	ldd	r24, Y+3	; 0x03
    3622:	9c 81       	ldd	r25, Y+4	; 0x04
    3624:	fc 01       	movw	r30, r24
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	82 30       	cpi	r24, 0x02	; 2
    362a:	31 f0       	breq	.+12     	; 0x3638 <_ZN22NikType003StateHandler25OnDeviceDisconnectedStateEP3PTP+0x2e>
    362c:	8b 81       	ldd	r24, Y+3	; 0x03
    362e:	9c 81       	ldd	r25, Y+4	; 0x04
    3630:	fc 01       	movw	r30, r24
    3632:	82 81       	ldd	r24, Z+2	; 0x02
    3634:	88 23       	and	r24, r24
    3636:	b1 f4       	brne	.+44     	; 0x3664 <_ZN22NikType003StateHandler25OnDeviceDisconnectedStateEP3PTP+0x5a>
    {
        stateConnected = stDisconnected;
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	9c 81       	ldd	r25, Y+4	; 0x04
    363c:	21 e0       	ldi	r18, 0x01	; 1
    363e:	fc 01       	movw	r30, r24
    3640:	22 83       	std	Z+2, r18	; 0x02
        NikType003 *nk3 = reinterpret_cast<NikType003*>(ptp);
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	9a 83       	std	Y+2, r25	; 0x02
    3648:	89 83       	std	Y+1, r24	; 0x01
        nk3->setIsConnected(false);
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9a 81       	ldd	r25, Y+2	; 0x02
    364e:	60 e0       	ldi	r22, 0x00	; 0
    3650:	0b df       	rcall	.-490    	; 0x3468 <_ZN10NikType00314setIsConnectedEb>
        g_pump.setNextHandler(g_pMain);
    3652:	80 91 00 01 	lds	r24, 0x0100
    3656:	90 91 01 01 	lds	r25, 0x0101
    365a:	bc 01       	movw	r22, r24
    365c:	8a e6       	ldi	r24, 0x6A	; 106
    365e:	92 e0       	ldi	r25, 0x02	; 2
    3660:	0e 94 46 12 	call	0x248c	; 0x248c <_ZN11MessagePump14setNextHandlerEP15IMessageHandler>
    }
}
    3664:	26 96       	adiw	r28, 0x06	; 6
    3666:	0f b6       	in	r0, 0x3f	; 63
    3668:	f8 94       	cli
    366a:	de bf       	out	0x3e, r29	; 62
    366c:	0f be       	out	0x3f, r0	; 63
    366e:	cd bf       	out	0x3d, r28	; 61
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	08 95       	ret

00003676 <_ZN22NikType003StateHandler24OnDeviceInitializedStateEP3PTP>:
// Tells NikType003 that it's connected
// Both setup & stack will function.
void NikType003StateHandler::OnDeviceInitializedState(PTP *ptp)
{
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	00 d0       	rcall	.+0      	; 0x367c <_ZN22NikType003StateHandler24OnDeviceInitializedStateEP3PTP+0x6>
    367c:	00 d0       	rcall	.+0      	; 0x367e <_ZN22NikType003StateHandler24OnDeviceInitializedStateEP3PTP+0x8>
    367e:	00 d0       	rcall	.+0      	; 0x3680 <_ZN22NikType003StateHandler24OnDeviceInitializedStateEP3PTP+0xa>
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	9c 83       	std	Y+4, r25	; 0x04
    3686:	8b 83       	std	Y+3, r24	; 0x03
    3688:	7e 83       	std	Y+6, r23	; 0x06
    368a:	6d 83       	std	Y+5, r22	; 0x05
    if ((stateConnected == stDisconnected || stateConnected == stInitial))
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	9c 81       	ldd	r25, Y+4	; 0x04
    3690:	fc 01       	movw	r30, r24
    3692:	82 81       	ldd	r24, Z+2	; 0x02
    3694:	81 30       	cpi	r24, 0x01	; 1
    3696:	31 f0       	breq	.+12     	; 0x36a4 <_ZN22NikType003StateHandler24OnDeviceInitializedStateEP3PTP+0x2e>
    3698:	8b 81       	ldd	r24, Y+3	; 0x03
    369a:	9c 81       	ldd	r25, Y+4	; 0x04
    369c:	fc 01       	movw	r30, r24
    369e:	82 81       	ldd	r24, Z+2	; 0x02
    36a0:	88 23       	and	r24, r24
    36a2:	b1 f4       	brne	.+44     	; 0x36d0 <_ZN22NikType003StateHandler24OnDeviceInitializedStateEP3PTP+0x5a>
    {
        stateConnected = stConnected;
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	9c 81       	ldd	r25, Y+4	; 0x04
    36a8:	22 e0       	ldi	r18, 0x02	; 2
    36aa:	fc 01       	movw	r30, r24
    36ac:	22 83       	std	Z+2, r18	; 0x02
        NikType003 *nk3 = reinterpret_cast<NikType003*>(ptp);
    36ae:	8d 81       	ldd	r24, Y+5	; 0x05
    36b0:	9e 81       	ldd	r25, Y+6	; 0x06
    36b2:	9a 83       	std	Y+2, r25	; 0x02
    36b4:	89 83       	std	Y+1, r24	; 0x01
        nk3->setIsConnected(true);
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ba:	61 e0       	ldi	r22, 0x01	; 1
    36bc:	d5 de       	rcall	.-598    	; 0x3468 <_ZN10NikType00314setIsConnectedEb>
        g_pump.setNextHandler(g_pMain);
    36be:	80 91 00 01 	lds	r24, 0x0100
    36c2:	90 91 01 01 	lds	r25, 0x0101
    36c6:	bc 01       	movw	r22, r24
    36c8:	8a e6       	ldi	r24, 0x6A	; 106
    36ca:	92 e0       	ldi	r25, 0x02	; 2
    36cc:	0e 94 46 12 	call	0x248c	; 0x248c <_ZN11MessagePump14setNextHandlerEP15IMessageHandler>
    }
}
    36d0:	26 96       	adiw	r28, 0x06	; 6
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	08 95       	ret

000036e2 <_ZN15ReadButtonStateD1Ev>:

// Adapt reading a button to a HW implementation
class ReadButtonState
{
public:
	virtual ~ReadButtonState() {};
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	00 d0       	rcall	.+0      	; 0x36e8 <_ZN15ReadButtonStateD1Ev+0x6>
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	89 83       	std	Y+1, r24	; 0x01
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	24 ee       	ldi	r18, 0xE4	; 228
    36f6:	31 e0       	ldi	r19, 0x01	; 1
    36f8:	fc 01       	movw	r30, r24
    36fa:	31 83       	std	Z+1, r19	; 0x01
    36fc:	20 83       	st	Z, r18
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	00 97       	sbiw	r24, 0x00	; 0
    3704:	21 f0       	breq	.+8      	; 0x370e <_ZN15ReadButtonStateD1Ev+0x2c>
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	9a 81       	ldd	r25, Y+2	; 0x02
    370a:	0e 94 1e 2b 	call	0x563c	; 0x563c <_ZdlPv>
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	08 95       	ret

00003718 <_ZN15ReadButtonStateD0Ev>:
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	00 d0       	rcall	.+0      	; 0x371e <_ZN15ReadButtonStateD0Ev+0x6>
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	9a 83       	std	Y+2, r25	; 0x02
    3724:	89 83       	std	Y+1, r24	; 0x01
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	db df       	rcall	.-74     	; 0x36e2 <_ZN15ReadButtonStateD1Ev>
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	9a 81       	ldd	r25, Y+2	; 0x02
    3730:	0e 94 1e 2b 	call	0x563c	; 0x563c <_ZdlPv>
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	df 91       	pop	r29
    373a:	cf 91       	pop	r28
    373c:	08 95       	ret

0000373e <_ZN15ReadButtonStateC1Ev>:
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


// Adapt reading a button to a HW implementation
class ReadButtonState
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	00 d0       	rcall	.+0      	; 0x3744 <_ZN15ReadButtonStateC1Ev+0x6>
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
    3748:	9a 83       	std	Y+2, r25	; 0x02
    374a:	89 83       	std	Y+1, r24	; 0x01
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	9a 81       	ldd	r25, Y+2	; 0x02
    3750:	24 ee       	ldi	r18, 0xE4	; 228
    3752:	31 e0       	ldi	r19, 0x01	; 1
    3754:	fc 01       	movw	r30, r24
    3756:	31 83       	std	Z+1, r19	; 0x01
    3758:	20 83       	st	Z, r18
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	df 91       	pop	r29
    3760:	cf 91       	pop	r28
    3762:	08 95       	ret

00003764 <_ZN26ReadAdaFruitLcdButtonStateC1EP21Adafruit_RGBLCDShield>:


#include "ReadAdaFruitLcdButtonState.h"
#include "Adafruit_RGBLCDShield.h"

ReadAdaFruitLcdButtonState::ReadAdaFruitLcdButtonState(Adafruit_RGBLCDShield *lcdShield)
    3764:	cf 93       	push	r28
    3766:	df 93       	push	r29
    3768:	00 d0       	rcall	.+0      	; 0x376a <_ZN26ReadAdaFruitLcdButtonStateC1EP21Adafruit_RGBLCDShield+0x6>
    376a:	00 d0       	rcall	.+0      	; 0x376c <_ZN26ReadAdaFruitLcdButtonStateC1EP21Adafruit_RGBLCDShield+0x8>
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	9a 83       	std	Y+2, r25	; 0x02
    3772:	89 83       	std	Y+1, r24	; 0x01
    3774:	7c 83       	std	Y+4, r23	; 0x04
    3776:	6b 83       	std	Y+3, r22	; 0x03
	:
	m_lcdShield(lcdShield)
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	9a 81       	ldd	r25, Y+2	; 0x02
    377c:	e0 df       	rcall	.-64     	; 0x373e <_ZN15ReadButtonStateC1Ev>
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	9a 81       	ldd	r25, Y+2	; 0x02
    3782:	28 ed       	ldi	r18, 0xD8	; 216
    3784:	31 e0       	ldi	r19, 0x01	; 1
    3786:	fc 01       	movw	r30, r24
    3788:	31 83       	std	Z+1, r19	; 0x01
    378a:	20 83       	st	Z, r18
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	2b 81       	ldd	r18, Y+3	; 0x03
    3792:	3c 81       	ldd	r19, Y+4	; 0x04
    3794:	fc 01       	movw	r30, r24
    3796:	33 83       	std	Z+3, r19	; 0x03
    3798:	22 83       	std	Z+2, r18	; 0x02
{}
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	08 95       	ret

000037a8 <_ZN26ReadAdaFruitLcdButtonStateD1Ev>:
ReadAdaFruitLcdButtonState::~ReadAdaFruitLcdButtonState()
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	00 d0       	rcall	.+0      	; 0x37ae <_ZN26ReadAdaFruitLcdButtonStateD1Ev+0x6>
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	9a 83       	std	Y+2, r25	; 0x02
    37b4:	89 83       	std	Y+1, r24	; 0x01
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ba:	28 ed       	ldi	r18, 0xD8	; 216
    37bc:	31 e0       	ldi	r19, 0x01	; 1
    37be:	fc 01       	movw	r30, r24
    37c0:	31 83       	std	Z+1, r19	; 0x01
    37c2:	20 83       	st	Z, r18
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	9a 81       	ldd	r25, Y+2	; 0x02
    37c8:	8c df       	rcall	.-232    	; 0x36e2 <_ZN15ReadButtonStateD1Ev>
{}
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	00 97       	sbiw	r24, 0x00	; 0
    37d0:	21 f0       	breq	.+8      	; 0x37da <_ZN26ReadAdaFruitLcdButtonStateD1Ev+0x32>
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	9a 81       	ldd	r25, Y+2	; 0x02
    37d6:	0e 94 1e 2b 	call	0x563c	; 0x563c <_ZdlPv>
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	08 95       	ret

000037e4 <_ZN26ReadAdaFruitLcdButtonStateD0Ev>:

ReadAdaFruitLcdButtonState::ReadAdaFruitLcdButtonState(Adafruit_RGBLCDShield *lcdShield)
	:
	m_lcdShield(lcdShield)
{}
ReadAdaFruitLcdButtonState::~ReadAdaFruitLcdButtonState()
    37e4:	cf 93       	push	r28
    37e6:	df 93       	push	r29
    37e8:	00 d0       	rcall	.+0      	; 0x37ea <_ZN26ReadAdaFruitLcdButtonStateD0Ev+0x6>
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
    37ee:	9a 83       	std	Y+2, r25	; 0x02
    37f0:	89 83       	std	Y+1, r24	; 0x01
{}
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	9a 81       	ldd	r25, Y+2	; 0x02
    37f6:	d8 df       	rcall	.-80     	; 0x37a8 <_ZN26ReadAdaFruitLcdButtonStateD1Ev>
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	9a 81       	ldd	r25, Y+2	; 0x02
    37fc:	0e 94 1e 2b 	call	0x563c	; 0x563c <_ZdlPv>
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	df 91       	pop	r29
    3806:	cf 91       	pop	r28
    3808:	08 95       	ret

0000380a <_ZN26ReadAdaFruitLcdButtonState9isPressedEh>:
// ReadButtonState impl
bool ReadAdaFruitLcdButtonState::isPressed(uint8_t button)
{
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	00 d0       	rcall	.+0      	; 0x3810 <_ZN26ReadAdaFruitLcdButtonState9isPressedEh+0x6>
    3810:	1f 92       	push	r1
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	9a 83       	std	Y+2, r25	; 0x02
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	6b 83       	std	Y+3, r22	; 0x03
	return 0 != (m_lcdShield->readButtons() & button);
    381c:	89 81       	ldd	r24, Y+1	; 0x01
    381e:	9a 81       	ldd	r25, Y+2	; 0x02
    3820:	fc 01       	movw	r30, r24
    3822:	82 81       	ldd	r24, Z+2	; 0x02
    3824:	93 81       	ldd	r25, Z+3	; 0x03
    3826:	0e 94 ad 09 	call	0x135a	; 0x135a <_ZN21Adafruit_RGBLCDShield11readButtonsEv>
    382a:	98 2f       	mov	r25, r24
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	98 23       	and	r25, r24
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	99 23       	and	r25, r25
    3834:	09 f4       	brne	.+2      	; 0x3838 <_ZN26ReadAdaFruitLcdButtonState9isPressedEh+0x2e>
    3836:	80 e0       	ldi	r24, 0x00	; 0
}
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	08 95       	ret

00003844 <_ZN26ReadAdaFruitLcdButtonState10setPinModeEhh>:
void ReadAdaFruitLcdButtonState::setPinMode(uint8_t button, uint8_t mode)
{
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	00 d0       	rcall	.+0      	; 0x384a <_ZN26ReadAdaFruitLcdButtonState10setPinModeEhh+0x6>
    384a:	00 d0       	rcall	.+0      	; 0x384c <_ZN26ReadAdaFruitLcdButtonState10setPinModeEhh+0x8>
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	6b 83       	std	Y+3, r22	; 0x03
    3856:	4c 83       	std	Y+4, r20	; 0x04
	// nothing todo, the shield library handles this.
    3858:	0f 90       	pop	r0
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	df 91       	pop	r29
    3862:	cf 91       	pop	r28
    3864:	08 95       	ret

00003866 <_ZN20RunFocusStackHandlerC1EP11MessagePump>:

#define FrameNumberPos 4
#define StatusPos 8
#define DelayPos 6

RunFocusStackHandler::RunFocusStackHandler(MessagePump *_pump)
    3866:	cf 93       	push	r28
    3868:	df 93       	push	r29
    386a:	00 d0       	rcall	.+0      	; 0x386c <_ZN20RunFocusStackHandlerC1EP11MessagePump+0x6>
    386c:	00 d0       	rcall	.+0      	; 0x386e <_ZN20RunFocusStackHandlerC1EP11MessagePump+0x8>
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	9a 83       	std	Y+2, r25	; 0x02
    3874:	89 83       	std	Y+1, r24	; 0x01
    3876:	7c 83       	std	Y+4, r23	; 0x04
    3878:	6b 83       	std	Y+3, r22	; 0x03
    :
    IMessageHandler(_pump)
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	9a 81       	ldd	r25, Y+2	; 0x02
    387e:	2b 81       	ldd	r18, Y+3	; 0x03
    3880:	3c 81       	ldd	r19, Y+4	; 0x04
    3882:	b9 01       	movw	r22, r18
    3884:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <_ZN15IMessageHandlerC1EP11MessagePump>
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	9a 81       	ldd	r25, Y+2	; 0x02
    388c:	20 ef       	ldi	r18, 0xF0	; 240
    388e:	31 e0       	ldi	r19, 0x01	; 1
    3890:	fc 01       	movw	r30, r24
    3892:	31 83       	std	Z+1, r19	; 0x01
    3894:	20 83       	st	Z, r18
{
    menu[0] = "Frm";
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	9a 81       	ldd	r25, Y+2	; 0x02
    389a:	2f e3       	ldi	r18, 0x3F	; 63
    389c:	31 e0       	ldi	r19, 0x01	; 1
    389e:	fc 01       	movw	r30, r24
    38a0:	35 83       	std	Z+5, r19	; 0x05
    38a2:	24 83       	std	Z+4, r18	; 0x04
	menu[1] = NULL;
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	fc 01       	movw	r30, r24
    38aa:	17 82       	std	Z+7, r1	; 0x07
    38ac:	16 82       	std	Z+6, r1	; 0x06
}
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	df 91       	pop	r29
    38b8:	cf 91       	pop	r28
    38ba:	08 95       	ret

000038bc <_ZN20RunFocusStackHandlerD1Ev>:

RunFocusStackHandler::~RunFocusStackHandler()
    38bc:	cf 93       	push	r28
    38be:	df 93       	push	r29
    38c0:	00 d0       	rcall	.+0      	; 0x38c2 <_ZN20RunFocusStackHandlerD1Ev+0x6>
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	9a 83       	std	Y+2, r25	; 0x02
    38c8:	89 83       	std	Y+1, r24	; 0x01
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	9a 81       	ldd	r25, Y+2	; 0x02
    38ce:	20 ef       	ldi	r18, 0xF0	; 240
    38d0:	31 e0       	ldi	r19, 0x01	; 1
    38d2:	fc 01       	movw	r30, r24
    38d4:	31 83       	std	Z+1, r19	; 0x01
    38d6:	20 83       	st	Z, r18
{
}
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	08 95       	ret

000038e2 <_ZN20RunFocusStackHandler14processMessageER3Msg>:

MsgResp RunFocusStackHandler::processMessage(Msg& msg)
{
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <_ZN20RunFocusStackHandler14processMessageER3Msg+0x6>
    38e8:	00 d0       	rcall	.+0      	; 0x38ea <_ZN20RunFocusStackHandler14processMessageER3Msg+0x8>
    38ea:	1f 92       	push	r1
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
    38f0:	9b 83       	std	Y+3, r25	; 0x03
    38f2:	8a 83       	std	Y+2, r24	; 0x02
    38f4:	7d 83       	std	Y+5, r23	; 0x05
    38f6:	6c 83       	std	Y+4, r22	; 0x04
    MsgResp rsp = eFail;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	89 83       	std	Y+1, r24	; 0x01
    if(eButtonActionPress == msg.m_type)
    38fc:	8c 81       	ldd	r24, Y+4	; 0x04
    38fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3900:	fc 01       	movw	r30, r24
    3902:	80 81       	ld	r24, Z
    3904:	91 81       	ldd	r25, Z+1	; 0x01
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	69 f4       	brne	.+26     	; 0x3924 <_ZN20RunFocusStackHandler14processMessageER3Msg+0x42>
    {
        nk3.cancelFocusStack();
    390a:	81 e2       	ldi	r24, 0x21	; 33
    390c:	93 e0       	ldi	r25, 0x03	; 3
    390e:	10 dd       	rcall	.-1504   	; 0x3330 <_ZN10NikType00316cancelFocusStackEv>
        msg.m_nextHandler = g_pMain;
    3910:	20 91 00 01 	lds	r18, 0x0100
    3914:	30 91 01 01 	lds	r19, 0x0101
    3918:	8c 81       	ldd	r24, Y+4	; 0x04
    391a:	9d 81       	ldd	r25, Y+5	; 0x05
    391c:	fc 01       	movw	r30, r24
    391e:	34 83       	std	Z+4, r19	; 0x04
    3920:	23 83       	std	Z+3, r18	; 0x03
        rsp = eSuccess;
    3922:	19 82       	std	Y+1, r1	; 0x01
    }
    return rsp;
    3924:	89 81       	ldd	r24, Y+1	; 0x01
}
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	0f 90       	pop	r0
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	08 95       	ret

00003936 <_ZN20RunFocusStackHandler4showEv>:
void RunFocusStackHandler::show()
{
    3936:	cf 93       	push	r28
    3938:	df 93       	push	r29
    393a:	00 d0       	rcall	.+0      	; 0x393c <_ZN20RunFocusStackHandler4showEv+0x6>
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
    3940:	9a 83       	std	Y+2, r25	; 0x02
    3942:	89 83       	std	Y+1, r24	; 0x01
	g_print->clear();
    3944:	80 91 0a 01 	lds	r24, 0x010A
    3948:	90 91 0b 01 	lds	r25, 0x010B
    394c:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN21Adafruit_RGBLCDShield5clearEv>
	g_print->setCursor(0, 0);
    3950:	80 91 0a 01 	lds	r24, 0x010A
    3954:	90 91 0b 01 	lds	r25, 0x010B
    3958:	40 e0       	ldi	r20, 0x00	; 0
    395a:	60 e0       	ldi	r22, 0x00	; 0
    395c:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	g_print->print(menu[0]);
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	9a 81       	ldd	r25, Y+2	; 0x02
    3964:	fc 01       	movw	r30, r24
    3966:	24 81       	ldd	r18, Z+4	; 0x04
    3968:	35 81       	ldd	r19, Z+5	; 0x05
    396a:	80 91 0a 01 	lds	r24, 0x010A
    396e:	90 91 0b 01 	lds	r25, 0x010B
    3972:	b9 01       	movw	r22, r18
    3974:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN5Print5printEPKc>
	nk3.startFocusStack();
    3978:	81 e2       	ldi	r24, 0x21	; 33
    397a:	93 e0       	ldi	r25, 0x03	; 3
    397c:	12 db       	rcall	.-2524   	; 0x2fa2 <_ZN10NikType00315startFocusStackEv>
}
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	df 91       	pop	r29
    3984:	cf 91       	pop	r28
    3986:	08 95       	ret

00003988 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper>:
void RunFocusStackHandler::reportStatus(const __FlashStringHelper* msg)
{
    3988:	cf 93       	push	r28
    398a:	df 93       	push	r29
    398c:	00 d0       	rcall	.+0      	; 0x398e <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper+0x6>
    398e:	00 d0       	rcall	.+0      	; 0x3990 <_ZN20RunFocusStackHandler12reportStatusEPK19__FlashStringHelper+0x8>
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
    3994:	9a 83       	std	Y+2, r25	; 0x02
    3996:	89 83       	std	Y+1, r24	; 0x01
    3998:	7c 83       	std	Y+4, r23	; 0x04
    399a:	6b 83       	std	Y+3, r22	; 0x03
	g_print->setCursor(StatusPos, 0);
    399c:	80 91 0a 01 	lds	r24, 0x010A
    39a0:	90 91 0b 01 	lds	r25, 0x010B
    39a4:	40 e0       	ldi	r20, 0x00	; 0
    39a6:	68 e0       	ldi	r22, 0x08	; 8
    39a8:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	g_print->print(F("       "));
    39ac:	2e ea       	ldi	r18, 0xAE	; 174
    39ae:	32 e0       	ldi	r19, 0x02	; 2
    39b0:	80 91 0a 01 	lds	r24, 0x010A
    39b4:	90 91 0b 01 	lds	r25, 0x010B
    39b8:	b9 01       	movw	r22, r18
    39ba:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
	g_print->setCursor(StatusPos, 0);
    39be:	80 91 0a 01 	lds	r24, 0x010A
    39c2:	90 91 0b 01 	lds	r25, 0x010B
    39c6:	40 e0       	ldi	r20, 0x00	; 0
    39c8:	68 e0       	ldi	r22, 0x08	; 8
    39ca:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	g_print->print(msg);
    39ce:	80 91 0a 01 	lds	r24, 0x010A
    39d2:	90 91 0b 01 	lds	r25, 0x010B
    39d6:	2b 81       	ldd	r18, Y+3	; 0x03
    39d8:	3c 81       	ldd	r19, Y+4	; 0x04
    39da:	b9 01       	movw	r22, r18
    39dc:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
}
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	08 95       	ret

000039ee <_ZN20RunFocusStackHandler11reportFrameEj>:
void RunFocusStackHandler::reportFrame(uint16_t frame)
{
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	00 d0       	rcall	.+0      	; 0x39f4 <_ZN20RunFocusStackHandler11reportFrameEj+0x6>
    39f4:	00 d0       	rcall	.+0      	; 0x39f6 <_ZN20RunFocusStackHandler11reportFrameEj+0x8>
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
    39fa:	9a 83       	std	Y+2, r25	; 0x02
    39fc:	89 83       	std	Y+1, r24	; 0x01
    39fe:	7c 83       	std	Y+4, r23	; 0x04
    3a00:	6b 83       	std	Y+3, r22	; 0x03
	g_print->setCursor(FrameNumberPos, 0);
    3a02:	80 91 0a 01 	lds	r24, 0x010A
    3a06:	90 91 0b 01 	lds	r25, 0x010B
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	64 e0       	ldi	r22, 0x04	; 4
    3a0e:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	g_print->print(F("    "));
    3a12:	26 eb       	ldi	r18, 0xB6	; 182
    3a14:	32 e0       	ldi	r19, 0x02	; 2
    3a16:	80 91 0a 01 	lds	r24, 0x010A
    3a1a:	90 91 0b 01 	lds	r25, 0x010B
    3a1e:	b9 01       	movw	r22, r18
    3a20:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
	g_print->setCursor(FrameNumberPos, 0);
    3a24:	80 91 0a 01 	lds	r24, 0x010A
    3a28:	90 91 0b 01 	lds	r25, 0x010B
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	64 e0       	ldi	r22, 0x04	; 4
    3a30:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	g_print->print(frame);
    3a34:	80 91 0a 01 	lds	r24, 0x010A
    3a38:	90 91 0b 01 	lds	r25, 0x010B
    3a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    3a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    3a40:	4a e0       	ldi	r20, 0x0A	; 10
    3a42:	50 e0       	ldi	r21, 0x00	; 0
    3a44:	b9 01       	movw	r22, r18
    3a46:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN5Print5printEji>
}
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	08 95       	ret

00003a58 <_ZN20RunFocusStackHandler11reportDelayEm>:
void RunFocusStackHandler::reportDelay(uint32_t milliseconds)
{
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
    3a60:	62 97       	sbiw	r28, 0x12	; 18
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	cd bf       	out	0x3d, r28	; 61
    3a6c:	9e 83       	std	Y+6, r25	; 0x06
    3a6e:	8d 83       	std	Y+5, r24	; 0x05
    3a70:	4f 83       	std	Y+7, r20	; 0x07
    3a72:	58 87       	std	Y+8, r21	; 0x08
    3a74:	69 87       	std	Y+9, r22	; 0x09
    3a76:	7a 87       	std	Y+10, r23	; 0x0a
	// milliseconds is current time
	uint32_t seconds = milliseconds / 1000;
    3a78:	8f 81       	ldd	r24, Y+7	; 0x07
    3a7a:	98 85       	ldd	r25, Y+8	; 0x08
    3a7c:	a9 85       	ldd	r26, Y+9	; 0x09
    3a7e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3a80:	28 ee       	ldi	r18, 0xE8	; 232
    3a82:	33 e0       	ldi	r19, 0x03	; 3
    3a84:	40 e0       	ldi	r20, 0x00	; 0
    3a86:	50 e0       	ldi	r21, 0x00	; 0
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__udivmodsi4>
    3a90:	da 01       	movw	r26, r20
    3a92:	c9 01       	movw	r24, r18
    3a94:	89 83       	std	Y+1, r24	; 0x01
    3a96:	9a 83       	std	Y+2, r25	; 0x02
    3a98:	ab 83       	std	Y+3, r26	; 0x03
    3a9a:	bc 83       	std	Y+4, r27	; 0x04
	nk3.getTimeLastCaptureStart();
    3a9c:	81 e2       	ldi	r24, 0x21	; 33
    3a9e:	93 e0       	ldi	r25, 0x03	; 3
    3aa0:	56 dd       	rcall	.-1364   	; 0x354e <_ZNK10NikType00323getTimeLastCaptureStartEv>
	resetLastUpdateTime();
    3aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa6:	74 d0       	rcall	.+232    	; 0x3b90 <_ZN20RunFocusStackHandler19resetLastUpdateTimeEv>
	g_print->setCursor(0, 1);
    3aa8:	80 91 0a 01 	lds	r24, 0x010A
    3aac:	90 91 0b 01 	lds	r25, 0x010B
    3ab0:	41 e0       	ldi	r20, 0x01	; 1
    3ab2:	60 e0       	ldi	r22, 0x00	; 0
    3ab4:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	if(seconds > 0)
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	9a 81       	ldd	r25, Y+2	; 0x02
    3abc:	ab 81       	ldd	r26, Y+3	; 0x03
    3abe:	bc 81       	ldd	r27, Y+4	; 0x04
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	a1 05       	cpc	r26, r1
    3ac4:	b1 05       	cpc	r27, r1
    3ac6:	e9 f1       	breq	.+122    	; 0x3b42 <_ZN20RunFocusStackHandler11reportDelayEm+0xea>
	{
		g_print->print(F("Delay"));
    3ac8:	2b eb       	ldi	r18, 0xBB	; 187
    3aca:	32 e0       	ldi	r19, 0x02	; 2
    3acc:	80 91 0a 01 	lds	r24, 0x010A
    3ad0:	90 91 0b 01 	lds	r25, 0x010B
    3ad4:	b9 01       	movw	r22, r18
    3ad6:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
		g_print->setCursor(DelayPos, 1);
    3ada:	80 91 0a 01 	lds	r24, 0x010A
    3ade:	90 91 0b 01 	lds	r25, 0x010B
    3ae2:	41 e0       	ldi	r20, 0x01	; 1
    3ae4:	66 e0       	ldi	r22, 0x06	; 6
    3ae6:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
		g_print->print(F("    "));
    3aea:	21 ec       	ldi	r18, 0xC1	; 193
    3aec:	32 e0       	ldi	r19, 0x02	; 2
    3aee:	80 91 0a 01 	lds	r24, 0x010A
    3af2:	90 91 0b 01 	lds	r25, 0x010B
    3af6:	b9 01       	movw	r22, r18
    3af8:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
		g_print->setCursor(DelayPos, 1);
    3afc:	80 91 0a 01 	lds	r24, 0x010A
    3b00:	90 91 0b 01 	lds	r25, 0x010B
    3b04:	41 e0       	ldi	r20, 0x01	; 1
    3b06:	66 e0       	ldi	r22, 0x06	; 6
    3b08:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
		g_print->print(milliseconds/1000);	
    3b0c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b0e:	98 85       	ldd	r25, Y+8	; 0x08
    3b10:	a9 85       	ldd	r26, Y+9	; 0x09
    3b12:	ba 85       	ldd	r27, Y+10	; 0x0a
    3b14:	28 ee       	ldi	r18, 0xE8	; 232
    3b16:	33 e0       	ldi	r19, 0x03	; 3
    3b18:	40 e0       	ldi	r20, 0x00	; 0
    3b1a:	50 e0       	ldi	r21, 0x00	; 0
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__udivmodsi4>
    3b24:	da 01       	movw	r26, r20
    3b26:	c9 01       	movw	r24, r18
    3b28:	20 91 0a 01 	lds	r18, 0x010A
    3b2c:	30 91 0b 01 	lds	r19, 0x010B
    3b30:	f9 01       	movw	r30, r18
    3b32:	2a e0       	ldi	r18, 0x0A	; 10
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	ac 01       	movw	r20, r24
    3b38:	bd 01       	movw	r22, r26
    3b3a:	cf 01       	movw	r24, r30
    3b3c:	0e 94 08 2c 	call	0x5810	; 0x5810 <_ZN5Print5printEmi>
    3b40:	09 c0       	rjmp	.+18     	; 0x3b54 <_ZN20RunFocusStackHandler11reportDelayEm+0xfc>
	}
	else
	{
		g_print->print(F("        "));
    3b42:	26 ec       	ldi	r18, 0xC6	; 198
    3b44:	32 e0       	ldi	r19, 0x02	; 2
    3b46:	80 91 0a 01 	lds	r24, 0x010A
    3b4a:	90 91 0b 01 	lds	r25, 0x010B
    3b4e:	b9 01       	movw	r22, r18
    3b50:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
	}
}
    3b54:	62 96       	adiw	r28, 0x12	; 18
    3b56:	0f b6       	in	r0, 0x3f	; 63
    3b58:	f8 94       	cli
    3b5a:	de bf       	out	0x3e, r29	; 62
    3b5c:	0f be       	out	0x3f, r0	; 63
    3b5e:	cd bf       	out	0x3d, r28	; 61
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret

00003b66 <_ZNK20RunFocusStackHandler17getLastUpdateTimeEv>:
unsigned long RunFocusStackHandler::getLastUpdateTime() const { return m_lastUpdateTime;}
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	00 d0       	rcall	.+0      	; 0x3b6c <_ZNK20RunFocusStackHandler17getLastUpdateTimeEv+0x6>
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	9a 83       	std	Y+2, r25	; 0x02
    3b72:	89 83       	std	Y+1, r24	; 0x01
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	9a 81       	ldd	r25, Y+2	; 0x02
    3b78:	fc 01       	movw	r30, r24
    3b7a:	86 85       	ldd	r24, Z+14	; 0x0e
    3b7c:	97 85       	ldd	r25, Z+15	; 0x0f
    3b7e:	a0 89       	ldd	r26, Z+16	; 0x10
    3b80:	b1 89       	ldd	r27, Z+17	; 0x11
    3b82:	bc 01       	movw	r22, r24
    3b84:	cd 01       	movw	r24, r26
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0
    3b8a:	df 91       	pop	r29
    3b8c:	cf 91       	pop	r28
    3b8e:	08 95       	ret

00003b90 <_ZN20RunFocusStackHandler19resetLastUpdateTimeEv>:
    3b90:	cf 93       	push	r28
    3b92:	df 93       	push	r29
    3b94:	00 d0       	rcall	.+0      	; 0x3b96 <_ZN20RunFocusStackHandler19resetLastUpdateTimeEv+0x6>
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	9a 83       	std	Y+2, r25	; 0x02
    3b9c:	89 83       	std	Y+1, r24	; 0x01
    3b9e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	29 81       	ldd	r18, Y+1	; 0x01
    3ba8:	3a 81       	ldd	r19, Y+2	; 0x02
    3baa:	f9 01       	movw	r30, r18
    3bac:	86 87       	std	Z+14, r24	; 0x0e
    3bae:	97 87       	std	Z+15, r25	; 0x0f
    3bb0:	a0 8b       	std	Z+16, r26	; 0x10
    3bb2:	b1 8b       	std	Z+17, r27	; 0x11
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	df 91       	pop	r29
    3bba:	cf 91       	pop	r28
    3bbc:	08 95       	ret

00003bbe <_ZN15IMessageHandler11setCaretColEh>:
    // Moves the caret row location.
    void setCaretCol(unsigned char col) { m_caretCol = col;}
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	00 d0       	rcall	.+0      	; 0x3bc4 <_ZN15IMessageHandler11setCaretColEh+0x6>
    3bc4:	1f 92       	push	r1
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    3bca:	9a 83       	std	Y+2, r25	; 0x02
    3bcc:	89 83       	std	Y+1, r24	; 0x01
    3bce:	6b 83       	std	Y+3, r22	; 0x03
    3bd0:	89 81       	ldd	r24, Y+1	; 0x01
    3bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	24 87       	std	Z+12, r18	; 0x0c
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	0f 90       	pop	r0
    3be0:	df 91       	pop	r29
    3be2:	cf 91       	pop	r28
    3be4:	08 95       	ret

00003be6 <_ZN12SetupHandlerC1EP11MessagePumpmm>:
#define RestoreFocusFieldStart 13
#define RestoreFocusFieldEnd 13



SetupHandler::SetupHandler(MessagePump *_pump, uint32_t driveAmount, uint32_t frames)
    3be6:	ef 92       	push	r14
    3be8:	ff 92       	push	r15
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	2c 97       	sbiw	r28, 0x0c	; 12
    3bf8:	0f b6       	in	r0, 0x3f	; 63
    3bfa:	f8 94       	cli
    3bfc:	de bf       	out	0x3e, r29	; 62
    3bfe:	0f be       	out	0x3f, r0	; 63
    3c00:	cd bf       	out	0x3d, r28	; 61
    3c02:	9a 83       	std	Y+2, r25	; 0x02
    3c04:	89 83       	std	Y+1, r24	; 0x01
    3c06:	7c 83       	std	Y+4, r23	; 0x04
    3c08:	6b 83       	std	Y+3, r22	; 0x03
    3c0a:	2d 83       	std	Y+5, r18	; 0x05
    3c0c:	3e 83       	std	Y+6, r19	; 0x06
    3c0e:	4f 83       	std	Y+7, r20	; 0x07
    3c10:	58 87       	std	Y+8, r21	; 0x08
    3c12:	e9 86       	std	Y+9, r14	; 0x09
    3c14:	fa 86       	std	Y+10, r15	; 0x0a
    3c16:	0b 87       	std	Y+11, r16	; 0x0b
    3c18:	1c 87       	std	Y+12, r17	; 0x0c
    :
    IMessageHandler(_pump),
    m_driveAmount(driveAmount),
    m_numFrames(frames),
	m_frameDelaySeconds(0),
	m_restoreFocus(false)
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
    3c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1e:	2b 81       	ldd	r18, Y+3	; 0x03
    3c20:	3c 81       	ldd	r19, Y+4	; 0x04
    3c22:	b9 01       	movw	r22, r18
    3c24:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <_ZN15IMessageHandlerC1EP11MessagePump>
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2c:	28 ef       	ldi	r18, 0xF8	; 248
    3c2e:	31 e0       	ldi	r19, 0x01	; 1
    3c30:	fc 01       	movw	r30, r24
    3c32:	31 83       	std	Z+1, r19	; 0x01
    3c34:	20 83       	st	Z, r18
    3c36:	8d 81       	ldd	r24, Y+5	; 0x05
    3c38:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3a:	af 81       	ldd	r26, Y+7	; 0x07
    3c3c:	b8 85       	ldd	r27, Y+8	; 0x08
    3c3e:	29 81       	ldd	r18, Y+1	; 0x01
    3c40:	3a 81       	ldd	r19, Y+2	; 0x02
    3c42:	f9 01       	movw	r30, r18
    3c44:	86 87       	std	Z+14, r24	; 0x0e
    3c46:	97 87       	std	Z+15, r25	; 0x0f
    3c48:	a0 8b       	std	Z+16, r26	; 0x10
    3c4a:	b1 8b       	std	Z+17, r27	; 0x11
    3c4c:	89 85       	ldd	r24, Y+9	; 0x09
    3c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c50:	ab 85       	ldd	r26, Y+11	; 0x0b
    3c52:	bc 85       	ldd	r27, Y+12	; 0x0c
    3c54:	29 81       	ldd	r18, Y+1	; 0x01
    3c56:	3a 81       	ldd	r19, Y+2	; 0x02
    3c58:	f9 01       	movw	r30, r18
    3c5a:	82 8b       	std	Z+18, r24	; 0x12
    3c5c:	93 8b       	std	Z+19, r25	; 0x13
    3c5e:	a4 8b       	std	Z+20, r26	; 0x14
    3c60:	b5 8b       	std	Z+21, r27	; 0x15
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	9a 81       	ldd	r25, Y+2	; 0x02
    3c66:	fc 01       	movw	r30, r24
    3c68:	16 8a       	std	Z+22, r1	; 0x16
    3c6a:	17 8a       	std	Z+23, r1	; 0x17
    3c6c:	10 8e       	std	Z+24, r1	; 0x18
    3c6e:	11 8e       	std	Z+25, r1	; 0x19
    3c70:	89 81       	ldd	r24, Y+1	; 0x01
    3c72:	9a 81       	ldd	r25, Y+2	; 0x02
    3c74:	fc 01       	movw	r30, r24
    3c76:	12 8e       	std	Z+26, r1	; 0x1a
{
    menu[0] = "Amt";
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7c:	23 e4       	ldi	r18, 0x43	; 67
    3c7e:	31 e0       	ldi	r19, 0x01	; 1
    3c80:	fc 01       	movw	r30, r24
    3c82:	35 83       	std	Z+5, r19	; 0x05
    3c84:	24 83       	std	Z+4, r18	; 0x04
    menu[1] = "Frm";
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8a:	27 e4       	ldi	r18, 0x47	; 71
    3c8c:	31 e0       	ldi	r19, 0x01	; 1
    3c8e:	fc 01       	movw	r30, r24
    3c90:	37 83       	std	Z+7, r19	; 0x07
    3c92:	26 83       	std	Z+6, r18	; 0x06
	menu[2] = "Dly";
    3c94:	89 81       	ldd	r24, Y+1	; 0x01
    3c96:	9a 81       	ldd	r25, Y+2	; 0x02
    3c98:	2b e4       	ldi	r18, 0x4B	; 75
    3c9a:	31 e0       	ldi	r19, 0x01	; 1
    3c9c:	fc 01       	movw	r30, r24
    3c9e:	31 87       	std	Z+9, r19	; 0x09
    3ca0:	20 87       	std	Z+8, r18	; 0x08
	menu[3] = "Rst";
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca6:	2f e4       	ldi	r18, 0x4F	; 79
    3ca8:	31 e0       	ldi	r19, 0x01	; 1
    3caa:	fc 01       	movw	r30, r24
    3cac:	33 87       	std	Z+11, r19	; 0x0b
    3cae:	22 87       	std	Z+10, r18	; 0x0a
};
    3cb0:	2c 96       	adiw	r28, 0x0c	; 12
    3cb2:	0f b6       	in	r0, 0x3f	; 63
    3cb4:	f8 94       	cli
    3cb6:	de bf       	out	0x3e, r29	; 62
    3cb8:	0f be       	out	0x3f, r0	; 63
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	df 91       	pop	r29
    3cbe:	cf 91       	pop	r28
    3cc0:	1f 91       	pop	r17
    3cc2:	0f 91       	pop	r16
    3cc4:	ff 90       	pop	r15
    3cc6:	ef 90       	pop	r14
    3cc8:	08 95       	ret

00003cca <_ZN12SetupHandlerD1Ev>:
SetupHandler::~SetupHandler()
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	00 d0       	rcall	.+0      	; 0x3cd0 <_ZN12SetupHandlerD1Ev+0x6>
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	9a 83       	std	Y+2, r25	; 0x02
    3cd6:	89 83       	std	Y+1, r24	; 0x01
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	9a 81       	ldd	r25, Y+2	; 0x02
    3cdc:	28 ef       	ldi	r18, 0xF8	; 248
    3cde:	31 e0       	ldi	r19, 0x01	; 1
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	31 83       	std	Z+1, r19	; 0x01
    3ce4:	20 83       	st	Z, r18
{}
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	08 95       	ret

00003cf0 <_ZN12SetupHandler12advanceCaretEh>:

void SetupHandler::advanceCaret(uint8_t dir) // -1 = left, 1 right. All other values ignored
{
    3cf0:	cf 93       	push	r28
    3cf2:	df 93       	push	r29
    3cf4:	00 d0       	rcall	.+0      	; 0x3cf6 <_ZN12SetupHandler12advanceCaretEh+0x6>
    3cf6:	00 d0       	rcall	.+0      	; 0x3cf8 <_ZN12SetupHandler12advanceCaretEh+0x8>
    3cf8:	cd b7       	in	r28, 0x3d	; 61
    3cfa:	de b7       	in	r29, 0x3e	; 62
    3cfc:	9b 83       	std	Y+3, r25	; 0x03
    3cfe:	8a 83       	std	Y+2, r24	; 0x02
    3d00:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char caretColumn = getCaretCol();
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	9b 81       	ldd	r25, Y+3	; 0x03
    3d06:	0e 94 06 10 	call	0x200c	; 0x200c <_ZNK15IMessageHandler11getCaretColEv>
    3d0a:	89 83       	std	Y+1, r24	; 0x01
	Serial.print("advanceCaret dir: "); Serial.print(dir); Serial.print(" from Column: "); Serial.print(caretColumn);
    3d0c:	63 e5       	ldi	r22, 0x53	; 83
    3d0e:	71 e0       	ldi	r23, 0x01	; 1
    3d10:	84 e7       	ldi	r24, 0x74	; 116
    3d12:	94 e0       	ldi	r25, 0x04	; 4
    3d14:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN5Print5printEPKc>
    3d18:	4a e0       	ldi	r20, 0x0A	; 10
    3d1a:	50 e0       	ldi	r21, 0x00	; 0
    3d1c:	6c 81       	ldd	r22, Y+4	; 0x04
    3d1e:	84 e7       	ldi	r24, 0x74	; 116
    3d20:	94 e0       	ldi	r25, 0x04	; 4
    3d22:	0e 94 19 2c 	call	0x5832	; 0x5832 <_ZN5Print5printEhi>
    3d26:	66 e6       	ldi	r22, 0x66	; 102
    3d28:	71 e0       	ldi	r23, 0x01	; 1
    3d2a:	84 e7       	ldi	r24, 0x74	; 116
    3d2c:	94 e0       	ldi	r25, 0x04	; 4
    3d2e:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN5Print5printEPKc>
    3d32:	4a e0       	ldi	r20, 0x0A	; 10
    3d34:	50 e0       	ldi	r21, 0x00	; 0
    3d36:	69 81       	ldd	r22, Y+1	; 0x01
    3d38:	84 e7       	ldi	r24, 0x74	; 116
    3d3a:	94 e0       	ldi	r25, 0x04	; 4
    3d3c:	0e 94 19 2c 	call	0x5832	; 0x5832 <_ZN5Print5printEhi>
	if(dir == 0xff)
    3d40:	8c 81       	ldd	r24, Y+4	; 0x04
    3d42:	8f 3f       	cpi	r24, 0xFF	; 255
    3d44:	21 f5       	brne	.+72     	; 0x3d8e <_ZN12SetupHandler12advanceCaretEh+0x9e>
	{
		switch(caretColumn)
    3d46:	89 81       	ldd	r24, Y+1	; 0x01
    3d48:	88 2f       	mov	r24, r24
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	85 30       	cpi	r24, 0x05	; 5
    3d4e:	91 05       	cpc	r25, r1
    3d50:	81 f0       	breq	.+32     	; 0x3d72 <_ZN12SetupHandler12advanceCaretEh+0x82>
    3d52:	86 30       	cpi	r24, 0x06	; 6
    3d54:	91 05       	cpc	r25, r1
    3d56:	1c f4       	brge	.+6      	; 0x3d5e <_ZN12SetupHandler12advanceCaretEh+0x6e>
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	41 f0       	breq	.+16     	; 0x3d6c <_ZN12SetupHandler12advanceCaretEh+0x7c>
    3d5c:	13 c0       	rjmp	.+38     	; 0x3d84 <_ZN12SetupHandler12advanceCaretEh+0x94>
    3d5e:	89 30       	cpi	r24, 0x09	; 9
    3d60:	91 05       	cpc	r25, r1
    3d62:	51 f0       	breq	.+20     	; 0x3d78 <_ZN12SetupHandler12advanceCaretEh+0x88>
    3d64:	8d 30       	cpi	r24, 0x0D	; 13
    3d66:	91 05       	cpc	r25, r1
    3d68:	51 f0       	breq	.+20     	; 0x3d7e <_ZN12SetupHandler12advanceCaretEh+0x8e>
    3d6a:	0c c0       	rjmp	.+24     	; 0x3d84 <_ZN12SetupHandler12advanceCaretEh+0x94>
		{
			case AmountFieldStart:			{ caretColumn = RestoreFocusFieldEnd; break;}
    3d6c:	8d e0       	ldi	r24, 0x0D	; 13
    3d6e:	89 83       	std	Y+1, r24	; 0x01
    3d70:	0d c0       	rjmp	.+26     	; 0x3d8c <_ZN12SetupHandler12advanceCaretEh+0x9c>
			case FrameFieldStart:			{ caretColumn = AmountFieldEnd; break;}
    3d72:	83 e0       	ldi	r24, 0x03	; 3
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	0a c0       	rjmp	.+20     	; 0x3d8c <_ZN12SetupHandler12advanceCaretEh+0x9c>
			case DelayFieldStart:			{ caretColumn = FrameFieldEnd; break;}
    3d78:	87 e0       	ldi	r24, 0x07	; 7
    3d7a:	89 83       	std	Y+1, r24	; 0x01
    3d7c:	07 c0       	rjmp	.+14     	; 0x3d8c <_ZN12SetupHandler12advanceCaretEh+0x9c>
			case RestoreFocusFieldStart:	{ caretColumn = DelayFieldEnd; break;}
    3d7e:	8b e0       	ldi	r24, 0x0B	; 11
    3d80:	89 83       	std	Y+1, r24	; 0x01
    3d82:	04 c0       	rjmp	.+8      	; 0x3d8c <_ZN12SetupHandler12advanceCaretEh+0x9c>
			default:						{ --caretColumn; break;}				
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
    3d86:	81 50       	subi	r24, 0x01	; 1
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	00 00       	nop
    3d8c:	26 c0       	rjmp	.+76     	; 0x3dda <_ZN12SetupHandler12advanceCaretEh+0xea>
		}
	}
	else if(dir == 1)
    3d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d90:	81 30       	cpi	r24, 0x01	; 1
    3d92:	19 f5       	brne	.+70     	; 0x3dda <_ZN12SetupHandler12advanceCaretEh+0xea>
	{
		switch(caretColumn)
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	88 2f       	mov	r24, r24
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	87 30       	cpi	r24, 0x07	; 7
    3d9c:	91 05       	cpc	r25, r1
    3d9e:	89 f0       	breq	.+34     	; 0x3dc2 <_ZN12SetupHandler12advanceCaretEh+0xd2>
    3da0:	88 30       	cpi	r24, 0x08	; 8
    3da2:	91 05       	cpc	r25, r1
    3da4:	24 f4       	brge	.+8      	; 0x3dae <_ZN12SetupHandler12advanceCaretEh+0xbe>
    3da6:	83 30       	cpi	r24, 0x03	; 3
    3da8:	91 05       	cpc	r25, r1
    3daa:	41 f0       	breq	.+16     	; 0x3dbc <_ZN12SetupHandler12advanceCaretEh+0xcc>
    3dac:	12 c0       	rjmp	.+36     	; 0x3dd2 <_ZN12SetupHandler12advanceCaretEh+0xe2>
    3dae:	8b 30       	cpi	r24, 0x0B	; 11
    3db0:	91 05       	cpc	r25, r1
    3db2:	51 f0       	breq	.+20     	; 0x3dc8 <_ZN12SetupHandler12advanceCaretEh+0xd8>
    3db4:	8d 30       	cpi	r24, 0x0D	; 13
    3db6:	91 05       	cpc	r25, r1
    3db8:	51 f0       	breq	.+20     	; 0x3dce <_ZN12SetupHandler12advanceCaretEh+0xde>
    3dba:	0b c0       	rjmp	.+22     	; 0x3dd2 <_ZN12SetupHandler12advanceCaretEh+0xe2>
		{
			case AmountFieldEnd:			{ caretColumn = FrameFieldStart; break;}
    3dbc:	85 e0       	ldi	r24, 0x05	; 5
    3dbe:	89 83       	std	Y+1, r24	; 0x01
    3dc0:	0c c0       	rjmp	.+24     	; 0x3dda <_ZN12SetupHandler12advanceCaretEh+0xea>
			case FrameFieldEnd:				{ caretColumn = DelayFieldStart; break;}
    3dc2:	89 e0       	ldi	r24, 0x09	; 9
    3dc4:	89 83       	std	Y+1, r24	; 0x01
    3dc6:	09 c0       	rjmp	.+18     	; 0x3dda <_ZN12SetupHandler12advanceCaretEh+0xea>
			case DelayFieldEnd:				{ caretColumn = RestoreFocusFieldStart; break;}
    3dc8:	8d e0       	ldi	r24, 0x0D	; 13
    3dca:	89 83       	std	Y+1, r24	; 0x01
    3dcc:	06 c0       	rjmp	.+12     	; 0x3dda <_ZN12SetupHandler12advanceCaretEh+0xea>
			case RestoreFocusFieldEnd:		{ caretColumn = AmountFieldStart; break;}
    3dce:	19 82       	std	Y+1, r1	; 0x01
    3dd0:	04 c0       	rjmp	.+8      	; 0x3dda <_ZN12SetupHandler12advanceCaretEh+0xea>
			default:						{ ++caretColumn; break;}
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	8f 5f       	subi	r24, 0xFF	; 255
    3dd6:	89 83       	std	Y+1, r24	; 0x01
    3dd8:	00 00       	nop
		}
	}
	moveCaret(caretColumn, 1);
    3dda:	8a 81       	ldd	r24, Y+2	; 0x02
    3ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dde:	41 e0       	ldi	r20, 0x01	; 1
    3de0:	69 81       	ldd	r22, Y+1	; 0x01
    3de2:	0e 94 0b 12 	call	0x2416	; 0x2416 <_ZN15IMessageHandler9moveCaretEhh>
	Serial.print(" to Column: "); Serial.print(caretColumn); Serial.println();
    3de6:	65 e7       	ldi	r22, 0x75	; 117
    3de8:	71 e0       	ldi	r23, 0x01	; 1
    3dea:	84 e7       	ldi	r24, 0x74	; 116
    3dec:	94 e0       	ldi	r25, 0x04	; 4
    3dee:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <_ZN5Print5printEPKc>
    3df2:	4a e0       	ldi	r20, 0x0A	; 10
    3df4:	50 e0       	ldi	r21, 0x00	; 0
    3df6:	69 81       	ldd	r22, Y+1	; 0x01
    3df8:	84 e7       	ldi	r24, 0x74	; 116
    3dfa:	94 e0       	ldi	r25, 0x04	; 4
    3dfc:	0e 94 19 2c 	call	0x5832	; 0x5832 <_ZN5Print5printEhi>
    3e00:	84 e7       	ldi	r24, 0x74	; 116
    3e02:	94 e0       	ldi	r25, 0x04	; 4
    3e04:	0e 94 87 2b 	call	0x570e	; 0x570e <_ZN5Print7printlnEv>
}
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	08 95       	ret

00003e16 <_ZN12SetupHandler14processMessageER3Msg>:

MsgResp SetupHandler::processMessage(Msg& msg)
{
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	6a 97       	sbiw	r28, 0x1a	; 26
    3e20:	0f b6       	in	r0, 0x3f	; 63
    3e22:	f8 94       	cli
    3e24:	de bf       	out	0x3e, r29	; 62
    3e26:	0f be       	out	0x3f, r0	; 63
    3e28:	cd bf       	out	0x3d, r28	; 61
    3e2a:	9c 87       	std	Y+12, r25	; 0x0c
    3e2c:	8b 87       	std	Y+11, r24	; 0x0b
    3e2e:	7e 87       	std	Y+14, r23	; 0x0e
    3e30:	6d 87       	std	Y+13, r22	; 0x0d
    MsgResp rsp = eFail;
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	89 83       	std	Y+1, r24	; 0x01
	if(eButtonActionPress != msg.m_type) return rsp;
    3e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	80 81       	ld	r24, Z
    3e3e:	91 81       	ldd	r25, Z+1	; 0x01
    3e40:	00 97       	sbiw	r24, 0x00	; 0
    3e42:	11 f0       	breq	.+4      	; 0x3e48 <_ZN12SetupHandler14processMessageER3Msg+0x32>
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	c4 c1       	rjmp	.+904    	; 0x41d0 <_ZN12SetupHandler14processMessageER3Msg+0x3ba>
	// the amount up or down some parameter will be changed
	unsigned char caretColumn = getCaretCol();
    3e48:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e4c:	0e 94 06 10 	call	0x200c	; 0x200c <_ZNK15IMessageHandler11getCaretColEv>
    3e50:	8a 83       	std	Y+2, r24	; 0x02
	int change = 0;
    3e52:	1c 82       	std	Y+4, r1	; 0x04
    3e54:	1b 82       	std	Y+3, r1	; 0x03
    // which button?
    switch(msg.m_code)
    3e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	82 81       	ldd	r24, Z+2	; 0x02
    3e5e:	88 2f       	mov	r24, r24
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	82 30       	cpi	r24, 0x02	; 2
    3e64:	91 05       	cpc	r25, r1
    3e66:	09 f4       	brne	.+2      	; 0x3e6a <_ZN12SetupHandler14processMessageER3Msg+0x54>
    3e68:	95 c0       	rjmp	.+298    	; 0x3f94 <_ZN12SetupHandler14processMessageER3Msg+0x17e>
    3e6a:	83 30       	cpi	r24, 0x03	; 3
    3e6c:	91 05       	cpc	r25, r1
    3e6e:	44 f4       	brge	.+16     	; 0x3e80 <_ZN12SetupHandler14processMessageER3Msg+0x6a>
    3e70:	00 97       	sbiw	r24, 0x00	; 0
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <_ZN12SetupHandler14processMessageER3Msg+0x60>
    3e74:	11 c1       	rjmp	.+546    	; 0x4098 <_ZN12SetupHandler14processMessageER3Msg+0x282>
    3e76:	81 30       	cpi	r24, 0x01	; 1
    3e78:	91 05       	cpc	r25, r1
    3e7a:	09 f4       	brne	.+2      	; 0x3e7e <_ZN12SetupHandler14processMessageER3Msg+0x68>
    3e7c:	12 c1       	rjmp	.+548    	; 0x40a2 <_ZN12SetupHandler14processMessageER3Msg+0x28c>
	            msg.m_nextHandler = g_pMain;
	            rsp = eSuccess;
            }
            break;
        } // eSelect handler
        default: break;
    3e7e:	a7 c1       	rjmp	.+846    	; 0x41ce <_ZN12SetupHandler14processMessageER3Msg+0x3b8>
	if(eButtonActionPress != msg.m_type) return rsp;
	// the amount up or down some parameter will be changed
	unsigned char caretColumn = getCaretCol();
	int change = 0;
    // which button?
    switch(msg.m_code)
    3e80:	83 30       	cpi	r24, 0x03	; 3
    3e82:	91 05       	cpc	r25, r1
    3e84:	29 f0       	breq	.+10     	; 0x3e90 <_ZN12SetupHandler14processMessageER3Msg+0x7a>
    3e86:	84 30       	cpi	r24, 0x04	; 4
    3e88:	91 05       	cpc	r25, r1
    3e8a:	09 f4       	brne	.+2      	; 0x3e8e <_ZN12SetupHandler14processMessageER3Msg+0x78>
    3e8c:	0f c1       	rjmp	.+542    	; 0x40ac <_ZN12SetupHandler14processMessageER3Msg+0x296>
	            msg.m_nextHandler = g_pMain;
	            rsp = eSuccess;
            }
            break;
        } // eSelect handler
        default: break;
    3e8e:	9f c1       	rjmp	.+830    	; 0x41ce <_ZN12SetupHandler14processMessageER3Msg+0x3b8>
    // which button?
    switch(msg.m_code)
    {
        case eDown:
        {
			if((caretColumn <= AmountFieldEnd) && (msg.m_type == eButtonActionPress))
    3e90:	8a 81       	ldd	r24, Y+2	; 0x02
    3e92:	84 30       	cpi	r24, 0x04	; 4
    3e94:	38 f5       	brcc	.+78     	; 0x3ee4 <_ZN12SetupHandler14processMessageER3Msg+0xce>
    3e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	80 81       	ld	r24, Z
    3e9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ea0:	00 97       	sbiw	r24, 0x00	; 0
    3ea2:	01 f5       	brne	.+64     	; 0x3ee4 <_ZN12SetupHandler14processMessageER3Msg+0xce>
			{
				// change amount entry
				change = -1000; // todo: consider a power of ten == AmountFieldEnd - AmountFieldStart + 1
    3ea4:	88 e1       	ldi	r24, 0x18	; 24
    3ea6:	9c ef       	ldi	r25, 0xFC	; 252
    3ea8:	9c 83       	std	Y+4, r25	; 0x04
    3eaa:	8b 83       	std	Y+3, r24	; 0x03
				while(caretColumn-- != AmountFieldStart)
    3eac:	0a c0       	rjmp	.+20     	; 0x3ec2 <_ZN12SetupHandler14processMessageER3Msg+0xac>
				{
					change /= 10;
    3eae:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb2:	2a e0       	ldi	r18, 0x0A	; 10
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	b9 01       	movw	r22, r18
    3eb8:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <__divmodhi4>
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	9c 83       	std	Y+4, r25	; 0x04
    3ec0:	8b 83       	std	Y+3, r24	; 0x03
        {
			if((caretColumn <= AmountFieldEnd) && (msg.m_type == eButtonActionPress))
			{
				// change amount entry
				change = -1000; // todo: consider a power of ten == AmountFieldEnd - AmountFieldStart + 1
				while(caretColumn-- != AmountFieldStart)
    3ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec4:	8f ef       	ldi	r24, 0xFF	; 255
    3ec6:	89 0f       	add	r24, r25
    3ec8:	8a 83       	std	Y+2, r24	; 0x02
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	99 23       	and	r25, r25
    3ece:	09 f4       	brne	.+2      	; 0x3ed2 <_ZN12SetupHandler14processMessageER3Msg+0xbc>
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	88 23       	and	r24, r24
    3ed4:	61 f7       	brne	.-40     	; 0x3eae <_ZN12SetupHandler14processMessageER3Msg+0x98>
				{
					change /= 10;
				}
				updateDriveAmountUI(change);
    3ed6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ed8:	3c 81       	ldd	r19, Y+4	; 0x04
    3eda:	8b 85       	ldd	r24, Y+11	; 0x0b
    3edc:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ede:	b9 01       	movw	r22, r18
    3ee0:	cb d1       	rcall	.+918    	; 0x4278 <_ZN12SetupHandler19updateDriveAmountUIEi>
    3ee2:	57 c0       	rjmp	.+174    	; 0x3f92 <_ZN12SetupHandler14processMessageER3Msg+0x17c>
			}
			else if((caretColumn >= FrameFieldStart) && (caretColumn <= FrameFieldEnd))
    3ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee6:	85 30       	cpi	r24, 0x05	; 5
    3ee8:	18 f1       	brcs	.+70     	; 0x3f30 <_ZN12SetupHandler14processMessageER3Msg+0x11a>
    3eea:	8a 81       	ldd	r24, Y+2	; 0x02
    3eec:	88 30       	cpi	r24, 0x08	; 8
    3eee:	00 f5       	brcc	.+64     	; 0x3f30 <_ZN12SetupHandler14processMessageER3Msg+0x11a>
			{
				change = -100;// todo: consider a power of ten == FrameFieldEnd - FrameFieldStart + 1
    3ef0:	8c e9       	ldi	r24, 0x9C	; 156
    3ef2:	9f ef       	ldi	r25, 0xFF	; 255
    3ef4:	9c 83       	std	Y+4, r25	; 0x04
    3ef6:	8b 83       	std	Y+3, r24	; 0x03
				while(caretColumn-- != FrameFieldStart)
    3ef8:	0a c0       	rjmp	.+20     	; 0x3f0e <_ZN12SetupHandler14processMessageER3Msg+0xf8>
				{
					change /= 10;
    3efa:	8b 81       	ldd	r24, Y+3	; 0x03
    3efc:	9c 81       	ldd	r25, Y+4	; 0x04
    3efe:	2a e0       	ldi	r18, 0x0A	; 10
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	b9 01       	movw	r22, r18
    3f04:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <__divmodhi4>
    3f08:	cb 01       	movw	r24, r22
    3f0a:	9c 83       	std	Y+4, r25	; 0x04
    3f0c:	8b 83       	std	Y+3, r24	; 0x03
				updateDriveAmountUI(change);
			}
			else if((caretColumn >= FrameFieldStart) && (caretColumn <= FrameFieldEnd))
			{
				change = -100;// todo: consider a power of ten == FrameFieldEnd - FrameFieldStart + 1
				while(caretColumn-- != FrameFieldStart)
    3f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f10:	8f ef       	ldi	r24, 0xFF	; 255
    3f12:	89 0f       	add	r24, r25
    3f14:	8a 83       	std	Y+2, r24	; 0x02
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	95 30       	cpi	r25, 0x05	; 5
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <_ZN12SetupHandler14processMessageER3Msg+0x108>
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
    3f1e:	88 23       	and	r24, r24
    3f20:	61 f7       	brne	.-40     	; 0x3efa <_ZN12SetupHandler14processMessageER3Msg+0xe4>
				{
					change /= 10;
				}
				updateFramesUI(change);
    3f22:	2b 81       	ldd	r18, Y+3	; 0x03
    3f24:	3c 81       	ldd	r19, Y+4	; 0x04
    3f26:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f28:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f2a:	b9 01       	movw	r22, r18
    3f2c:	72 d2       	rcall	.+1252   	; 0x4412 <_ZN12SetupHandler14updateFramesUIEi>
    3f2e:	31 c0       	rjmp	.+98     	; 0x3f92 <_ZN12SetupHandler14processMessageER3Msg+0x17c>
			}
			else if((caretColumn >= DelayFieldStart) && (caretColumn <= DelayFieldEnd))
    3f30:	8a 81       	ldd	r24, Y+2	; 0x02
    3f32:	89 30       	cpi	r24, 0x09	; 9
    3f34:	18 f1       	brcs	.+70     	; 0x3f7c <_ZN12SetupHandler14processMessageER3Msg+0x166>
    3f36:	8a 81       	ldd	r24, Y+2	; 0x02
    3f38:	8c 30       	cpi	r24, 0x0C	; 12
    3f3a:	00 f5       	brcc	.+64     	; 0x3f7c <_ZN12SetupHandler14processMessageER3Msg+0x166>
			{
				// todo: consider a power of ten == DelayFieldEnd - DelayFieldStart + 1
				change = -100;
    3f3c:	8c e9       	ldi	r24, 0x9C	; 156
    3f3e:	9f ef       	ldi	r25, 0xFF	; 255
    3f40:	9c 83       	std	Y+4, r25	; 0x04
    3f42:	8b 83       	std	Y+3, r24	; 0x03
				while(caretColumn-- != DelayFieldStart)
    3f44:	0a c0       	rjmp	.+20     	; 0x3f5a <_ZN12SetupHandler14processMessageER3Msg+0x144>
				{
					change /= 10;
    3f46:	8b 81       	ldd	r24, Y+3	; 0x03
    3f48:	9c 81       	ldd	r25, Y+4	; 0x04
    3f4a:	2a e0       	ldi	r18, 0x0A	; 10
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	b9 01       	movw	r22, r18
    3f50:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <__divmodhi4>
    3f54:	cb 01       	movw	r24, r22
    3f56:	9c 83       	std	Y+4, r25	; 0x04
    3f58:	8b 83       	std	Y+3, r24	; 0x03
			}
			else if((caretColumn >= DelayFieldStart) && (caretColumn <= DelayFieldEnd))
			{
				// todo: consider a power of ten == DelayFieldEnd - DelayFieldStart + 1
				change = -100;
				while(caretColumn-- != DelayFieldStart)
    3f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f5c:	8f ef       	ldi	r24, 0xFF	; 255
    3f5e:	89 0f       	add	r24, r25
    3f60:	8a 83       	std	Y+2, r24	; 0x02
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	99 30       	cpi	r25, 0x09	; 9
    3f66:	09 f4       	brne	.+2      	; 0x3f6a <_ZN12SetupHandler14processMessageER3Msg+0x154>
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	88 23       	and	r24, r24
    3f6c:	61 f7       	brne	.-40     	; 0x3f46 <_ZN12SetupHandler14processMessageER3Msg+0x130>
				{
					change /= 10;
				}
				updateFrameDelayUI(change);
    3f6e:	2b 81       	ldd	r18, Y+3	; 0x03
    3f70:	3c 81       	ldd	r19, Y+4	; 0x04
    3f72:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f74:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f76:	b9 01       	movw	r22, r18
    3f78:	19 d3       	rcall	.+1586   	; 0x45ac <_ZN12SetupHandler18updateFrameDelayUIEi>
    3f7a:	0b c0       	rjmp	.+22     	; 0x3f92 <_ZN12SetupHandler14processMessageER3Msg+0x17c>
			}
			else if((caretColumn >= RestoreFocusFieldStart) && (caretColumn <= RestoreFocusFieldEnd))
    3f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7e:	8d 30       	cpi	r24, 0x0D	; 13
    3f80:	40 f0       	brcs	.+16     	; 0x3f92 <_ZN12SetupHandler14processMessageER3Msg+0x17c>
    3f82:	8a 81       	ldd	r24, Y+2	; 0x02
    3f84:	8e 30       	cpi	r24, 0x0E	; 14
    3f86:	28 f4       	brcc	.+10     	; 0x3f92 <_ZN12SetupHandler14processMessageER3Msg+0x17c>
			{
				updateRestoreFocusUI(-1);
    3f88:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f8c:	6f ef       	ldi	r22, 0xFF	; 255
    3f8e:	7f ef       	ldi	r23, 0xFF	; 255
    3f90:	dd d3       	rcall	.+1978   	; 0x474c <_ZN12SetupHandler20updateRestoreFocusUIEi>
			}
            break;
    3f92:	1d c1       	rjmp	.+570    	; 0x41ce <_ZN12SetupHandler14processMessageER3Msg+0x3b8>
        }
        case eUp:
        {
			if((caretColumn <= AmountFieldEnd) && (msg.m_type == eButtonActionPress))
    3f94:	8a 81       	ldd	r24, Y+2	; 0x02
    3f96:	84 30       	cpi	r24, 0x04	; 4
    3f98:	38 f5       	brcc	.+78     	; 0x3fe8 <_ZN12SetupHandler14processMessageER3Msg+0x1d2>
    3f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	80 81       	ld	r24, Z
    3fa2:	91 81       	ldd	r25, Z+1	; 0x01
    3fa4:	00 97       	sbiw	r24, 0x00	; 0
    3fa6:	01 f5       	brne	.+64     	; 0x3fe8 <_ZN12SetupHandler14processMessageER3Msg+0x1d2>
			{
				// change amount entry
				change = 1000; // todo: consider a power of ten == AmountFieldEnd - AmountFieldStart + 1
    3fa8:	88 ee       	ldi	r24, 0xE8	; 232
    3faa:	93 e0       	ldi	r25, 0x03	; 3
    3fac:	9c 83       	std	Y+4, r25	; 0x04
    3fae:	8b 83       	std	Y+3, r24	; 0x03
				while(caretColumn-- != AmountFieldStart)
    3fb0:	0a c0       	rjmp	.+20     	; 0x3fc6 <_ZN12SetupHandler14processMessageER3Msg+0x1b0>
				{
					change /= 10;
    3fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb6:	2a e0       	ldi	r18, 0x0A	; 10
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	b9 01       	movw	r22, r18
    3fbc:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <__divmodhi4>
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	9c 83       	std	Y+4, r25	; 0x04
    3fc4:	8b 83       	std	Y+3, r24	; 0x03
        {
			if((caretColumn <= AmountFieldEnd) && (msg.m_type == eButtonActionPress))
			{
				// change amount entry
				change = 1000; // todo: consider a power of ten == AmountFieldEnd - AmountFieldStart + 1
				while(caretColumn-- != AmountFieldStart)
    3fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc8:	8f ef       	ldi	r24, 0xFF	; 255
    3fca:	89 0f       	add	r24, r25
    3fcc:	8a 83       	std	Y+2, r24	; 0x02
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	99 23       	and	r25, r25
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <_ZN12SetupHandler14processMessageER3Msg+0x1c0>
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	88 23       	and	r24, r24
    3fd8:	61 f7       	brne	.-40     	; 0x3fb2 <_ZN12SetupHandler14processMessageER3Msg+0x19c>
				{
					change /= 10;
				}
				updateDriveAmountUI(change);
    3fda:	2b 81       	ldd	r18, Y+3	; 0x03
    3fdc:	3c 81       	ldd	r19, Y+4	; 0x04
    3fde:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fe0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fe2:	b9 01       	movw	r22, r18
    3fe4:	49 d1       	rcall	.+658    	; 0x4278 <_ZN12SetupHandler19updateDriveAmountUIEi>
    3fe6:	57 c0       	rjmp	.+174    	; 0x4096 <_ZN12SetupHandler14processMessageER3Msg+0x280>
			}
			else if((caretColumn >= FrameFieldStart) && (caretColumn <= FrameFieldEnd))
    3fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fea:	85 30       	cpi	r24, 0x05	; 5
    3fec:	18 f1       	brcs	.+70     	; 0x4034 <_ZN12SetupHandler14processMessageER3Msg+0x21e>
    3fee:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff0:	88 30       	cpi	r24, 0x08	; 8
    3ff2:	00 f5       	brcc	.+64     	; 0x4034 <_ZN12SetupHandler14processMessageER3Msg+0x21e>
			{
				change = 100;// todo: consider a power of ten == FrameFieldEnd - FrameFieldStart + 1
    3ff4:	84 e6       	ldi	r24, 0x64	; 100
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	9c 83       	std	Y+4, r25	; 0x04
    3ffa:	8b 83       	std	Y+3, r24	; 0x03
				while(caretColumn-- != FrameFieldStart)
    3ffc:	0a c0       	rjmp	.+20     	; 0x4012 <_ZN12SetupHandler14processMessageER3Msg+0x1fc>
				{
					change /= 10;
    3ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    4000:	9c 81       	ldd	r25, Y+4	; 0x04
    4002:	2a e0       	ldi	r18, 0x0A	; 10
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	b9 01       	movw	r22, r18
    4008:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <__divmodhi4>
    400c:	cb 01       	movw	r24, r22
    400e:	9c 83       	std	Y+4, r25	; 0x04
    4010:	8b 83       	std	Y+3, r24	; 0x03
				updateDriveAmountUI(change);
			}
			else if((caretColumn >= FrameFieldStart) && (caretColumn <= FrameFieldEnd))
			{
				change = 100;// todo: consider a power of ten == FrameFieldEnd - FrameFieldStart + 1
				while(caretColumn-- != FrameFieldStart)
    4012:	9a 81       	ldd	r25, Y+2	; 0x02
    4014:	8f ef       	ldi	r24, 0xFF	; 255
    4016:	89 0f       	add	r24, r25
    4018:	8a 83       	std	Y+2, r24	; 0x02
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	95 30       	cpi	r25, 0x05	; 5
    401e:	09 f4       	brne	.+2      	; 0x4022 <_ZN12SetupHandler14processMessageER3Msg+0x20c>
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	88 23       	and	r24, r24
    4024:	61 f7       	brne	.-40     	; 0x3ffe <_ZN12SetupHandler14processMessageER3Msg+0x1e8>
				{
					change /= 10;
				}
				updateFramesUI(change);
    4026:	2b 81       	ldd	r18, Y+3	; 0x03
    4028:	3c 81       	ldd	r19, Y+4	; 0x04
    402a:	8b 85       	ldd	r24, Y+11	; 0x0b
    402c:	9c 85       	ldd	r25, Y+12	; 0x0c
    402e:	b9 01       	movw	r22, r18
    4030:	f0 d1       	rcall	.+992    	; 0x4412 <_ZN12SetupHandler14updateFramesUIEi>
    4032:	31 c0       	rjmp	.+98     	; 0x4096 <_ZN12SetupHandler14processMessageER3Msg+0x280>
			}
			else if((caretColumn >= DelayFieldStart) && (caretColumn <= DelayFieldEnd))
    4034:	8a 81       	ldd	r24, Y+2	; 0x02
    4036:	89 30       	cpi	r24, 0x09	; 9
    4038:	18 f1       	brcs	.+70     	; 0x4080 <_ZN12SetupHandler14processMessageER3Msg+0x26a>
    403a:	8a 81       	ldd	r24, Y+2	; 0x02
    403c:	8c 30       	cpi	r24, 0x0C	; 12
    403e:	00 f5       	brcc	.+64     	; 0x4080 <_ZN12SetupHandler14processMessageER3Msg+0x26a>
			{
				// todo: consider a power of ten == DelayFieldEnd - DelayFieldStart + 1
				change = 100;
    4040:	84 e6       	ldi	r24, 0x64	; 100
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	9c 83       	std	Y+4, r25	; 0x04
    4046:	8b 83       	std	Y+3, r24	; 0x03
				while(caretColumn-- != DelayFieldStart)
    4048:	0a c0       	rjmp	.+20     	; 0x405e <_ZN12SetupHandler14processMessageER3Msg+0x248>
				{
					change /= 10;
    404a:	8b 81       	ldd	r24, Y+3	; 0x03
    404c:	9c 81       	ldd	r25, Y+4	; 0x04
    404e:	2a e0       	ldi	r18, 0x0A	; 10
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	b9 01       	movw	r22, r18
    4054:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <__divmodhi4>
    4058:	cb 01       	movw	r24, r22
    405a:	9c 83       	std	Y+4, r25	; 0x04
    405c:	8b 83       	std	Y+3, r24	; 0x03
			}
			else if((caretColumn >= DelayFieldStart) && (caretColumn <= DelayFieldEnd))
			{
				// todo: consider a power of ten == DelayFieldEnd - DelayFieldStart + 1
				change = 100;
				while(caretColumn-- != DelayFieldStart)
    405e:	9a 81       	ldd	r25, Y+2	; 0x02
    4060:	8f ef       	ldi	r24, 0xFF	; 255
    4062:	89 0f       	add	r24, r25
    4064:	8a 83       	std	Y+2, r24	; 0x02
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	99 30       	cpi	r25, 0x09	; 9
    406a:	09 f4       	brne	.+2      	; 0x406e <_ZN12SetupHandler14processMessageER3Msg+0x258>
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	88 23       	and	r24, r24
    4070:	61 f7       	brne	.-40     	; 0x404a <_ZN12SetupHandler14processMessageER3Msg+0x234>
				{
					change /= 10;
				}
				updateFrameDelayUI(change);
    4072:	2b 81       	ldd	r18, Y+3	; 0x03
    4074:	3c 81       	ldd	r19, Y+4	; 0x04
    4076:	8b 85       	ldd	r24, Y+11	; 0x0b
    4078:	9c 85       	ldd	r25, Y+12	; 0x0c
    407a:	b9 01       	movw	r22, r18
    407c:	97 d2       	rcall	.+1326   	; 0x45ac <_ZN12SetupHandler18updateFrameDelayUIEi>
    407e:	0b c0       	rjmp	.+22     	; 0x4096 <_ZN12SetupHandler14processMessageER3Msg+0x280>
			}
			else if((caretColumn >= RestoreFocusFieldStart) && (caretColumn <= RestoreFocusFieldEnd))
    4080:	8a 81       	ldd	r24, Y+2	; 0x02
    4082:	8d 30       	cpi	r24, 0x0D	; 13
    4084:	40 f0       	brcs	.+16     	; 0x4096 <_ZN12SetupHandler14processMessageER3Msg+0x280>
    4086:	8a 81       	ldd	r24, Y+2	; 0x02
    4088:	8e 30       	cpi	r24, 0x0E	; 14
    408a:	28 f4       	brcc	.+10     	; 0x4096 <_ZN12SetupHandler14processMessageER3Msg+0x280>
			{
				updateRestoreFocusUI(1);
    408c:	8b 85       	ldd	r24, Y+11	; 0x0b
    408e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4090:	61 e0       	ldi	r22, 0x01	; 1
    4092:	70 e0       	ldi	r23, 0x00	; 0
    4094:	5b d3       	rcall	.+1718   	; 0x474c <_ZN12SetupHandler20updateRestoreFocusUIEi>
			}
			break;
    4096:	9b c0       	rjmp	.+310    	; 0x41ce <_ZN12SetupHandler14processMessageER3Msg+0x3b8>
		}
        case eLeft:
        {
			advanceCaret(-1);
    4098:	8b 85       	ldd	r24, Y+11	; 0x0b
    409a:	9c 85       	ldd	r25, Y+12	; 0x0c
    409c:	6f ef       	ldi	r22, 0xFF	; 255
    409e:	28 de       	rcall	.-944    	; 0x3cf0 <_ZN12SetupHandler12advanceCaretEh>
			break; 
    40a0:	96 c0       	rjmp	.+300    	; 0x41ce <_ZN12SetupHandler14processMessageER3Msg+0x3b8>
		
        }
        case eRight:
        {
            advanceCaret(1);
    40a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    40a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    40a6:	61 e0       	ldi	r22, 0x01	; 1
    40a8:	23 de       	rcall	.-954    	; 0x3cf0 <_ZN12SetupHandler12advanceCaretEh>
			break;
    40aa:	91 c0       	rjmp	.+290    	; 0x41ce <_ZN12SetupHandler14processMessageER3Msg+0x3b8>
        }
        case eSelect:
        {
            if(eButtonActionPress == msg.m_type)
    40ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    40ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    40b0:	fc 01       	movw	r30, r24
    40b2:	80 81       	ld	r24, Z
    40b4:	91 81       	ldd	r25, Z+1	; 0x01
    40b6:	00 97       	sbiw	r24, 0x00	; 0
    40b8:	09 f0       	breq	.+2      	; 0x40bc <_ZN12SetupHandler14processMessageER3Msg+0x2a6>
    40ba:	88 c0       	rjmp	.+272    	; 0x41cc <_ZN12SetupHandler14processMessageER3Msg+0x3b6>
            {
	            // write any settings to the eprom that have changed.
	            uint16_t savedFocusAmt = eeprom_read_word(&ePromFocusAmount);
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <__eerd_word_m328p>
    40c4:	9e 83       	std	Y+6, r25	; 0x06
    40c6:	8d 83       	std	Y+5, r24	; 0x05
	            if(savedFocusAmt != m_driveAmount)
    40c8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ca:	9e 81       	ldd	r25, Y+6	; 0x06
    40cc:	9c 01       	movw	r18, r24
    40ce:	40 e0       	ldi	r20, 0x00	; 0
    40d0:	50 e0       	ldi	r21, 0x00	; 0
    40d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    40d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    40d6:	fc 01       	movw	r30, r24
    40d8:	86 85       	ldd	r24, Z+14	; 0x0e
    40da:	97 85       	ldd	r25, Z+15	; 0x0f
    40dc:	a0 89       	ldd	r26, Z+16	; 0x10
    40de:	b1 89       	ldd	r27, Z+17	; 0x11
    40e0:	28 17       	cp	r18, r24
    40e2:	39 07       	cpc	r19, r25
    40e4:	4a 07       	cpc	r20, r26
    40e6:	5b 07       	cpc	r21, r27
    40e8:	61 f0       	breq	.+24     	; 0x4102 <_ZN12SetupHandler14processMessageER3Msg+0x2ec>
	            {
		            eeprom_write_word(&ePromFocusAmount, m_driveAmount);
    40ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    40ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    40ee:	fc 01       	movw	r30, r24
    40f0:	86 85       	ldd	r24, Z+14	; 0x0e
    40f2:	97 85       	ldd	r25, Z+15	; 0x0f
    40f4:	a0 89       	ldd	r26, Z+16	; 0x10
    40f6:	b1 89       	ldd	r27, Z+17	; 0x11
    40f8:	bc 01       	movw	r22, r24
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <__eewr_word_m328p>
	            }
				uint16_t savedFrameDelay = eeprom_read_word(&ePromFrameDelay);
    4102:	82 e0       	ldi	r24, 0x02	; 2
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	0e 94 36 3f 	call	0x7e6c	; 0x7e6c <__eerd_word_m328p>
    410a:	98 87       	std	Y+8, r25	; 0x08
    410c:	8f 83       	std	Y+7, r24	; 0x07
				if(savedFrameDelay != m_frameDelaySeconds)
    410e:	8f 81       	ldd	r24, Y+7	; 0x07
    4110:	98 85       	ldd	r25, Y+8	; 0x08
    4112:	9c 01       	movw	r18, r24
    4114:	40 e0       	ldi	r20, 0x00	; 0
    4116:	50 e0       	ldi	r21, 0x00	; 0
    4118:	8b 85       	ldd	r24, Y+11	; 0x0b
    411a:	9c 85       	ldd	r25, Y+12	; 0x0c
    411c:	fc 01       	movw	r30, r24
    411e:	86 89       	ldd	r24, Z+22	; 0x16
    4120:	97 89       	ldd	r25, Z+23	; 0x17
    4122:	a0 8d       	ldd	r26, Z+24	; 0x18
    4124:	b1 8d       	ldd	r27, Z+25	; 0x19
    4126:	28 17       	cp	r18, r24
    4128:	39 07       	cpc	r19, r25
    412a:	4a 07       	cpc	r20, r26
    412c:	5b 07       	cpc	r21, r27
    412e:	61 f0       	breq	.+24     	; 0x4148 <_ZN12SetupHandler14processMessageER3Msg+0x332>
				{
					eeprom_write_word(&ePromFrameDelay, m_frameDelaySeconds);
    4130:	8b 85       	ldd	r24, Y+11	; 0x0b
    4132:	9c 85       	ldd	r25, Y+12	; 0x0c
    4134:	fc 01       	movw	r30, r24
    4136:	86 89       	ldd	r24, Z+22	; 0x16
    4138:	97 89       	ldd	r25, Z+23	; 0x17
    413a:	a0 8d       	ldd	r26, Z+24	; 0x18
    413c:	b1 8d       	ldd	r27, Z+25	; 0x19
    413e:	bc 01       	movw	r22, r24
    4140:	82 e0       	ldi	r24, 0x02	; 2
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	0e 94 49 3f 	call	0x7e92	; 0x7e92 <__eewr_word_m328p>
				}
	            uint8_t savedNumFrames = eeprom_read_byte(&ePromNumFrames);
    4148:	84 e0       	ldi	r24, 0x04	; 4
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__eerd_byte_m328p>
    4150:	89 87       	std	Y+9, r24	; 0x09
	            if(savedNumFrames != m_numFrames)
    4152:	89 85       	ldd	r24, Y+9	; 0x09
    4154:	28 2f       	mov	r18, r24
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 e0       	ldi	r20, 0x00	; 0
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	8b 85       	ldd	r24, Y+11	; 0x0b
    415e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4160:	fc 01       	movw	r30, r24
    4162:	82 89       	ldd	r24, Z+18	; 0x12
    4164:	93 89       	ldd	r25, Z+19	; 0x13
    4166:	a4 89       	ldd	r26, Z+20	; 0x14
    4168:	b5 89       	ldd	r27, Z+21	; 0x15
    416a:	28 17       	cp	r18, r24
    416c:	39 07       	cpc	r19, r25
    416e:	4a 07       	cpc	r20, r26
    4170:	5b 07       	cpc	r21, r27
    4172:	61 f0       	breq	.+24     	; 0x418c <_ZN12SetupHandler14processMessageER3Msg+0x376>
	            {
		            eeprom_write_byte(&ePromNumFrames, m_numFrames);
    4174:	8b 85       	ldd	r24, Y+11	; 0x0b
    4176:	9c 85       	ldd	r25, Y+12	; 0x0c
    4178:	fc 01       	movw	r30, r24
    417a:	82 89       	ldd	r24, Z+18	; 0x12
    417c:	93 89       	ldd	r25, Z+19	; 0x13
    417e:	a4 89       	ldd	r26, Z+20	; 0x14
    4180:	b5 89       	ldd	r27, Z+21	; 0x15
    4182:	68 2f       	mov	r22, r24
    4184:	84 e0       	ldi	r24, 0x04	; 4
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <__eewr_byte_m328p>
	            }
				uint8_t savedRestoreFocus = eeprom_read_byte(&ePromRestoreFocus);
    418c:	85 e0       	ldi	r24, 0x05	; 5
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__eerd_byte_m328p>
    4194:	8a 87       	std	Y+10, r24	; 0x0a
				if(savedRestoreFocus != m_restoreFocus)
    4196:	8b 85       	ldd	r24, Y+11	; 0x0b
    4198:	9c 85       	ldd	r25, Y+12	; 0x0c
    419a:	fc 01       	movw	r30, r24
    419c:	82 8d       	ldd	r24, Z+26	; 0x1a
    419e:	98 2f       	mov	r25, r24
    41a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    41a2:	98 17       	cp	r25, r24
    41a4:	49 f0       	breq	.+18     	; 0x41b8 <_ZN12SetupHandler14processMessageER3Msg+0x3a2>
				{
					eeprom_write_byte(&ePromRestoreFocus, m_restoreFocus);
    41a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    41a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    41aa:	fc 01       	movw	r30, r24
    41ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    41ae:	68 2f       	mov	r22, r24
    41b0:	85 e0       	ldi	r24, 0x05	; 5
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <__eewr_byte_m328p>
				}
	            msg.m_nextHandler = g_pMain;
    41b8:	20 91 00 01 	lds	r18, 0x0100
    41bc:	30 91 01 01 	lds	r19, 0x0101
    41c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c4:	fc 01       	movw	r30, r24
    41c6:	34 83       	std	Z+4, r19	; 0x04
    41c8:	23 83       	std	Z+3, r18	; 0x03
	            rsp = eSuccess;
    41ca:	19 82       	std	Y+1, r1	; 0x01
            }
            break;
    41cc:	00 00       	nop
        } // eSelect handler
        default: break;
    }
    return rsp;
    41ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    41d0:	6a 96       	adiw	r28, 0x1a	; 26
    41d2:	0f b6       	in	r0, 0x3f	; 63
    41d4:	f8 94       	cli
    41d6:	de bf       	out	0x3e, r29	; 62
    41d8:	0f be       	out	0x3f, r0	; 63
    41da:	cd bf       	out	0x3d, r28	; 61
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	08 95       	ret

000041e2 <_ZN12SetupHandler4showEv>:

void SetupHandler::show()
{
    41e2:	cf 93       	push	r28
    41e4:	df 93       	push	r29
    41e6:	00 d0       	rcall	.+0      	; 0x41e8 <_ZN12SetupHandler4showEv+0x6>
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62
    41ec:	9a 83       	std	Y+2, r25	; 0x02
    41ee:	89 83       	std	Y+1, r24	; 0x01
	g_print->clear();
    41f0:	80 91 0a 01 	lds	r24, 0x010A
    41f4:	90 91 0b 01 	lds	r25, 0x010B
    41f8:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN21Adafruit_RGBLCDShield5clearEv>
	printMenuItem(AmountFieldStart, 0);
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4200:	40 e0       	ldi	r20, 0x00	; 0
    4202:	60 e0       	ldi	r22, 0x00	; 0
    4204:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN15IMessageHandler13printMenuItemEhh>
	printMenuItem(FrameFieldStart, 1);
    4208:	89 81       	ldd	r24, Y+1	; 0x01
    420a:	9a 81       	ldd	r25, Y+2	; 0x02
    420c:	41 e0       	ldi	r20, 0x01	; 1
    420e:	65 e0       	ldi	r22, 0x05	; 5
    4210:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN15IMessageHandler13printMenuItemEhh>
	printMenuItem(DelayFieldStart, 2);
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	42 e0       	ldi	r20, 0x02	; 2
    421a:	69 e0       	ldi	r22, 0x09	; 9
    421c:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN15IMessageHandler13printMenuItemEhh>
	printMenuItem(RestoreFocusFieldStart, 3);
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	9a 81       	ldd	r25, Y+2	; 0x02
    4224:	43 e0       	ldi	r20, 0x03	; 3
    4226:	6d e0       	ldi	r22, 0x0D	; 13
    4228:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN15IMessageHandler13printMenuItemEhh>
	m_caretCol = 0;
    422c:	89 81       	ldd	r24, Y+1	; 0x01
    422e:	9a 81       	ldd	r25, Y+2	; 0x02
    4230:	fc 01       	movw	r30, r24
    4232:	14 86       	std	Z+12, r1	; 0x0c
    updateDriveAmountUI(0); // 0: don't change, just show the current value
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	9a 81       	ldd	r25, Y+2	; 0x02
    4238:	60 e0       	ldi	r22, 0x00	; 0
    423a:	70 e0       	ldi	r23, 0x00	; 0
    423c:	1d d0       	rcall	.+58     	; 0x4278 <_ZN12SetupHandler19updateDriveAmountUIEi>
    updateFramesUI(0);      // 0: don't change, just show the current value
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	9a 81       	ldd	r25, Y+2	; 0x02
    4242:	60 e0       	ldi	r22, 0x00	; 0
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	e5 d0       	rcall	.+458    	; 0x4412 <_ZN12SetupHandler14updateFramesUIEi>
	updateFrameDelayUI(0);  // 0: don't change, just show the current value
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	9a 81       	ldd	r25, Y+2	; 0x02
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	ad d1       	rcall	.+858    	; 0x45ac <_ZN12SetupHandler18updateFrameDelayUIEi>
	updateRestoreFocusUI(0);
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	9a 81       	ldd	r25, Y+2	; 0x02
    4256:	60 e0       	ldi	r22, 0x00	; 0
    4258:	70 e0       	ldi	r23, 0x00	; 0
    425a:	78 d2       	rcall	.+1264   	; 0x474c <_ZN12SetupHandler20updateRestoreFocusUIEi>
    setCaretCol(0);
    425c:	89 81       	ldd	r24, Y+1	; 0x01
    425e:	9a 81       	ldd	r25, Y+2	; 0x02
    4260:	60 e0       	ldi	r22, 0x00	; 0
    4262:	ad dc       	rcall	.-1702   	; 0x3bbe <_ZN15IMessageHandler11setCaretColEh>
    showCaret(true);
    4264:	89 81       	ldd	r24, Y+1	; 0x01
    4266:	9a 81       	ldd	r25, Y+2	; 0x02
    4268:	61 e0       	ldi	r22, 0x01	; 1
    426a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <_ZN15IMessageHandler9showCaretEb>
}
    426e:	0f 90       	pop	r0
    4270:	0f 90       	pop	r0
    4272:	df 91       	pop	r29
    4274:	cf 91       	pop	r28
    4276:	08 95       	ret

00004278 <_ZN12SetupHandler19updateDriveAmountUIEi>:
void SetupHandler::updateDriveAmountUI(int change)
{
    4278:	cf 93       	push	r28
    427a:	df 93       	push	r29
    427c:	cd b7       	in	r28, 0x3d	; 61
    427e:	de b7       	in	r29, 0x3e	; 62
    4280:	2e 97       	sbiw	r28, 0x0e	; 14
    4282:	0f b6       	in	r0, 0x3f	; 63
    4284:	f8 94       	cli
    4286:	de bf       	out	0x3e, r29	; 62
    4288:	0f be       	out	0x3f, r0	; 63
    428a:	cd bf       	out	0x3d, r28	; 61
    428c:	98 87       	std	Y+8, r25	; 0x08
    428e:	8f 83       	std	Y+7, r24	; 0x07
    4290:	7a 87       	std	Y+10, r23	; 0x0a
    4292:	69 87       	std	Y+9, r22	; 0x09
	m_driveAmount += change;
    4294:	8f 81       	ldd	r24, Y+7	; 0x07
    4296:	98 85       	ldd	r25, Y+8	; 0x08
    4298:	fc 01       	movw	r30, r24
    429a:	26 85       	ldd	r18, Z+14	; 0x0e
    429c:	37 85       	ldd	r19, Z+15	; 0x0f
    429e:	40 89       	ldd	r20, Z+16	; 0x10
    42a0:	51 89       	ldd	r21, Z+17	; 0x11
    42a2:	89 85       	ldd	r24, Y+9	; 0x09
    42a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a6:	aa 27       	eor	r26, r26
    42a8:	97 fd       	sbrc	r25, 7
    42aa:	a0 95       	com	r26
    42ac:	ba 2f       	mov	r27, r26
    42ae:	82 0f       	add	r24, r18
    42b0:	93 1f       	adc	r25, r19
    42b2:	a4 1f       	adc	r26, r20
    42b4:	b5 1f       	adc	r27, r21
    42b6:	2f 81       	ldd	r18, Y+7	; 0x07
    42b8:	38 85       	ldd	r19, Y+8	; 0x08
    42ba:	f9 01       	movw	r30, r18
    42bc:	86 87       	std	Z+14, r24	; 0x0e
    42be:	97 87       	std	Z+15, r25	; 0x0f
    42c0:	a0 8b       	std	Z+16, r26	; 0x10
    42c2:	b1 8b       	std	Z+17, r27	; 0x11
	if(m_driveAmount < 1 ) m_driveAmount = 1;
    42c4:	8f 81       	ldd	r24, Y+7	; 0x07
    42c6:	98 85       	ldd	r25, Y+8	; 0x08
    42c8:	fc 01       	movw	r30, r24
    42ca:	86 85       	ldd	r24, Z+14	; 0x0e
    42cc:	97 85       	ldd	r25, Z+15	; 0x0f
    42ce:	a0 89       	ldd	r26, Z+16	; 0x10
    42d0:	b1 89       	ldd	r27, Z+17	; 0x11
    42d2:	18 16       	cp	r1, r24
    42d4:	19 06       	cpc	r1, r25
    42d6:	1a 06       	cpc	r1, r26
    42d8:	1b 06       	cpc	r1, r27
    42da:	5c f0       	brlt	.+22     	; 0x42f2 <_ZN12SetupHandler19updateDriveAmountUIEi+0x7a>
    42dc:	2f 81       	ldd	r18, Y+7	; 0x07
    42de:	38 85       	ldd	r19, Y+8	; 0x08
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	a0 e0       	ldi	r26, 0x00	; 0
    42e6:	b0 e0       	ldi	r27, 0x00	; 0
    42e8:	f9 01       	movw	r30, r18
    42ea:	86 87       	std	Z+14, r24	; 0x0e
    42ec:	97 87       	std	Z+15, r25	; 0x0f
    42ee:	a0 8b       	std	Z+16, r26	; 0x10
    42f0:	b1 8b       	std	Z+17, r27	; 0x11
    if(m_driveAmount > 9999) m_driveAmount = 9999;
    42f2:	8f 81       	ldd	r24, Y+7	; 0x07
    42f4:	98 85       	ldd	r25, Y+8	; 0x08
    42f6:	fc 01       	movw	r30, r24
    42f8:	86 85       	ldd	r24, Z+14	; 0x0e
    42fa:	97 85       	ldd	r25, Z+15	; 0x0f
    42fc:	a0 89       	ldd	r26, Z+16	; 0x10
    42fe:	b1 89       	ldd	r27, Z+17	; 0x11
    4300:	80 31       	cpi	r24, 0x10	; 16
    4302:	f7 e2       	ldi	r31, 0x27	; 39
    4304:	9f 07       	cpc	r25, r31
    4306:	a1 05       	cpc	r26, r1
    4308:	b1 05       	cpc	r27, r1
    430a:	5c f0       	brlt	.+22     	; 0x4322 <_ZN12SetupHandler19updateDriveAmountUIEi+0xaa>
    430c:	2f 81       	ldd	r18, Y+7	; 0x07
    430e:	38 85       	ldd	r19, Y+8	; 0x08
    4310:	8f e0       	ldi	r24, 0x0F	; 15
    4312:	97 e2       	ldi	r25, 0x27	; 39
    4314:	a0 e0       	ldi	r26, 0x00	; 0
    4316:	b0 e0       	ldi	r27, 0x00	; 0
    4318:	f9 01       	movw	r30, r18
    431a:	86 87       	std	Z+14, r24	; 0x0e
    431c:	97 87       	std	Z+15, r25	; 0x0f
    431e:	a0 8b       	std	Z+16, r26	; 0x10
    4320:	b1 8b       	std	Z+17, r27	; 0x11
	// set cursor based on how many digits are shown
	unsigned char digits = 0; 
    4322:	19 82       	std	Y+1, r1	; 0x01
	uint32_t val = m_driveAmount;
    4324:	8f 81       	ldd	r24, Y+7	; 0x07
    4326:	98 85       	ldd	r25, Y+8	; 0x08
    4328:	fc 01       	movw	r30, r24
    432a:	86 85       	ldd	r24, Z+14	; 0x0e
    432c:	97 85       	ldd	r25, Z+15	; 0x0f
    432e:	a0 89       	ldd	r26, Z+16	; 0x10
    4330:	b1 89       	ldd	r27, Z+17	; 0x11
    4332:	8a 83       	std	Y+2, r24	; 0x02
    4334:	9b 83       	std	Y+3, r25	; 0x03
    4336:	ac 83       	std	Y+4, r26	; 0x04
    4338:	bd 83       	std	Y+5, r27	; 0x05
	while(val > 0) 
    433a:	15 c0       	rjmp	.+42     	; 0x4366 <_ZN12SetupHandler19updateDriveAmountUIEi+0xee>
	{
		val /= 10;
    433c:	8a 81       	ldd	r24, Y+2	; 0x02
    433e:	9b 81       	ldd	r25, Y+3	; 0x03
    4340:	ac 81       	ldd	r26, Y+4	; 0x04
    4342:	bd 81       	ldd	r27, Y+5	; 0x05
    4344:	2a e0       	ldi	r18, 0x0A	; 10
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e0       	ldi	r20, 0x00	; 0
    434a:	50 e0       	ldi	r21, 0x00	; 0
    434c:	bc 01       	movw	r22, r24
    434e:	cd 01       	movw	r24, r26
    4350:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__udivmodsi4>
    4354:	da 01       	movw	r26, r20
    4356:	c9 01       	movw	r24, r18
    4358:	8a 83       	std	Y+2, r24	; 0x02
    435a:	9b 83       	std	Y+3, r25	; 0x03
    435c:	ac 83       	std	Y+4, r26	; 0x04
    435e:	bd 83       	std	Y+5, r27	; 0x05
		++digits;
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	8f 5f       	subi	r24, 0xFF	; 255
    4364:	89 83       	std	Y+1, r24	; 0x01
	if(m_driveAmount < 1 ) m_driveAmount = 1;
    if(m_driveAmount > 9999) m_driveAmount = 9999;
	// set cursor based on how many digits are shown
	unsigned char digits = 0; 
	uint32_t val = m_driveAmount;
	while(val > 0) 
    4366:	8a 81       	ldd	r24, Y+2	; 0x02
    4368:	9b 81       	ldd	r25, Y+3	; 0x03
    436a:	ac 81       	ldd	r26, Y+4	; 0x04
    436c:	bd 81       	ldd	r27, Y+5	; 0x05
    436e:	00 97       	sbiw	r24, 0x00	; 0
    4370:	a1 05       	cpc	r26, r1
    4372:	b1 05       	cpc	r27, r1
    4374:	19 f7       	brne	.-58     	; 0x433c <_ZN12SetupHandler19updateDriveAmountUIEi+0xc4>
	{
		val /= 10;
		++digits;
	}
    g_print->setCursor(AmountFieldStart, 1);
    4376:	80 91 0a 01 	lds	r24, 0x010A
    437a:	90 91 0b 01 	lds	r25, 0x010B
    437e:	41 e0       	ldi	r20, 0x01	; 1
    4380:	60 e0       	ldi	r22, 0x00	; 0
    4382:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	for(unsigned char z = 0; z < 4 - digits; z++) g_print->print(F("0"));
    4386:	1e 82       	std	Y+6, r1	; 0x06
    4388:	0c c0       	rjmp	.+24     	; 0x43a2 <_ZN12SetupHandler19updateDriveAmountUIEi+0x12a>
    438a:	2f ec       	ldi	r18, 0xCF	; 207
    438c:	32 e0       	ldi	r19, 0x02	; 2
    438e:	80 91 0a 01 	lds	r24, 0x010A
    4392:	90 91 0b 01 	lds	r25, 0x010B
    4396:	b9 01       	movw	r22, r18
    4398:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
    439c:	8e 81       	ldd	r24, Y+6	; 0x06
    439e:	8f 5f       	subi	r24, 0xFF	; 255
    43a0:	8e 83       	std	Y+6, r24	; 0x06
    43a2:	8e 81       	ldd	r24, Y+6	; 0x06
    43a4:	28 2f       	mov	r18, r24
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	88 2f       	mov	r24, r24
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	44 e0       	ldi	r20, 0x04	; 4
    43b0:	50 e0       	ldi	r21, 0x00	; 0
    43b2:	ba 01       	movw	r22, r20
    43b4:	68 1b       	sub	r22, r24
    43b6:	79 0b       	sbc	r23, r25
    43b8:	cb 01       	movw	r24, r22
    43ba:	28 17       	cp	r18, r24
    43bc:	39 07       	cpc	r19, r25
    43be:	2c f3       	brlt	.-54     	; 0x438a <_ZN12SetupHandler19updateDriveAmountUIEi+0x112>
    //g_print->print(F("0000"));
    
    g_print->print(m_driveAmount);
    43c0:	8f 81       	ldd	r24, Y+7	; 0x07
    43c2:	98 85       	ldd	r25, Y+8	; 0x08
    43c4:	fc 01       	movw	r30, r24
    43c6:	86 85       	ldd	r24, Z+14	; 0x0e
    43c8:	97 85       	ldd	r25, Z+15	; 0x0f
    43ca:	a0 89       	ldd	r26, Z+16	; 0x10
    43cc:	b1 89       	ldd	r27, Z+17	; 0x11
    43ce:	20 91 0a 01 	lds	r18, 0x010A
    43d2:	30 91 0b 01 	lds	r19, 0x010B
    43d6:	f9 01       	movw	r30, r18
    43d8:	2a e0       	ldi	r18, 0x0A	; 10
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	ac 01       	movw	r20, r24
    43de:	bd 01       	movw	r22, r26
    43e0:	cf 01       	movw	r24, r30
    43e2:	0e 94 36 2c 	call	0x586c	; 0x586c <_ZN5Print5printEli>
	g_print->setCursor(getCaretCol(), 1);
    43e6:	8f 81       	ldd	r24, Y+7	; 0x07
    43e8:	98 85       	ldd	r25, Y+8	; 0x08
    43ea:	0e 94 06 10 	call	0x200c	; 0x200c <_ZNK15IMessageHandler11getCaretColEv>
    43ee:	28 2f       	mov	r18, r24
    43f0:	80 91 0a 01 	lds	r24, 0x010A
    43f4:	90 91 0b 01 	lds	r25, 0x010B
    43f8:	41 e0       	ldi	r20, 0x01	; 1
    43fa:	62 2f       	mov	r22, r18
    43fc:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
}
    4400:	2e 96       	adiw	r28, 0x0e	; 14
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	de bf       	out	0x3e, r29	; 62
    4408:	0f be       	out	0x3f, r0	; 63
    440a:	cd bf       	out	0x3d, r28	; 61
    440c:	df 91       	pop	r29
    440e:	cf 91       	pop	r28
    4410:	08 95       	ret

00004412 <_ZN12SetupHandler14updateFramesUIEi>:
void SetupHandler::updateFramesUI(int change)
{
    4412:	cf 93       	push	r28
    4414:	df 93       	push	r29
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
    441a:	2e 97       	sbiw	r28, 0x0e	; 14
    441c:	0f b6       	in	r0, 0x3f	; 63
    441e:	f8 94       	cli
    4420:	de bf       	out	0x3e, r29	; 62
    4422:	0f be       	out	0x3f, r0	; 63
    4424:	cd bf       	out	0x3d, r28	; 61
    4426:	98 87       	std	Y+8, r25	; 0x08
    4428:	8f 83       	std	Y+7, r24	; 0x07
    442a:	7a 87       	std	Y+10, r23	; 0x0a
    442c:	69 87       	std	Y+9, r22	; 0x09
    m_numFrames += change;
    442e:	8f 81       	ldd	r24, Y+7	; 0x07
    4430:	98 85       	ldd	r25, Y+8	; 0x08
    4432:	fc 01       	movw	r30, r24
    4434:	22 89       	ldd	r18, Z+18	; 0x12
    4436:	33 89       	ldd	r19, Z+19	; 0x13
    4438:	44 89       	ldd	r20, Z+20	; 0x14
    443a:	55 89       	ldd	r21, Z+21	; 0x15
    443c:	89 85       	ldd	r24, Y+9	; 0x09
    443e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4440:	aa 27       	eor	r26, r26
    4442:	97 fd       	sbrc	r25, 7
    4444:	a0 95       	com	r26
    4446:	ba 2f       	mov	r27, r26
    4448:	82 0f       	add	r24, r18
    444a:	93 1f       	adc	r25, r19
    444c:	a4 1f       	adc	r26, r20
    444e:	b5 1f       	adc	r27, r21
    4450:	2f 81       	ldd	r18, Y+7	; 0x07
    4452:	38 85       	ldd	r19, Y+8	; 0x08
    4454:	f9 01       	movw	r30, r18
    4456:	82 8b       	std	Z+18, r24	; 0x12
    4458:	93 8b       	std	Z+19, r25	; 0x13
    445a:	a4 8b       	std	Z+20, r26	; 0x14
    445c:	b5 8b       	std	Z+21, r27	; 0x15
    if(m_numFrames < 1 ) m_numFrames = 1;
    445e:	8f 81       	ldd	r24, Y+7	; 0x07
    4460:	98 85       	ldd	r25, Y+8	; 0x08
    4462:	fc 01       	movw	r30, r24
    4464:	82 89       	ldd	r24, Z+18	; 0x12
    4466:	93 89       	ldd	r25, Z+19	; 0x13
    4468:	a4 89       	ldd	r26, Z+20	; 0x14
    446a:	b5 89       	ldd	r27, Z+21	; 0x15
    446c:	18 16       	cp	r1, r24
    446e:	19 06       	cpc	r1, r25
    4470:	1a 06       	cpc	r1, r26
    4472:	1b 06       	cpc	r1, r27
    4474:	5c f0       	brlt	.+22     	; 0x448c <_ZN12SetupHandler14updateFramesUIEi+0x7a>
    4476:	2f 81       	ldd	r18, Y+7	; 0x07
    4478:	38 85       	ldd	r19, Y+8	; 0x08
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	a0 e0       	ldi	r26, 0x00	; 0
    4480:	b0 e0       	ldi	r27, 0x00	; 0
    4482:	f9 01       	movw	r30, r18
    4484:	82 8b       	std	Z+18, r24	; 0x12
    4486:	93 8b       	std	Z+19, r25	; 0x13
    4488:	a4 8b       	std	Z+20, r26	; 0x14
    448a:	b5 8b       	std	Z+21, r27	; 0x15
    if(m_numFrames > 999) m_numFrames = 999;
    448c:	8f 81       	ldd	r24, Y+7	; 0x07
    448e:	98 85       	ldd	r25, Y+8	; 0x08
    4490:	fc 01       	movw	r30, r24
    4492:	82 89       	ldd	r24, Z+18	; 0x12
    4494:	93 89       	ldd	r25, Z+19	; 0x13
    4496:	a4 89       	ldd	r26, Z+20	; 0x14
    4498:	b5 89       	ldd	r27, Z+21	; 0x15
    449a:	88 3e       	cpi	r24, 0xE8	; 232
    449c:	f3 e0       	ldi	r31, 0x03	; 3
    449e:	9f 07       	cpc	r25, r31
    44a0:	a1 05       	cpc	r26, r1
    44a2:	b1 05       	cpc	r27, r1
    44a4:	5c f0       	brlt	.+22     	; 0x44bc <_ZN12SetupHandler14updateFramesUIEi+0xaa>
    44a6:	2f 81       	ldd	r18, Y+7	; 0x07
    44a8:	38 85       	ldd	r19, Y+8	; 0x08
    44aa:	87 ee       	ldi	r24, 0xE7	; 231
    44ac:	93 e0       	ldi	r25, 0x03	; 3
    44ae:	a0 e0       	ldi	r26, 0x00	; 0
    44b0:	b0 e0       	ldi	r27, 0x00	; 0
    44b2:	f9 01       	movw	r30, r18
    44b4:	82 8b       	std	Z+18, r24	; 0x12
    44b6:	93 8b       	std	Z+19, r25	; 0x13
    44b8:	a4 8b       	std	Z+20, r26	; 0x14
    44ba:	b5 8b       	std	Z+21, r27	; 0x15
	// set cursor based on how many digits are shown
	unsigned char digits = 0;
    44bc:	19 82       	std	Y+1, r1	; 0x01
	uint32_t val = m_numFrames;
    44be:	8f 81       	ldd	r24, Y+7	; 0x07
    44c0:	98 85       	ldd	r25, Y+8	; 0x08
    44c2:	fc 01       	movw	r30, r24
    44c4:	82 89       	ldd	r24, Z+18	; 0x12
    44c6:	93 89       	ldd	r25, Z+19	; 0x13
    44c8:	a4 89       	ldd	r26, Z+20	; 0x14
    44ca:	b5 89       	ldd	r27, Z+21	; 0x15
    44cc:	8a 83       	std	Y+2, r24	; 0x02
    44ce:	9b 83       	std	Y+3, r25	; 0x03
    44d0:	ac 83       	std	Y+4, r26	; 0x04
    44d2:	bd 83       	std	Y+5, r27	; 0x05
	
	while(val > 0)
    44d4:	15 c0       	rjmp	.+42     	; 0x4500 <_ZN12SetupHandler14updateFramesUIEi+0xee>
	{
		val /= 10;
    44d6:	8a 81       	ldd	r24, Y+2	; 0x02
    44d8:	9b 81       	ldd	r25, Y+3	; 0x03
    44da:	ac 81       	ldd	r26, Y+4	; 0x04
    44dc:	bd 81       	ldd	r27, Y+5	; 0x05
    44de:	2a e0       	ldi	r18, 0x0A	; 10
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	40 e0       	ldi	r20, 0x00	; 0
    44e4:	50 e0       	ldi	r21, 0x00	; 0
    44e6:	bc 01       	movw	r22, r24
    44e8:	cd 01       	movw	r24, r26
    44ea:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__udivmodsi4>
    44ee:	da 01       	movw	r26, r20
    44f0:	c9 01       	movw	r24, r18
    44f2:	8a 83       	std	Y+2, r24	; 0x02
    44f4:	9b 83       	std	Y+3, r25	; 0x03
    44f6:	ac 83       	std	Y+4, r26	; 0x04
    44f8:	bd 83       	std	Y+5, r27	; 0x05
		++digits;
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	8f 5f       	subi	r24, 0xFF	; 255
    44fe:	89 83       	std	Y+1, r24	; 0x01
    if(m_numFrames > 999) m_numFrames = 999;
	// set cursor based on how many digits are shown
	unsigned char digits = 0;
	uint32_t val = m_numFrames;
	
	while(val > 0)
    4500:	8a 81       	ldd	r24, Y+2	; 0x02
    4502:	9b 81       	ldd	r25, Y+3	; 0x03
    4504:	ac 81       	ldd	r26, Y+4	; 0x04
    4506:	bd 81       	ldd	r27, Y+5	; 0x05
    4508:	00 97       	sbiw	r24, 0x00	; 0
    450a:	a1 05       	cpc	r26, r1
    450c:	b1 05       	cpc	r27, r1
    450e:	19 f7       	brne	.-58     	; 0x44d6 <_ZN12SetupHandler14updateFramesUIEi+0xc4>
	{
		val /= 10;
		++digits;
	}
	g_print->setCursor(FrameFieldStart, 1);
    4510:	80 91 0a 01 	lds	r24, 0x010A
    4514:	90 91 0b 01 	lds	r25, 0x010B
    4518:	41 e0       	ldi	r20, 0x01	; 1
    451a:	65 e0       	ldi	r22, 0x05	; 5
    451c:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
    for(unsigned char z = 0; z < 3 - digits; z++) g_print->print(F("0"));
    4520:	1e 82       	std	Y+6, r1	; 0x06
    4522:	0c c0       	rjmp	.+24     	; 0x453c <_ZN12SetupHandler14updateFramesUIEi+0x12a>
    4524:	21 ed       	ldi	r18, 0xD1	; 209
    4526:	32 e0       	ldi	r19, 0x02	; 2
    4528:	80 91 0a 01 	lds	r24, 0x010A
    452c:	90 91 0b 01 	lds	r25, 0x010B
    4530:	b9 01       	movw	r22, r18
    4532:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
    4536:	8e 81       	ldd	r24, Y+6	; 0x06
    4538:	8f 5f       	subi	r24, 0xFF	; 255
    453a:	8e 83       	std	Y+6, r24	; 0x06
    453c:	8e 81       	ldd	r24, Y+6	; 0x06
    453e:	28 2f       	mov	r18, r24
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	89 81       	ldd	r24, Y+1	; 0x01
    4544:	88 2f       	mov	r24, r24
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	43 e0       	ldi	r20, 0x03	; 3
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	ba 01       	movw	r22, r20
    454e:	68 1b       	sub	r22, r24
    4550:	79 0b       	sbc	r23, r25
    4552:	cb 01       	movw	r24, r22
    4554:	28 17       	cp	r18, r24
    4556:	39 07       	cpc	r19, r25
    4558:	2c f3       	brlt	.-54     	; 0x4524 <_ZN12SetupHandler14updateFramesUIEi+0x112>
  //  g_print->setCursor(FrameFieldStart + 3 - digits, 1);
    g_print->print(m_numFrames);
    455a:	8f 81       	ldd	r24, Y+7	; 0x07
    455c:	98 85       	ldd	r25, Y+8	; 0x08
    455e:	fc 01       	movw	r30, r24
    4560:	82 89       	ldd	r24, Z+18	; 0x12
    4562:	93 89       	ldd	r25, Z+19	; 0x13
    4564:	a4 89       	ldd	r26, Z+20	; 0x14
    4566:	b5 89       	ldd	r27, Z+21	; 0x15
    4568:	20 91 0a 01 	lds	r18, 0x010A
    456c:	30 91 0b 01 	lds	r19, 0x010B
    4570:	f9 01       	movw	r30, r18
    4572:	2a e0       	ldi	r18, 0x0A	; 10
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	ac 01       	movw	r20, r24
    4578:	bd 01       	movw	r22, r26
    457a:	cf 01       	movw	r24, r30
    457c:	0e 94 36 2c 	call	0x586c	; 0x586c <_ZN5Print5printEli>
	g_print->setCursor(getCaretCol(), 1);
    4580:	8f 81       	ldd	r24, Y+7	; 0x07
    4582:	98 85       	ldd	r25, Y+8	; 0x08
    4584:	0e 94 06 10 	call	0x200c	; 0x200c <_ZNK15IMessageHandler11getCaretColEv>
    4588:	28 2f       	mov	r18, r24
    458a:	80 91 0a 01 	lds	r24, 0x010A
    458e:	90 91 0b 01 	lds	r25, 0x010B
    4592:	41 e0       	ldi	r20, 0x01	; 1
    4594:	62 2f       	mov	r22, r18
    4596:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
}
    459a:	2e 96       	adiw	r28, 0x0e	; 14
    459c:	0f b6       	in	r0, 0x3f	; 63
    459e:	f8 94       	cli
    45a0:	de bf       	out	0x3e, r29	; 62
    45a2:	0f be       	out	0x3f, r0	; 63
    45a4:	cd bf       	out	0x3d, r28	; 61
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	08 95       	ret

000045ac <_ZN12SetupHandler18updateFrameDelayUIEi>:

void SetupHandler::updateFrameDelayUI(int change)
{
    45ac:	cf 93       	push	r28
    45ae:	df 93       	push	r29
    45b0:	cd b7       	in	r28, 0x3d	; 61
    45b2:	de b7       	in	r29, 0x3e	; 62
    45b4:	2e 97       	sbiw	r28, 0x0e	; 14
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	98 87       	std	Y+8, r25	; 0x08
    45c2:	8f 83       	std	Y+7, r24	; 0x07
    45c4:	7a 87       	std	Y+10, r23	; 0x0a
    45c6:	69 87       	std	Y+9, r22	; 0x09
	
	m_frameDelaySeconds += change;
    45c8:	8f 81       	ldd	r24, Y+7	; 0x07
    45ca:	98 85       	ldd	r25, Y+8	; 0x08
    45cc:	fc 01       	movw	r30, r24
    45ce:	26 89       	ldd	r18, Z+22	; 0x16
    45d0:	37 89       	ldd	r19, Z+23	; 0x17
    45d2:	40 8d       	ldd	r20, Z+24	; 0x18
    45d4:	51 8d       	ldd	r21, Z+25	; 0x19
    45d6:	89 85       	ldd	r24, Y+9	; 0x09
    45d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45da:	aa 27       	eor	r26, r26
    45dc:	97 fd       	sbrc	r25, 7
    45de:	a0 95       	com	r26
    45e0:	ba 2f       	mov	r27, r26
    45e2:	82 0f       	add	r24, r18
    45e4:	93 1f       	adc	r25, r19
    45e6:	a4 1f       	adc	r26, r20
    45e8:	b5 1f       	adc	r27, r21
    45ea:	2f 81       	ldd	r18, Y+7	; 0x07
    45ec:	38 85       	ldd	r19, Y+8	; 0x08
    45ee:	f9 01       	movw	r30, r18
    45f0:	86 8b       	std	Z+22, r24	; 0x16
    45f2:	97 8b       	std	Z+23, r25	; 0x17
    45f4:	a0 8f       	std	Z+24, r26	; 0x18
    45f6:	b1 8f       	std	Z+25, r27	; 0x19
	if(m_frameDelaySeconds < 0 ) m_frameDelaySeconds = 0;
    45f8:	8f 81       	ldd	r24, Y+7	; 0x07
    45fa:	98 85       	ldd	r25, Y+8	; 0x08
    45fc:	fc 01       	movw	r30, r24
    45fe:	86 89       	ldd	r24, Z+22	; 0x16
    4600:	97 89       	ldd	r25, Z+23	; 0x17
    4602:	a0 8d       	ldd	r26, Z+24	; 0x18
    4604:	b1 8d       	ldd	r27, Z+25	; 0x19
    4606:	bb 23       	and	r27, r27
    4608:	3c f4       	brge	.+14     	; 0x4618 <_ZN12SetupHandler18updateFrameDelayUIEi+0x6c>
    460a:	8f 81       	ldd	r24, Y+7	; 0x07
    460c:	98 85       	ldd	r25, Y+8	; 0x08
    460e:	fc 01       	movw	r30, r24
    4610:	16 8a       	std	Z+22, r1	; 0x16
    4612:	17 8a       	std	Z+23, r1	; 0x17
    4614:	10 8e       	std	Z+24, r1	; 0x18
    4616:	11 8e       	std	Z+25, r1	; 0x19
    if(m_frameDelaySeconds > 999) m_frameDelaySeconds = 999;
    4618:	8f 81       	ldd	r24, Y+7	; 0x07
    461a:	98 85       	ldd	r25, Y+8	; 0x08
    461c:	fc 01       	movw	r30, r24
    461e:	86 89       	ldd	r24, Z+22	; 0x16
    4620:	97 89       	ldd	r25, Z+23	; 0x17
    4622:	a0 8d       	ldd	r26, Z+24	; 0x18
    4624:	b1 8d       	ldd	r27, Z+25	; 0x19
    4626:	88 3e       	cpi	r24, 0xE8	; 232
    4628:	f3 e0       	ldi	r31, 0x03	; 3
    462a:	9f 07       	cpc	r25, r31
    462c:	a1 05       	cpc	r26, r1
    462e:	b1 05       	cpc	r27, r1
    4630:	5c f0       	brlt	.+22     	; 0x4648 <_ZN12SetupHandler18updateFrameDelayUIEi+0x9c>
    4632:	2f 81       	ldd	r18, Y+7	; 0x07
    4634:	38 85       	ldd	r19, Y+8	; 0x08
    4636:	87 ee       	ldi	r24, 0xE7	; 231
    4638:	93 e0       	ldi	r25, 0x03	; 3
    463a:	a0 e0       	ldi	r26, 0x00	; 0
    463c:	b0 e0       	ldi	r27, 0x00	; 0
    463e:	f9 01       	movw	r30, r18
    4640:	86 8b       	std	Z+22, r24	; 0x16
    4642:	97 8b       	std	Z+23, r25	; 0x17
    4644:	a0 8f       	std	Z+24, r26	; 0x18
    4646:	b1 8f       	std	Z+25, r27	; 0x19
	unsigned char digits = 0;
    4648:	19 82       	std	Y+1, r1	; 0x01
	uint32_t val = m_frameDelaySeconds;
    464a:	8f 81       	ldd	r24, Y+7	; 0x07
    464c:	98 85       	ldd	r25, Y+8	; 0x08
    464e:	fc 01       	movw	r30, r24
    4650:	86 89       	ldd	r24, Z+22	; 0x16
    4652:	97 89       	ldd	r25, Z+23	; 0x17
    4654:	a0 8d       	ldd	r26, Z+24	; 0x18
    4656:	b1 8d       	ldd	r27, Z+25	; 0x19
    4658:	8a 83       	std	Y+2, r24	; 0x02
    465a:	9b 83       	std	Y+3, r25	; 0x03
    465c:	ac 83       	std	Y+4, r26	; 0x04
    465e:	bd 83       	std	Y+5, r27	; 0x05
	
	while(val > 0)
    4660:	15 c0       	rjmp	.+42     	; 0x468c <_ZN12SetupHandler18updateFrameDelayUIEi+0xe0>
	{
		val /= 10;
    4662:	8a 81       	ldd	r24, Y+2	; 0x02
    4664:	9b 81       	ldd	r25, Y+3	; 0x03
    4666:	ac 81       	ldd	r26, Y+4	; 0x04
    4668:	bd 81       	ldd	r27, Y+5	; 0x05
    466a:	2a e0       	ldi	r18, 0x0A	; 10
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	40 e0       	ldi	r20, 0x00	; 0
    4670:	50 e0       	ldi	r21, 0x00	; 0
    4672:	bc 01       	movw	r22, r24
    4674:	cd 01       	movw	r24, r26
    4676:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__udivmodsi4>
    467a:	da 01       	movw	r26, r20
    467c:	c9 01       	movw	r24, r18
    467e:	8a 83       	std	Y+2, r24	; 0x02
    4680:	9b 83       	std	Y+3, r25	; 0x03
    4682:	ac 83       	std	Y+4, r26	; 0x04
    4684:	bd 83       	std	Y+5, r27	; 0x05
		++digits;
    4686:	89 81       	ldd	r24, Y+1	; 0x01
    4688:	8f 5f       	subi	r24, 0xFF	; 255
    468a:	89 83       	std	Y+1, r24	; 0x01
	if(m_frameDelaySeconds < 0 ) m_frameDelaySeconds = 0;
    if(m_frameDelaySeconds > 999) m_frameDelaySeconds = 999;
	unsigned char digits = 0;
	uint32_t val = m_frameDelaySeconds;
	
	while(val > 0)
    468c:	8a 81       	ldd	r24, Y+2	; 0x02
    468e:	9b 81       	ldd	r25, Y+3	; 0x03
    4690:	ac 81       	ldd	r26, Y+4	; 0x04
    4692:	bd 81       	ldd	r27, Y+5	; 0x05
    4694:	00 97       	sbiw	r24, 0x00	; 0
    4696:	a1 05       	cpc	r26, r1
    4698:	b1 05       	cpc	r27, r1
    469a:	19 f7       	brne	.-58     	; 0x4662 <_ZN12SetupHandler18updateFrameDelayUIEi+0xb6>
	{
		val /= 10;
		++digits;
	}
    g_print->setCursor(DelayFieldStart, 1);
    469c:	80 91 0a 01 	lds	r24, 0x010A
    46a0:	90 91 0b 01 	lds	r25, 0x010B
    46a4:	41 e0       	ldi	r20, 0x01	; 1
    46a6:	69 e0       	ldi	r22, 0x09	; 9
    46a8:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	for(unsigned char z = 0; z < 3 - digits; z++) g_print->print(F("0"));
    46ac:	1e 82       	std	Y+6, r1	; 0x06
    46ae:	0b c0       	rjmp	.+22     	; 0x46c6 <_ZN12SetupHandler18updateFrameDelayUIEi+0x11a>
    46b0:	23 ed       	ldi	r18, 0xD3	; 211
    46b2:	32 e0       	ldi	r19, 0x02	; 2
    46b4:	80 91 0a 01 	lds	r24, 0x010A
    46b8:	90 91 0b 01 	lds	r25, 0x010B
    46bc:	b9 01       	movw	r22, r18
    46be:	fe d7       	rcall	.+4092   	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
    46c0:	8e 81       	ldd	r24, Y+6	; 0x06
    46c2:	8f 5f       	subi	r24, 0xFF	; 255
    46c4:	8e 83       	std	Y+6, r24	; 0x06
    46c6:	8e 81       	ldd	r24, Y+6	; 0x06
    46c8:	28 2f       	mov	r18, r24
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
    46ce:	88 2f       	mov	r24, r24
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	43 e0       	ldi	r20, 0x03	; 3
    46d4:	50 e0       	ldi	r21, 0x00	; 0
    46d6:	ba 01       	movw	r22, r20
    46d8:	68 1b       	sub	r22, r24
    46da:	79 0b       	sbc	r23, r25
    46dc:	cb 01       	movw	r24, r22
    46de:	28 17       	cp	r18, r24
    46e0:	39 07       	cpc	r19, r25
    46e2:	34 f3       	brlt	.-52     	; 0x46b0 <_ZN12SetupHandler18updateFrameDelayUIEi+0x104>
    if(0 != m_frameDelaySeconds) g_print->print(m_frameDelaySeconds);
    46e4:	8f 81       	ldd	r24, Y+7	; 0x07
    46e6:	98 85       	ldd	r25, Y+8	; 0x08
    46e8:	fc 01       	movw	r30, r24
    46ea:	86 89       	ldd	r24, Z+22	; 0x16
    46ec:	97 89       	ldd	r25, Z+23	; 0x17
    46ee:	a0 8d       	ldd	r26, Z+24	; 0x18
    46f0:	b1 8d       	ldd	r27, Z+25	; 0x19
    46f2:	00 97       	sbiw	r24, 0x00	; 0
    46f4:	a1 05       	cpc	r26, r1
    46f6:	b1 05       	cpc	r27, r1
    46f8:	99 f0       	breq	.+38     	; 0x4720 <_ZN12SetupHandler18updateFrameDelayUIEi+0x174>
    46fa:	8f 81       	ldd	r24, Y+7	; 0x07
    46fc:	98 85       	ldd	r25, Y+8	; 0x08
    46fe:	fc 01       	movw	r30, r24
    4700:	86 89       	ldd	r24, Z+22	; 0x16
    4702:	97 89       	ldd	r25, Z+23	; 0x17
    4704:	a0 8d       	ldd	r26, Z+24	; 0x18
    4706:	b1 8d       	ldd	r27, Z+25	; 0x19
    4708:	20 91 0a 01 	lds	r18, 0x010A
    470c:	30 91 0b 01 	lds	r19, 0x010B
    4710:	f9 01       	movw	r30, r18
    4712:	2a e0       	ldi	r18, 0x0A	; 10
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	ac 01       	movw	r20, r24
    4718:	bd 01       	movw	r22, r26
    471a:	cf 01       	movw	r24, r30
    471c:	0e 94 36 2c 	call	0x586c	; 0x586c <_ZN5Print5printEli>
	g_print->setCursor(getCaretCol(), 1);
    4720:	8f 81       	ldd	r24, Y+7	; 0x07
    4722:	98 85       	ldd	r25, Y+8	; 0x08
    4724:	0e 94 06 10 	call	0x200c	; 0x200c <_ZNK15IMessageHandler11getCaretColEv>
    4728:	28 2f       	mov	r18, r24
    472a:	80 91 0a 01 	lds	r24, 0x010A
    472e:	90 91 0b 01 	lds	r25, 0x010B
    4732:	41 e0       	ldi	r20, 0x01	; 1
    4734:	62 2f       	mov	r22, r18
    4736:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
}
    473a:	2e 96       	adiw	r28, 0x0e	; 14
    473c:	0f b6       	in	r0, 0x3f	; 63
    473e:	f8 94       	cli
    4740:	de bf       	out	0x3e, r29	; 62
    4742:	0f be       	out	0x3f, r0	; 63
    4744:	cd bf       	out	0x3d, r28	; 61
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	08 95       	ret

0000474c <_ZN12SetupHandler20updateRestoreFocusUIEi>:

void SetupHandler::updateRestoreFocusUI(int change)
{
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
    4750:	00 d0       	rcall	.+0      	; 0x4752 <_ZN12SetupHandler20updateRestoreFocusUIEi+0x6>
    4752:	00 d0       	rcall	.+0      	; 0x4754 <_ZN12SetupHandler20updateRestoreFocusUIEi+0x8>
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
    4758:	9a 83       	std	Y+2, r25	; 0x02
    475a:	89 83       	std	Y+1, r24	; 0x01
    475c:	7c 83       	std	Y+4, r23	; 0x04
    475e:	6b 83       	std	Y+3, r22	; 0x03
	g_print->setCursor(RestoreFocusFieldStart, 1);
    4760:	80 91 0a 01 	lds	r24, 0x010A
    4764:	90 91 0b 01 	lds	r25, 0x010B
    4768:	41 e0       	ldi	r20, 0x01	; 1
    476a:	6d e0       	ldi	r22, 0x0D	; 13
    476c:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	g_print->print(F("   "));		
    4770:	25 ed       	ldi	r18, 0xD5	; 213
    4772:	32 e0       	ldi	r19, 0x02	; 2
    4774:	80 91 0a 01 	lds	r24, 0x010A
    4778:	90 91 0b 01 	lds	r25, 0x010B
    477c:	b9 01       	movw	r22, r18
    477e:	9e d7       	rcall	.+3900   	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
	g_print->setCursor(RestoreFocusFieldStart, 1);
    4780:	80 91 0a 01 	lds	r24, 0x010A
    4784:	90 91 0b 01 	lds	r25, 0x010B
    4788:	41 e0       	ldi	r20, 0x01	; 1
    478a:	6d e0       	ldi	r22, 0x0D	; 13
    478c:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
	if(0 != change) m_restoreFocus = !m_restoreFocus;
    4790:	8b 81       	ldd	r24, Y+3	; 0x03
    4792:	9c 81       	ldd	r25, Y+4	; 0x04
    4794:	00 97       	sbiw	r24, 0x00	; 0
    4796:	59 f0       	breq	.+22     	; 0x47ae <_ZN12SetupHandler20updateRestoreFocusUIEi+0x62>
    4798:	89 81       	ldd	r24, Y+1	; 0x01
    479a:	9a 81       	ldd	r25, Y+2	; 0x02
    479c:	fc 01       	movw	r30, r24
    479e:	92 8d       	ldd	r25, Z+26	; 0x1a
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	29 2f       	mov	r18, r25
    47a4:	28 27       	eor	r18, r24
    47a6:	89 81       	ldd	r24, Y+1	; 0x01
    47a8:	9a 81       	ldd	r25, Y+2	; 0x02
    47aa:	fc 01       	movw	r30, r24
    47ac:	22 8f       	std	Z+26, r18	; 0x1a
	g_print->print( m_restoreFocus ? F("Yes") : F("No"));
    47ae:	89 81       	ldd	r24, Y+1	; 0x01
    47b0:	9a 81       	ldd	r25, Y+2	; 0x02
    47b2:	fc 01       	movw	r30, r24
    47b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    47b6:	88 23       	and	r24, r24
    47b8:	19 f0       	breq	.+6      	; 0x47c0 <_ZN12SetupHandler20updateRestoreFocusUIEi+0x74>
    47ba:	89 ed       	ldi	r24, 0xD9	; 217
    47bc:	92 e0       	ldi	r25, 0x02	; 2
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <_ZN12SetupHandler20updateRestoreFocusUIEi+0x78>
    47c0:	8d ed       	ldi	r24, 0xDD	; 221
    47c2:	92 e0       	ldi	r25, 0x02	; 2
    47c4:	20 91 0a 01 	lds	r18, 0x010A
    47c8:	30 91 0b 01 	lds	r19, 0x010B
    47cc:	bc 01       	movw	r22, r24
    47ce:	c9 01       	movw	r24, r18
    47d0:	75 d7       	rcall	.+3818   	; 0x56bc <_ZN5Print5printEPK19__FlashStringHelper>
	g_print->setCursor(getCaretCol(), 1);
    47d2:	89 81       	ldd	r24, Y+1	; 0x01
    47d4:	9a 81       	ldd	r25, Y+2	; 0x02
    47d6:	0e 94 06 10 	call	0x200c	; 0x200c <_ZNK15IMessageHandler11getCaretColEv>
    47da:	28 2f       	mov	r18, r24
    47dc:	80 91 0a 01 	lds	r24, 0x010A
    47e0:	90 91 0b 01 	lds	r25, 0x010B
    47e4:	41 e0       	ldi	r20, 0x01	; 1
    47e6:	62 2f       	mov	r22, r18
    47e8:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN21Adafruit_RGBLCDShield9setCursorEhh>
}
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	0f 90       	pop	r0
    47f2:	0f 90       	pop	r0
    47f4:	df 91       	pop	r29
    47f6:	cf 91       	pop	r28
    47f8:	08 95       	ret

000047fa <twi_init>:
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
}
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
    47fe:	cd b7       	in	r28, 0x3d	; 61
    4800:	de b7       	in	r29, 0x3e	; 62
    4802:	10 92 b4 03 	sts	0x03B4, r1
    4806:	81 e0       	ldi	r24, 0x01	; 1
    4808:	80 93 b6 03 	sts	0x03B6, r24
    480c:	10 92 b7 03 	sts	0x03B7, r1
    4810:	82 e1       	ldi	r24, 0x12	; 18
    4812:	61 e0       	ldi	r22, 0x01	; 1
    4814:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <digitalWrite>
    4818:	83 e1       	ldi	r24, 0x13	; 19
    481a:	61 e0       	ldi	r22, 0x01	; 1
    481c:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <digitalWrite>
    4820:	89 eb       	ldi	r24, 0xB9	; 185
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	29 eb       	ldi	r18, 0xB9	; 185
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	f9 01       	movw	r30, r18
    482a:	20 81       	ld	r18, Z
    482c:	2e 7f       	andi	r18, 0xFE	; 254
    482e:	fc 01       	movw	r30, r24
    4830:	20 83       	st	Z, r18
    4832:	89 eb       	ldi	r24, 0xB9	; 185
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	29 eb       	ldi	r18, 0xB9	; 185
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	f9 01       	movw	r30, r18
    483c:	20 81       	ld	r18, Z
    483e:	2d 7f       	andi	r18, 0xFD	; 253
    4840:	fc 01       	movw	r30, r24
    4842:	20 83       	st	Z, r18
    4844:	88 eb       	ldi	r24, 0xB8	; 184
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	28 e4       	ldi	r18, 0x48	; 72
    484a:	fc 01       	movw	r30, r24
    484c:	20 83       	st	Z, r18
    484e:	8c eb       	ldi	r24, 0xBC	; 188
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	25 e4       	ldi	r18, 0x45	; 69
    4854:	fc 01       	movw	r30, r24
    4856:	20 83       	st	Z, r18
    4858:	df 91       	pop	r29
    485a:	cf 91       	pop	r28
    485c:	08 95       	ret

0000485e <twi_readFrom>:
    485e:	cf 93       	push	r28
    4860:	df 93       	push	r29
    4862:	00 d0       	rcall	.+0      	; 0x4864 <twi_readFrom+0x6>
    4864:	00 d0       	rcall	.+0      	; 0x4866 <twi_readFrom+0x8>
    4866:	00 d0       	rcall	.+0      	; 0x4868 <twi_readFrom+0xa>
    4868:	cd b7       	in	r28, 0x3d	; 61
    486a:	de b7       	in	r29, 0x3e	; 62
    486c:	8a 83       	std	Y+2, r24	; 0x02
    486e:	7c 83       	std	Y+4, r23	; 0x04
    4870:	6b 83       	std	Y+3, r22	; 0x03
    4872:	4d 83       	std	Y+5, r20	; 0x05
    4874:	2e 83       	std	Y+6, r18	; 0x06
    4876:	8d 81       	ldd	r24, Y+5	; 0x05
    4878:	81 32       	cpi	r24, 0x21	; 33
    487a:	10 f0       	brcs	.+4      	; 0x4880 <twi_readFrom+0x22>
    487c:	80 e0       	ldi	r24, 0x00	; 0
    487e:	62 c0       	rjmp	.+196    	; 0x4944 <twi_readFrom+0xe6>
    4880:	01 c0       	rjmp	.+2      	; 0x4884 <twi_readFrom+0x26>
    4882:	00 00       	nop
    4884:	80 91 b4 03 	lds	r24, 0x03B4
    4888:	88 23       	and	r24, r24
    488a:	d9 f7       	brne	.-10     	; 0x4882 <twi_readFrom+0x24>
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	80 93 b4 03 	sts	0x03B4, r24
    4892:	8e 81       	ldd	r24, Y+6	; 0x06
    4894:	80 93 b6 03 	sts	0x03B6, r24
    4898:	8f ef       	ldi	r24, 0xFF	; 255
    489a:	80 93 21 04 	sts	0x0421, r24
    489e:	10 92 dc 03 	sts	0x03DC, r1
    48a2:	8d 81       	ldd	r24, Y+5	; 0x05
    48a4:	81 50       	subi	r24, 0x01	; 1
    48a6:	80 93 dd 03 	sts	0x03DD, r24
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	80 93 b5 03 	sts	0x03B5, r24
    48b0:	8a 81       	ldd	r24, Y+2	; 0x02
    48b2:	88 2f       	mov	r24, r24
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	88 0f       	add	r24, r24
    48b8:	99 1f       	adc	r25, r25
    48ba:	98 2f       	mov	r25, r24
    48bc:	80 91 b5 03 	lds	r24, 0x03B5
    48c0:	89 2b       	or	r24, r25
    48c2:	80 93 b5 03 	sts	0x03B5, r24
    48c6:	80 91 b7 03 	lds	r24, 0x03B7
    48ca:	81 30       	cpi	r24, 0x01	; 1
    48cc:	71 f4       	brne	.+28     	; 0x48ea <twi_readFrom+0x8c>
    48ce:	10 92 b7 03 	sts	0x03B7, r1
    48d2:	8b eb       	ldi	r24, 0xBB	; 187
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	20 91 b5 03 	lds	r18, 0x03B5
    48da:	fc 01       	movw	r30, r24
    48dc:	20 83       	st	Z, r18
    48de:	8c eb       	ldi	r24, 0xBC	; 188
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	25 ec       	ldi	r18, 0xC5	; 197
    48e4:	fc 01       	movw	r30, r24
    48e6:	20 83       	st	Z, r18
    48e8:	07 c0       	rjmp	.+14     	; 0x48f8 <twi_readFrom+0x9a>
    48ea:	8c eb       	ldi	r24, 0xBC	; 188
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	25 ee       	ldi	r18, 0xE5	; 229
    48f0:	fc 01       	movw	r30, r24
    48f2:	20 83       	st	Z, r18
    48f4:	01 c0       	rjmp	.+2      	; 0x48f8 <twi_readFrom+0x9a>
    48f6:	00 00       	nop
    48f8:	80 91 b4 03 	lds	r24, 0x03B4
    48fc:	81 30       	cpi	r24, 0x01	; 1
    48fe:	d9 f3       	breq	.-10     	; 0x48f6 <twi_readFrom+0x98>
    4900:	90 91 dc 03 	lds	r25, 0x03DC
    4904:	8d 81       	ldd	r24, Y+5	; 0x05
    4906:	98 17       	cp	r25, r24
    4908:	18 f4       	brcc	.+6      	; 0x4910 <twi_readFrom+0xb2>
    490a:	80 91 dc 03 	lds	r24, 0x03DC
    490e:	8d 83       	std	Y+5, r24	; 0x05
    4910:	19 82       	std	Y+1, r1	; 0x01
    4912:	13 c0       	rjmp	.+38     	; 0x493a <twi_readFrom+0xdc>
    4914:	89 81       	ldd	r24, Y+1	; 0x01
    4916:	88 2f       	mov	r24, r24
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	2b 81       	ldd	r18, Y+3	; 0x03
    491c:	3c 81       	ldd	r19, Y+4	; 0x04
    491e:	82 0f       	add	r24, r18
    4920:	93 1f       	adc	r25, r19
    4922:	29 81       	ldd	r18, Y+1	; 0x01
    4924:	22 2f       	mov	r18, r18
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	24 54       	subi	r18, 0x44	; 68
    492a:	3c 4f       	sbci	r19, 0xFC	; 252
    492c:	f9 01       	movw	r30, r18
    492e:	20 81       	ld	r18, Z
    4930:	fc 01       	movw	r30, r24
    4932:	20 83       	st	Z, r18
    4934:	89 81       	ldd	r24, Y+1	; 0x01
    4936:	8f 5f       	subi	r24, 0xFF	; 255
    4938:	89 83       	std	Y+1, r24	; 0x01
    493a:	99 81       	ldd	r25, Y+1	; 0x01
    493c:	8d 81       	ldd	r24, Y+5	; 0x05
    493e:	98 17       	cp	r25, r24
    4940:	48 f3       	brcs	.-46     	; 0x4914 <twi_readFrom+0xb6>
    4942:	8d 81       	ldd	r24, Y+5	; 0x05
    4944:	26 96       	adiw	r28, 0x06	; 6
    4946:	0f b6       	in	r0, 0x3f	; 63
    4948:	f8 94       	cli
    494a:	de bf       	out	0x3e, r29	; 62
    494c:	0f be       	out	0x3f, r0	; 63
    494e:	cd bf       	out	0x3d, r28	; 61
    4950:	df 91       	pop	r29
    4952:	cf 91       	pop	r28
    4954:	08 95       	ret

00004956 <twi_writeTo>:
    4956:	0f 93       	push	r16
    4958:	cf 93       	push	r28
    495a:	df 93       	push	r29
    495c:	cd b7       	in	r28, 0x3d	; 61
    495e:	de b7       	in	r29, 0x3e	; 62
    4960:	27 97       	sbiw	r28, 0x07	; 7
    4962:	0f b6       	in	r0, 0x3f	; 63
    4964:	f8 94       	cli
    4966:	de bf       	out	0x3e, r29	; 62
    4968:	0f be       	out	0x3f, r0	; 63
    496a:	cd bf       	out	0x3d, r28	; 61
    496c:	8a 83       	std	Y+2, r24	; 0x02
    496e:	7c 83       	std	Y+4, r23	; 0x04
    4970:	6b 83       	std	Y+3, r22	; 0x03
    4972:	4d 83       	std	Y+5, r20	; 0x05
    4974:	2e 83       	std	Y+6, r18	; 0x06
    4976:	0f 83       	std	Y+7, r16	; 0x07
    4978:	8d 81       	ldd	r24, Y+5	; 0x05
    497a:	81 32       	cpi	r24, 0x21	; 33
    497c:	10 f0       	brcs	.+4      	; 0x4982 <twi_writeTo+0x2c>
    497e:	81 e0       	ldi	r24, 0x01	; 1
    4980:	6d c0       	rjmp	.+218    	; 0x4a5c <twi_writeTo+0x106>
    4982:	01 c0       	rjmp	.+2      	; 0x4986 <twi_writeTo+0x30>
    4984:	00 00       	nop
    4986:	80 91 b4 03 	lds	r24, 0x03B4
    498a:	88 23       	and	r24, r24
    498c:	d9 f7       	brne	.-10     	; 0x4984 <twi_writeTo+0x2e>
    498e:	82 e0       	ldi	r24, 0x02	; 2
    4990:	80 93 b4 03 	sts	0x03B4, r24
    4994:	8f 81       	ldd	r24, Y+7	; 0x07
    4996:	80 93 b6 03 	sts	0x03B6, r24
    499a:	8f ef       	ldi	r24, 0xFF	; 255
    499c:	80 93 21 04 	sts	0x0421, r24
    49a0:	10 92 dc 03 	sts	0x03DC, r1
    49a4:	8d 81       	ldd	r24, Y+5	; 0x05
    49a6:	80 93 dd 03 	sts	0x03DD, r24
    49aa:	19 82       	std	Y+1, r1	; 0x01
    49ac:	13 c0       	rjmp	.+38     	; 0x49d4 <twi_writeTo+0x7e>
    49ae:	89 81       	ldd	r24, Y+1	; 0x01
    49b0:	88 2f       	mov	r24, r24
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	29 81       	ldd	r18, Y+1	; 0x01
    49b6:	22 2f       	mov	r18, r18
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	4b 81       	ldd	r20, Y+3	; 0x03
    49bc:	5c 81       	ldd	r21, Y+4	; 0x04
    49be:	24 0f       	add	r18, r20
    49c0:	35 1f       	adc	r19, r21
    49c2:	f9 01       	movw	r30, r18
    49c4:	20 81       	ld	r18, Z
    49c6:	84 54       	subi	r24, 0x44	; 68
    49c8:	9c 4f       	sbci	r25, 0xFC	; 252
    49ca:	fc 01       	movw	r30, r24
    49cc:	20 83       	st	Z, r18
    49ce:	89 81       	ldd	r24, Y+1	; 0x01
    49d0:	8f 5f       	subi	r24, 0xFF	; 255
    49d2:	89 83       	std	Y+1, r24	; 0x01
    49d4:	99 81       	ldd	r25, Y+1	; 0x01
    49d6:	8d 81       	ldd	r24, Y+5	; 0x05
    49d8:	98 17       	cp	r25, r24
    49da:	48 f3       	brcs	.-46     	; 0x49ae <twi_writeTo+0x58>
    49dc:	10 92 b5 03 	sts	0x03B5, r1
    49e0:	8a 81       	ldd	r24, Y+2	; 0x02
    49e2:	88 2f       	mov	r24, r24
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	88 0f       	add	r24, r24
    49e8:	99 1f       	adc	r25, r25
    49ea:	98 2f       	mov	r25, r24
    49ec:	80 91 b5 03 	lds	r24, 0x03B5
    49f0:	89 2b       	or	r24, r25
    49f2:	80 93 b5 03 	sts	0x03B5, r24
    49f6:	80 91 b7 03 	lds	r24, 0x03B7
    49fa:	81 30       	cpi	r24, 0x01	; 1
    49fc:	71 f4       	brne	.+28     	; 0x4a1a <twi_writeTo+0xc4>
    49fe:	10 92 b7 03 	sts	0x03B7, r1
    4a02:	8b eb       	ldi	r24, 0xBB	; 187
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	20 91 b5 03 	lds	r18, 0x03B5
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	20 83       	st	Z, r18
    4a0e:	8c eb       	ldi	r24, 0xBC	; 188
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	25 ec       	ldi	r18, 0xC5	; 197
    4a14:	fc 01       	movw	r30, r24
    4a16:	20 83       	st	Z, r18
    4a18:	07 c0       	rjmp	.+14     	; 0x4a28 <twi_writeTo+0xd2>
    4a1a:	8c eb       	ldi	r24, 0xBC	; 188
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	25 ee       	ldi	r18, 0xE5	; 229
    4a20:	fc 01       	movw	r30, r24
    4a22:	20 83       	st	Z, r18
    4a24:	01 c0       	rjmp	.+2      	; 0x4a28 <twi_writeTo+0xd2>
    4a26:	00 00       	nop
    4a28:	8e 81       	ldd	r24, Y+6	; 0x06
    4a2a:	88 23       	and	r24, r24
    4a2c:	21 f0       	breq	.+8      	; 0x4a36 <twi_writeTo+0xe0>
    4a2e:	80 91 b4 03 	lds	r24, 0x03B4
    4a32:	82 30       	cpi	r24, 0x02	; 2
    4a34:	c1 f3       	breq	.-16     	; 0x4a26 <twi_writeTo+0xd0>
    4a36:	80 91 21 04 	lds	r24, 0x0421
    4a3a:	8f 3f       	cpi	r24, 0xFF	; 255
    4a3c:	11 f4       	brne	.+4      	; 0x4a42 <twi_writeTo+0xec>
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	0d c0       	rjmp	.+26     	; 0x4a5c <twi_writeTo+0x106>
    4a42:	80 91 21 04 	lds	r24, 0x0421
    4a46:	80 32       	cpi	r24, 0x20	; 32
    4a48:	11 f4       	brne	.+4      	; 0x4a4e <twi_writeTo+0xf8>
    4a4a:	82 e0       	ldi	r24, 0x02	; 2
    4a4c:	07 c0       	rjmp	.+14     	; 0x4a5c <twi_writeTo+0x106>
    4a4e:	80 91 21 04 	lds	r24, 0x0421
    4a52:	80 33       	cpi	r24, 0x30	; 48
    4a54:	11 f4       	brne	.+4      	; 0x4a5a <twi_writeTo+0x104>
    4a56:	83 e0       	ldi	r24, 0x03	; 3
    4a58:	01 c0       	rjmp	.+2      	; 0x4a5c <twi_writeTo+0x106>
    4a5a:	84 e0       	ldi	r24, 0x04	; 4
    4a5c:	27 96       	adiw	r28, 0x07	; 7
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	f8 94       	cli
    4a62:	de bf       	out	0x3e, r29	; 62
    4a64:	0f be       	out	0x3f, r0	; 63
    4a66:	cd bf       	out	0x3d, r28	; 61
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	0f 91       	pop	r16
    4a6e:	08 95       	ret

00004a70 <twi_transmit>:
    4a70:	cf 93       	push	r28
    4a72:	df 93       	push	r29
    4a74:	00 d0       	rcall	.+0      	; 0x4a76 <twi_transmit+0x6>
    4a76:	00 d0       	rcall	.+0      	; 0x4a78 <twi_transmit+0x8>
    4a78:	cd b7       	in	r28, 0x3d	; 61
    4a7a:	de b7       	in	r29, 0x3e	; 62
    4a7c:	9b 83       	std	Y+3, r25	; 0x03
    4a7e:	8a 83       	std	Y+2, r24	; 0x02
    4a80:	6c 83       	std	Y+4, r22	; 0x04
    4a82:	8c 81       	ldd	r24, Y+4	; 0x04
    4a84:	81 32       	cpi	r24, 0x21	; 33
    4a86:	10 f0       	brcs	.+4      	; 0x4a8c <twi_transmit+0x1c>
    4a88:	81 e0       	ldi	r24, 0x01	; 1
    4a8a:	23 c0       	rjmp	.+70     	; 0x4ad2 <twi_transmit+0x62>
    4a8c:	80 91 b4 03 	lds	r24, 0x03B4
    4a90:	84 30       	cpi	r24, 0x04	; 4
    4a92:	11 f0       	breq	.+4      	; 0x4a98 <twi_transmit+0x28>
    4a94:	82 e0       	ldi	r24, 0x02	; 2
    4a96:	1d c0       	rjmp	.+58     	; 0x4ad2 <twi_transmit+0x62>
    4a98:	8c 81       	ldd	r24, Y+4	; 0x04
    4a9a:	80 93 ff 03 	sts	0x03FF, r24
    4a9e:	19 82       	std	Y+1, r1	; 0x01
    4aa0:	13 c0       	rjmp	.+38     	; 0x4ac8 <twi_transmit+0x58>
    4aa2:	89 81       	ldd	r24, Y+1	; 0x01
    4aa4:	88 2f       	mov	r24, r24
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	29 81       	ldd	r18, Y+1	; 0x01
    4aaa:	22 2f       	mov	r18, r18
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	4a 81       	ldd	r20, Y+2	; 0x02
    4ab0:	5b 81       	ldd	r21, Y+3	; 0x03
    4ab2:	24 0f       	add	r18, r20
    4ab4:	35 1f       	adc	r19, r21
    4ab6:	f9 01       	movw	r30, r18
    4ab8:	20 81       	ld	r18, Z
    4aba:	82 52       	subi	r24, 0x22	; 34
    4abc:	9c 4f       	sbci	r25, 0xFC	; 252
    4abe:	fc 01       	movw	r30, r24
    4ac0:	20 83       	st	Z, r18
    4ac2:	89 81       	ldd	r24, Y+1	; 0x01
    4ac4:	8f 5f       	subi	r24, 0xFF	; 255
    4ac6:	89 83       	std	Y+1, r24	; 0x01
    4ac8:	99 81       	ldd	r25, Y+1	; 0x01
    4aca:	8c 81       	ldd	r24, Y+4	; 0x04
    4acc:	98 17       	cp	r25, r24
    4ace:	48 f3       	brcs	.-46     	; 0x4aa2 <twi_transmit+0x32>
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	0f 90       	pop	r0
    4ad4:	0f 90       	pop	r0
    4ad6:	0f 90       	pop	r0
    4ad8:	0f 90       	pop	r0
    4ada:	df 91       	pop	r29
    4adc:	cf 91       	pop	r28
    4ade:	08 95       	ret

00004ae0 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    4ae0:	cf 93       	push	r28
    4ae2:	df 93       	push	r29
    4ae4:	1f 92       	push	r1
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
    4aea:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    4aec:	89 81       	ldd	r24, Y+1	; 0x01
    4aee:	88 23       	and	r24, r24
    4af0:	31 f0       	breq	.+12     	; 0x4afe <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4af2:	8c eb       	ldi	r24, 0xBC	; 188
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	25 ec       	ldi	r18, 0xC5	; 197
    4af8:	fc 01       	movw	r30, r24
    4afa:	20 83       	st	Z, r18
    4afc:	05 c0       	rjmp	.+10     	; 0x4b08 <twi_reply+0x28>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4afe:	8c eb       	ldi	r24, 0xBC	; 188
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	25 e8       	ldi	r18, 0x85	; 133
    4b04:	fc 01       	movw	r30, r24
    4b06:	20 83       	st	Z, r18
  }
}
    4b08:	0f 90       	pop	r0
    4b0a:	df 91       	pop	r29
    4b0c:	cf 91       	pop	r28
    4b0e:	08 95       	ret

00004b10 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    4b10:	cf 93       	push	r28
    4b12:	df 93       	push	r29
    4b14:	cd b7       	in	r28, 0x3d	; 61
    4b16:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    4b18:	8c eb       	ldi	r24, 0xBC	; 188
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	25 ed       	ldi	r18, 0xD5	; 213
    4b1e:	fc 01       	movw	r30, r24
    4b20:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4b22:	01 c0       	rjmp	.+2      	; 0x4b26 <twi_stop+0x16>
    continue;
    4b24:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    4b26:	8c eb       	ldi	r24, 0xBC	; 188
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	fc 01       	movw	r30, r24
    4b2c:	80 81       	ld	r24, Z
    4b2e:	88 2f       	mov	r24, r24
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	80 71       	andi	r24, 0x10	; 16
    4b34:	99 27       	eor	r25, r25
    4b36:	00 97       	sbiw	r24, 0x00	; 0
    4b38:	a9 f7       	brne	.-22     	; 0x4b24 <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    4b3a:	10 92 b4 03 	sts	0x03B4, r1
}
    4b3e:	df 91       	pop	r29
    4b40:	cf 91       	pop	r28
    4b42:	08 95       	ret

00004b44 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    4b44:	cf 93       	push	r28
    4b46:	df 93       	push	r29
    4b48:	cd b7       	in	r28, 0x3d	; 61
    4b4a:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    4b4c:	8c eb       	ldi	r24, 0xBC	; 188
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	25 ec       	ldi	r18, 0xC5	; 197
    4b52:	fc 01       	movw	r30, r24
    4b54:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    4b56:	10 92 b4 03 	sts	0x03B4, r1
}
    4b5a:	df 91       	pop	r29
    4b5c:	cf 91       	pop	r28
    4b5e:	08 95       	ret

00004b60 <__vector_24>:

SIGNAL(TWI_vect)
{
    4b60:	1f 92       	push	r1
    4b62:	0f 92       	push	r0
    4b64:	00 90 5f 00 	lds	r0, 0x005F
    4b68:	0f 92       	push	r0
    4b6a:	11 24       	eor	r1, r1
    4b6c:	2f 93       	push	r18
    4b6e:	3f 93       	push	r19
    4b70:	4f 93       	push	r20
    4b72:	5f 93       	push	r21
    4b74:	6f 93       	push	r22
    4b76:	7f 93       	push	r23
    4b78:	8f 93       	push	r24
    4b7a:	9f 93       	push	r25
    4b7c:	af 93       	push	r26
    4b7e:	bf 93       	push	r27
    4b80:	ef 93       	push	r30
    4b82:	ff 93       	push	r31
    4b84:	cf 93       	push	r28
    4b86:	df 93       	push	r29
    4b88:	cd b7       	in	r28, 0x3d	; 61
    4b8a:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    4b8c:	89 eb       	ldi	r24, 0xB9	; 185
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	fc 01       	movw	r30, r24
    4b92:	80 81       	ld	r24, Z
    4b94:	88 2f       	mov	r24, r24
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	88 7f       	andi	r24, 0xF8	; 248
    4b9a:	99 27       	eor	r25, r25
    4b9c:	aa 27       	eor	r26, r26
    4b9e:	97 fd       	sbrc	r25, 7
    4ba0:	a0 95       	com	r26
    4ba2:	ba 2f       	mov	r27, r26
    4ba4:	40 e0       	ldi	r20, 0x00	; 0
    4ba6:	50 e0       	ldi	r21, 0x00	; 0
    4ba8:	28 ef       	ldi	r18, 0xF8	; 248
    4baa:	30 e0       	ldi	r19, 0x00	; 0
    4bac:	84 1b       	sub	r24, r20
    4bae:	95 0b       	sbc	r25, r21
    4bb0:	28 17       	cp	r18, r24
    4bb2:	39 07       	cpc	r19, r25
    4bb4:	08 f4       	brcc	.+2      	; 0x4bb8 <__vector_24+0x58>
    4bb6:	05 c1       	rjmp	.+522    	; 0x4dc2 <__vector_24+0x262>
    4bb8:	8c 5c       	subi	r24, 0xCC	; 204
    4bba:	9f 4f       	sbci	r25, 0xFF	; 255
    4bbc:	fc 01       	movw	r30, r24
    4bbe:	0c 94 eb 3e 	jmp	0x7dd6	; 0x7dd6 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4bc2:	8b eb       	ldi	r24, 0xBB	; 187
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	20 91 b5 03 	lds	r18, 0x03B5
    4bca:	fc 01       	movw	r30, r24
    4bcc:	20 83       	st	Z, r18
      twi_reply(1);
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	87 df       	rcall	.-242    	; 0x4ae0 <twi_reply>
      break;
    4bd2:	f7 c0       	rjmp	.+494    	; 0x4dc2 <__vector_24+0x262>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4bd4:	90 91 dc 03 	lds	r25, 0x03DC
    4bd8:	80 91 dd 03 	lds	r24, 0x03DD
    4bdc:	98 17       	cp	r25, r24
    4bde:	98 f4       	brcc	.+38     	; 0x4c06 <__vector_24+0xa6>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4be0:	8b eb       	ldi	r24, 0xBB	; 187
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	20 91 dc 03 	lds	r18, 0x03DC
    4be8:	31 e0       	ldi	r19, 0x01	; 1
    4bea:	32 0f       	add	r19, r18
    4bec:	30 93 dc 03 	sts	0x03DC, r19
    4bf0:	22 2f       	mov	r18, r18
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	24 54       	subi	r18, 0x44	; 68
    4bf6:	3c 4f       	sbci	r19, 0xFC	; 252
    4bf8:	f9 01       	movw	r30, r18
    4bfa:	20 81       	ld	r18, Z
    4bfc:	fc 01       	movw	r30, r24
    4bfe:	20 83       	st	Z, r18
        twi_reply(1);
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	6e df       	rcall	.-292    	; 0x4ae0 <twi_reply>
    4c04:	11 c0       	rjmp	.+34     	; 0x4c28 <__vector_24+0xc8>
      }else{
	if (twi_sendStop)
    4c06:	80 91 b6 03 	lds	r24, 0x03B6
    4c0a:	88 23       	and	r24, r24
    4c0c:	11 f0       	breq	.+4      	; 0x4c12 <__vector_24+0xb2>
          twi_stop();
    4c0e:	80 df       	rcall	.-256    	; 0x4b10 <twi_stop>
    4c10:	0b c0       	rjmp	.+22     	; 0x4c28 <__vector_24+0xc8>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4c12:	81 e0       	ldi	r24, 0x01	; 1
    4c14:	80 93 b7 03 	sts	0x03B7, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4c18:	8c eb       	ldi	r24, 0xBC	; 188
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	24 ea       	ldi	r18, 0xA4	; 164
    4c1e:	fc 01       	movw	r30, r24
    4c20:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    4c22:	10 92 b4 03 	sts	0x03B4, r1
	}
      }
      break;
    4c26:	cd c0       	rjmp	.+410    	; 0x4dc2 <__vector_24+0x262>
    4c28:	cc c0       	rjmp	.+408    	; 0x4dc2 <__vector_24+0x262>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    4c2a:	80 e2       	ldi	r24, 0x20	; 32
    4c2c:	80 93 21 04 	sts	0x0421, r24
      twi_stop();
    4c30:	6f df       	rcall	.-290    	; 0x4b10 <twi_stop>
      break;
    4c32:	c7 c0       	rjmp	.+398    	; 0x4dc2 <__vector_24+0x262>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4c34:	80 e3       	ldi	r24, 0x30	; 48
    4c36:	80 93 21 04 	sts	0x0421, r24
      twi_stop();
    4c3a:	6a df       	rcall	.-300    	; 0x4b10 <twi_stop>
      break;
    4c3c:	c2 c0       	rjmp	.+388    	; 0x4dc2 <__vector_24+0x262>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4c3e:	88 e3       	ldi	r24, 0x38	; 56
    4c40:	80 93 21 04 	sts	0x0421, r24
      twi_releaseBus();
    4c44:	7f df       	rcall	.-258    	; 0x4b44 <twi_releaseBus>
      break;
    4c46:	bd c0       	rjmp	.+378    	; 0x4dc2 <__vector_24+0x262>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4c48:	80 91 dc 03 	lds	r24, 0x03DC
    4c4c:	91 e0       	ldi	r25, 0x01	; 1
    4c4e:	98 0f       	add	r25, r24
    4c50:	90 93 dc 03 	sts	0x03DC, r25
    4c54:	88 2f       	mov	r24, r24
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	2b eb       	ldi	r18, 0xBB	; 187
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	f9 01       	movw	r30, r18
    4c5e:	20 81       	ld	r18, Z
    4c60:	84 54       	subi	r24, 0x44	; 68
    4c62:	9c 4f       	sbci	r25, 0xFC	; 252
    4c64:	fc 01       	movw	r30, r24
    4c66:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4c68:	90 91 dc 03 	lds	r25, 0x03DC
    4c6c:	80 91 dd 03 	lds	r24, 0x03DD
    4c70:	98 17       	cp	r25, r24
    4c72:	18 f4       	brcc	.+6      	; 0x4c7a <__vector_24+0x11a>
        twi_reply(1);
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	34 df       	rcall	.-408    	; 0x4ae0 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    4c78:	a4 c0       	rjmp	.+328    	; 0x4dc2 <__vector_24+0x262>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	31 df       	rcall	.-414    	; 0x4ae0 <twi_reply>
      }
      break;
    4c7e:	a1 c0       	rjmp	.+322    	; 0x4dc2 <__vector_24+0x262>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4c80:	80 91 dc 03 	lds	r24, 0x03DC
    4c84:	91 e0       	ldi	r25, 0x01	; 1
    4c86:	98 0f       	add	r25, r24
    4c88:	90 93 dc 03 	sts	0x03DC, r25
    4c8c:	88 2f       	mov	r24, r24
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	2b eb       	ldi	r18, 0xBB	; 187
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	f9 01       	movw	r30, r18
    4c96:	20 81       	ld	r18, Z
    4c98:	84 54       	subi	r24, 0x44	; 68
    4c9a:	9c 4f       	sbci	r25, 0xFC	; 252
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	20 83       	st	Z, r18
	if (twi_sendStop)
    4ca0:	80 91 b6 03 	lds	r24, 0x03B6
    4ca4:	88 23       	and	r24, r24
    4ca6:	11 f0       	breq	.+4      	; 0x4cac <__vector_24+0x14c>
          twi_stop();
    4ca8:	33 df       	rcall	.-410    	; 0x4b10 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    4caa:	8b c0       	rjmp	.+278    	; 0x4dc2 <__vector_24+0x262>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	80 93 b7 03 	sts	0x03B7, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4cb2:	8c eb       	ldi	r24, 0xBC	; 188
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	24 ea       	ldi	r18, 0xA4	; 164
    4cb8:	fc 01       	movw	r30, r24
    4cba:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    4cbc:	10 92 b4 03 	sts	0x03B4, r1
	}    
	break;
    4cc0:	80 c0       	rjmp	.+256    	; 0x4dc2 <__vector_24+0x262>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    4cc2:	26 df       	rcall	.-436    	; 0x4b10 <twi_stop>
      break;
    4cc4:	7e c0       	rjmp	.+252    	; 0x4dc2 <__vector_24+0x262>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4cc6:	83 e0       	ldi	r24, 0x03	; 3
    4cc8:	80 93 b4 03 	sts	0x03B4, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4ccc:	10 92 20 04 	sts	0x0420, r1
      twi_reply(1);
    4cd0:	81 e0       	ldi	r24, 0x01	; 1
    4cd2:	06 df       	rcall	.-500    	; 0x4ae0 <twi_reply>
      break;
    4cd4:	76 c0       	rjmp	.+236    	; 0x4dc2 <__vector_24+0x262>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4cd6:	80 91 20 04 	lds	r24, 0x0420
    4cda:	80 32       	cpi	r24, 0x20	; 32
    4cdc:	98 f4       	brcc	.+38     	; 0x4d04 <__vector_24+0x1a4>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4cde:	80 91 20 04 	lds	r24, 0x0420
    4ce2:	91 e0       	ldi	r25, 0x01	; 1
    4ce4:	98 0f       	add	r25, r24
    4ce6:	90 93 20 04 	sts	0x0420, r25
    4cea:	88 2f       	mov	r24, r24
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	2b eb       	ldi	r18, 0xBB	; 187
    4cf0:	30 e0       	ldi	r19, 0x00	; 0
    4cf2:	f9 01       	movw	r30, r18
    4cf4:	20 81       	ld	r18, Z
    4cf6:	80 50       	subi	r24, 0x00	; 0
    4cf8:	9c 4f       	sbci	r25, 0xFC	; 252
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	20 83       	st	Z, r18
        twi_reply(1);
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	ef de       	rcall	.-546    	; 0x4ae0 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    4d02:	5f c0       	rjmp	.+190    	; 0x4dc2 <__vector_24+0x262>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	ec de       	rcall	.-552    	; 0x4ae0 <twi_reply>
      }
      break;
    4d08:	5c c0       	rjmp	.+184    	; 0x4dc2 <__vector_24+0x262>
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4d0a:	80 91 20 04 	lds	r24, 0x0420
    4d0e:	80 32       	cpi	r24, 0x20	; 32
    4d10:	40 f4       	brcc	.+16     	; 0x4d22 <__vector_24+0x1c2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4d12:	80 91 20 04 	lds	r24, 0x0420
    4d16:	88 2f       	mov	r24, r24
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	80 50       	subi	r24, 0x00	; 0
    4d1c:	9c 4f       	sbci	r25, 0xFC	; 252
    4d1e:	fc 01       	movw	r30, r24
    4d20:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    4d22:	f6 de       	rcall	.-532    	; 0x4b10 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4d24:	20 91 ba 03 	lds	r18, 0x03BA
    4d28:	30 91 bb 03 	lds	r19, 0x03BB
    4d2c:	80 91 20 04 	lds	r24, 0x0420
    4d30:	88 2f       	mov	r24, r24
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	bc 01       	movw	r22, r24
    4d36:	80 e0       	ldi	r24, 0x00	; 0
    4d38:	94 e0       	ldi	r25, 0x04	; 4
    4d3a:	f9 01       	movw	r30, r18
    4d3c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4d3e:	10 92 20 04 	sts	0x0420, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4d42:	00 df       	rcall	.-512    	; 0x4b44 <twi_releaseBus>
      break;
    4d44:	3e c0       	rjmp	.+124    	; 0x4dc2 <__vector_24+0x262>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	cb de       	rcall	.-618    	; 0x4ae0 <twi_reply>
      break;
    4d4a:	3b c0       	rjmp	.+118    	; 0x4dc2 <__vector_24+0x262>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4d4c:	84 e0       	ldi	r24, 0x04	; 4
    4d4e:	80 93 b4 03 	sts	0x03B4, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4d52:	10 92 fe 03 	sts	0x03FE, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4d56:	10 92 ff 03 	sts	0x03FF, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4d5a:	80 91 b8 03 	lds	r24, 0x03B8
    4d5e:	90 91 b9 03 	lds	r25, 0x03B9
    4d62:	fc 01       	movw	r30, r24
    4d64:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4d66:	80 91 ff 03 	lds	r24, 0x03FF
    4d6a:	88 23       	and	r24, r24
    4d6c:	29 f4       	brne	.+10     	; 0x4d78 <__vector_24+0x218>
        twi_txBufferLength = 1;
    4d6e:	81 e0       	ldi	r24, 0x01	; 1
    4d70:	80 93 ff 03 	sts	0x03FF, r24
        twi_txBuffer[0] = 0x00;
    4d74:	10 92 de 03 	sts	0x03DE, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4d78:	8b eb       	ldi	r24, 0xBB	; 187
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	20 91 fe 03 	lds	r18, 0x03FE
    4d80:	31 e0       	ldi	r19, 0x01	; 1
    4d82:	32 0f       	add	r19, r18
    4d84:	30 93 fe 03 	sts	0x03FE, r19
    4d88:	22 2f       	mov	r18, r18
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	22 52       	subi	r18, 0x22	; 34
    4d8e:	3c 4f       	sbci	r19, 0xFC	; 252
    4d90:	f9 01       	movw	r30, r18
    4d92:	20 81       	ld	r18, Z
    4d94:	fc 01       	movw	r30, r24
    4d96:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4d98:	90 91 fe 03 	lds	r25, 0x03FE
    4d9c:	80 91 ff 03 	lds	r24, 0x03FF
    4da0:	98 17       	cp	r25, r24
    4da2:	18 f4       	brcc	.+6      	; 0x4daa <__vector_24+0x24a>
        twi_reply(1);
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	9c de       	rcall	.-712    	; 0x4ae0 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    4da8:	0c c0       	rjmp	.+24     	; 0x4dc2 <__vector_24+0x262>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    4daa:	80 e0       	ldi	r24, 0x00	; 0
    4dac:	99 de       	rcall	.-718    	; 0x4ae0 <twi_reply>
      }
      break;
    4dae:	09 c0       	rjmp	.+18     	; 0x4dc2 <__vector_24+0x262>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	96 de       	rcall	.-724    	; 0x4ae0 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    4db4:	10 92 b4 03 	sts	0x03B4, r1
      break;
    4db8:	04 c0       	rjmp	.+8      	; 0x4dc2 <__vector_24+0x262>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4dba:	10 92 21 04 	sts	0x0421, r1
      twi_stop();
    4dbe:	a8 de       	rcall	.-688    	; 0x4b10 <twi_stop>
      break;
    4dc0:	00 00       	nop
  }
}
    4dc2:	df 91       	pop	r29
    4dc4:	cf 91       	pop	r28
    4dc6:	ff 91       	pop	r31
    4dc8:	ef 91       	pop	r30
    4dca:	bf 91       	pop	r27
    4dcc:	af 91       	pop	r26
    4dce:	9f 91       	pop	r25
    4dd0:	8f 91       	pop	r24
    4dd2:	7f 91       	pop	r23
    4dd4:	6f 91       	pop	r22
    4dd6:	5f 91       	pop	r21
    4dd8:	4f 91       	pop	r20
    4dda:	3f 91       	pop	r19
    4ddc:	2f 91       	pop	r18
    4dde:	0f 90       	pop	r0
    4de0:	00 92 5f 00 	sts	0x005F, r0
    4de4:	0f 90       	pop	r0
    4de6:	1f 90       	pop	r1
    4de8:	18 95       	reti

00004dea <_ZN5Print13setWriteErrorEi>:
    4dea:	cf 93       	push	r28
    4dec:	df 93       	push	r29
    4dee:	00 d0       	rcall	.+0      	; 0x4df0 <_ZN5Print13setWriteErrorEi+0x6>
    4df0:	00 d0       	rcall	.+0      	; 0x4df2 <_ZN5Print13setWriteErrorEi+0x8>
    4df2:	cd b7       	in	r28, 0x3d	; 61
    4df4:	de b7       	in	r29, 0x3e	; 62
    4df6:	9a 83       	std	Y+2, r25	; 0x02
    4df8:	89 83       	std	Y+1, r24	; 0x01
    4dfa:	7c 83       	std	Y+4, r23	; 0x04
    4dfc:	6b 83       	std	Y+3, r22	; 0x03
    4dfe:	89 81       	ldd	r24, Y+1	; 0x01
    4e00:	9a 81       	ldd	r25, Y+2	; 0x02
    4e02:	2b 81       	ldd	r18, Y+3	; 0x03
    4e04:	3c 81       	ldd	r19, Y+4	; 0x04
    4e06:	fc 01       	movw	r30, r24
    4e08:	33 83       	std	Z+3, r19	; 0x03
    4e0a:	22 83       	std	Z+2, r18	; 0x02
    4e0c:	0f 90       	pop	r0
    4e0e:	0f 90       	pop	r0
    4e10:	0f 90       	pop	r0
    4e12:	0f 90       	pop	r0
    4e14:	df 91       	pop	r29
    4e16:	cf 91       	pop	r28
    4e18:	08 95       	ret

00004e1a <_ZN6StreamC1Ev>:
    4e1a:	cf 93       	push	r28
    4e1c:	df 93       	push	r29
    4e1e:	00 d0       	rcall	.+0      	; 0x4e20 <_ZN6StreamC1Ev+0x6>
    4e20:	cd b7       	in	r28, 0x3d	; 61
    4e22:	de b7       	in	r29, 0x3e	; 62
    4e24:	9a 83       	std	Y+2, r25	; 0x02
    4e26:	89 83       	std	Y+1, r24	; 0x01
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e2c:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN5PrintC1Ev>
    4e30:	89 81       	ldd	r24, Y+1	; 0x01
    4e32:	9a 81       	ldd	r25, Y+2	; 0x02
    4e34:	20 e1       	ldi	r18, 0x10	; 16
    4e36:	32 e0       	ldi	r19, 0x02	; 2
    4e38:	fc 01       	movw	r30, r24
    4e3a:	31 83       	std	Z+1, r19	; 0x01
    4e3c:	20 83       	st	Z, r18
    4e3e:	29 81       	ldd	r18, Y+1	; 0x01
    4e40:	3a 81       	ldd	r19, Y+2	; 0x02
    4e42:	88 ee       	ldi	r24, 0xE8	; 232
    4e44:	93 e0       	ldi	r25, 0x03	; 3
    4e46:	a0 e0       	ldi	r26, 0x00	; 0
    4e48:	b0 e0       	ldi	r27, 0x00	; 0
    4e4a:	f9 01       	movw	r30, r18
    4e4c:	84 83       	std	Z+4, r24	; 0x04
    4e4e:	95 83       	std	Z+5, r25	; 0x05
    4e50:	a6 83       	std	Z+6, r26	; 0x06
    4e52:	b7 83       	std	Z+7, r27	; 0x07
    4e54:	0f 90       	pop	r0
    4e56:	0f 90       	pop	r0
    4e58:	df 91       	pop	r29
    4e5a:	cf 91       	pop	r28
    4e5c:	08 95       	ret

00004e5e <_ZN7TwoWireC1Ev>:
    4e5e:	cf 93       	push	r28
    4e60:	df 93       	push	r29
    4e62:	00 d0       	rcall	.+0      	; 0x4e64 <_ZN7TwoWireC1Ev+0x6>
    4e64:	cd b7       	in	r28, 0x3d	; 61
    4e66:	de b7       	in	r29, 0x3e	; 62
    4e68:	9a 83       	std	Y+2, r25	; 0x02
    4e6a:	89 83       	std	Y+1, r24	; 0x01
    4e6c:	89 81       	ldd	r24, Y+1	; 0x01
    4e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e70:	d4 df       	rcall	.-88     	; 0x4e1a <_ZN6StreamC1Ev>
    4e72:	89 81       	ldd	r24, Y+1	; 0x01
    4e74:	9a 81       	ldd	r25, Y+2	; 0x02
    4e76:	20 e0       	ldi	r18, 0x00	; 0
    4e78:	32 e0       	ldi	r19, 0x02	; 2
    4e7a:	fc 01       	movw	r30, r24
    4e7c:	31 83       	std	Z+1, r19	; 0x01
    4e7e:	20 83       	st	Z, r18
    4e80:	0f 90       	pop	r0
    4e82:	0f 90       	pop	r0
    4e84:	df 91       	pop	r29
    4e86:	cf 91       	pop	r28
    4e88:	08 95       	ret

00004e8a <_ZN7TwoWire5beginEv>:
    4e8a:	cf 93       	push	r28
    4e8c:	df 93       	push	r29
    4e8e:	00 d0       	rcall	.+0      	; 0x4e90 <_ZN7TwoWire5beginEv+0x6>
    4e90:	cd b7       	in	r28, 0x3d	; 61
    4e92:	de b7       	in	r29, 0x3e	; 62
    4e94:	9a 83       	std	Y+2, r25	; 0x02
    4e96:	89 83       	std	Y+1, r24	; 0x01
    4e98:	10 92 42 04 	sts	0x0442, r1
    4e9c:	10 92 43 04 	sts	0x0443, r1
    4ea0:	10 92 65 04 	sts	0x0465, r1
    4ea4:	10 92 66 04 	sts	0x0466, r1
    4ea8:	a8 dc       	rcall	.-1712   	; 0x47fa <twi_init>
    4eaa:	0f 90       	pop	r0
    4eac:	0f 90       	pop	r0
    4eae:	df 91       	pop	r29
    4eb0:	cf 91       	pop	r28
    4eb2:	08 95       	ret

00004eb4 <_ZN7TwoWire11requestFromEhhh>:
    4eb4:	cf 93       	push	r28
    4eb6:	df 93       	push	r29
    4eb8:	00 d0       	rcall	.+0      	; 0x4eba <_ZN7TwoWire11requestFromEhhh+0x6>
    4eba:	00 d0       	rcall	.+0      	; 0x4ebc <_ZN7TwoWire11requestFromEhhh+0x8>
    4ebc:	00 d0       	rcall	.+0      	; 0x4ebe <_ZN7TwoWire11requestFromEhhh+0xa>
    4ebe:	cd b7       	in	r28, 0x3d	; 61
    4ec0:	de b7       	in	r29, 0x3e	; 62
    4ec2:	9b 83       	std	Y+3, r25	; 0x03
    4ec4:	8a 83       	std	Y+2, r24	; 0x02
    4ec6:	6c 83       	std	Y+4, r22	; 0x04
    4ec8:	4d 83       	std	Y+5, r20	; 0x05
    4eca:	2e 83       	std	Y+6, r18	; 0x06
    4ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ece:	81 32       	cpi	r24, 0x21	; 33
    4ed0:	10 f0       	brcs	.+4      	; 0x4ed6 <_ZN7TwoWire11requestFromEhhh+0x22>
    4ed2:	80 e2       	ldi	r24, 0x20	; 32
    4ed4:	8d 83       	std	Y+5, r24	; 0x05
    4ed6:	2e 81       	ldd	r18, Y+6	; 0x06
    4ed8:	4d 81       	ldd	r20, Y+5	; 0x05
    4eda:	62 e2       	ldi	r22, 0x22	; 34
    4edc:	74 e0       	ldi	r23, 0x04	; 4
    4ede:	8c 81       	ldd	r24, Y+4	; 0x04
    4ee0:	be dc       	rcall	.-1668   	; 0x485e <twi_readFrom>
    4ee2:	89 83       	std	Y+1, r24	; 0x01
    4ee4:	10 92 42 04 	sts	0x0442, r1
    4ee8:	89 81       	ldd	r24, Y+1	; 0x01
    4eea:	80 93 43 04 	sts	0x0443, r24
    4eee:	89 81       	ldd	r24, Y+1	; 0x01
    4ef0:	26 96       	adiw	r28, 0x06	; 6
    4ef2:	0f b6       	in	r0, 0x3f	; 63
    4ef4:	f8 94       	cli
    4ef6:	de bf       	out	0x3e, r29	; 62
    4ef8:	0f be       	out	0x3f, r0	; 63
    4efa:	cd bf       	out	0x3d, r28	; 61
    4efc:	df 91       	pop	r29
    4efe:	cf 91       	pop	r28
    4f00:	08 95       	ret

00004f02 <_ZN7TwoWire11requestFromEii>:
    4f02:	cf 93       	push	r28
    4f04:	df 93       	push	r29
    4f06:	00 d0       	rcall	.+0      	; 0x4f08 <_ZN7TwoWire11requestFromEii+0x6>
    4f08:	00 d0       	rcall	.+0      	; 0x4f0a <_ZN7TwoWire11requestFromEii+0x8>
    4f0a:	00 d0       	rcall	.+0      	; 0x4f0c <_ZN7TwoWire11requestFromEii+0xa>
    4f0c:	cd b7       	in	r28, 0x3d	; 61
    4f0e:	de b7       	in	r29, 0x3e	; 62
    4f10:	9a 83       	std	Y+2, r25	; 0x02
    4f12:	89 83       	std	Y+1, r24	; 0x01
    4f14:	7c 83       	std	Y+4, r23	; 0x04
    4f16:	6b 83       	std	Y+3, r22	; 0x03
    4f18:	5e 83       	std	Y+6, r21	; 0x06
    4f1a:	4d 83       	std	Y+5, r20	; 0x05
    4f1c:	4d 81       	ldd	r20, Y+5	; 0x05
    4f1e:	3b 81       	ldd	r19, Y+3	; 0x03
    4f20:	89 81       	ldd	r24, Y+1	; 0x01
    4f22:	9a 81       	ldd	r25, Y+2	; 0x02
    4f24:	21 e0       	ldi	r18, 0x01	; 1
    4f26:	63 2f       	mov	r22, r19
    4f28:	c5 df       	rcall	.-118    	; 0x4eb4 <_ZN7TwoWire11requestFromEhhh>
    4f2a:	26 96       	adiw	r28, 0x06	; 6
    4f2c:	0f b6       	in	r0, 0x3f	; 63
    4f2e:	f8 94       	cli
    4f30:	de bf       	out	0x3e, r29	; 62
    4f32:	0f be       	out	0x3f, r0	; 63
    4f34:	cd bf       	out	0x3d, r28	; 61
    4f36:	df 91       	pop	r29
    4f38:	cf 91       	pop	r28
    4f3a:	08 95       	ret

00004f3c <_ZN7TwoWire17beginTransmissionEh>:
    4f3c:	cf 93       	push	r28
    4f3e:	df 93       	push	r29
    4f40:	00 d0       	rcall	.+0      	; 0x4f42 <_ZN7TwoWire17beginTransmissionEh+0x6>
    4f42:	1f 92       	push	r1
    4f44:	cd b7       	in	r28, 0x3d	; 61
    4f46:	de b7       	in	r29, 0x3e	; 62
    4f48:	9a 83       	std	Y+2, r25	; 0x02
    4f4a:	89 83       	std	Y+1, r24	; 0x01
    4f4c:	6b 83       	std	Y+3, r22	; 0x03
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	80 93 67 04 	sts	0x0467, r24
    4f54:	8b 81       	ldd	r24, Y+3	; 0x03
    4f56:	80 93 44 04 	sts	0x0444, r24
    4f5a:	10 92 65 04 	sts	0x0465, r1
    4f5e:	10 92 66 04 	sts	0x0466, r1
    4f62:	0f 90       	pop	r0
    4f64:	0f 90       	pop	r0
    4f66:	0f 90       	pop	r0
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	08 95       	ret

00004f6e <_ZN7TwoWire17beginTransmissionEi>:
    4f6e:	cf 93       	push	r28
    4f70:	df 93       	push	r29
    4f72:	00 d0       	rcall	.+0      	; 0x4f74 <_ZN7TwoWire17beginTransmissionEi+0x6>
    4f74:	00 d0       	rcall	.+0      	; 0x4f76 <_ZN7TwoWire17beginTransmissionEi+0x8>
    4f76:	cd b7       	in	r28, 0x3d	; 61
    4f78:	de b7       	in	r29, 0x3e	; 62
    4f7a:	9a 83       	std	Y+2, r25	; 0x02
    4f7c:	89 83       	std	Y+1, r24	; 0x01
    4f7e:	7c 83       	std	Y+4, r23	; 0x04
    4f80:	6b 83       	std	Y+3, r22	; 0x03
    4f82:	2b 81       	ldd	r18, Y+3	; 0x03
    4f84:	89 81       	ldd	r24, Y+1	; 0x01
    4f86:	9a 81       	ldd	r25, Y+2	; 0x02
    4f88:	62 2f       	mov	r22, r18
    4f8a:	d8 df       	rcall	.-80     	; 0x4f3c <_ZN7TwoWire17beginTransmissionEh>
    4f8c:	0f 90       	pop	r0
    4f8e:	0f 90       	pop	r0
    4f90:	0f 90       	pop	r0
    4f92:	0f 90       	pop	r0
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	08 95       	ret

00004f9a <_ZN7TwoWire15endTransmissionEh>:
    4f9a:	0f 93       	push	r16
    4f9c:	cf 93       	push	r28
    4f9e:	df 93       	push	r29
    4fa0:	00 d0       	rcall	.+0      	; 0x4fa2 <_ZN7TwoWire15endTransmissionEh+0x8>
    4fa2:	00 d0       	rcall	.+0      	; 0x4fa4 <_ZN7TwoWire15endTransmissionEh+0xa>
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62
    4fa8:	9b 83       	std	Y+3, r25	; 0x03
    4faa:	8a 83       	std	Y+2, r24	; 0x02
    4fac:	6c 83       	std	Y+4, r22	; 0x04
    4fae:	90 91 66 04 	lds	r25, 0x0466
    4fb2:	80 91 44 04 	lds	r24, 0x0444
    4fb6:	0c 81       	ldd	r16, Y+4	; 0x04
    4fb8:	21 e0       	ldi	r18, 0x01	; 1
    4fba:	49 2f       	mov	r20, r25
    4fbc:	65 e4       	ldi	r22, 0x45	; 69
    4fbe:	74 e0       	ldi	r23, 0x04	; 4
    4fc0:	ca dc       	rcall	.-1644   	; 0x4956 <twi_writeTo>
    4fc2:	89 83       	std	Y+1, r24	; 0x01
    4fc4:	10 92 65 04 	sts	0x0465, r1
    4fc8:	10 92 66 04 	sts	0x0466, r1
    4fcc:	10 92 67 04 	sts	0x0467, r1
    4fd0:	89 81       	ldd	r24, Y+1	; 0x01
    4fd2:	0f 90       	pop	r0
    4fd4:	0f 90       	pop	r0
    4fd6:	0f 90       	pop	r0
    4fd8:	0f 90       	pop	r0
    4fda:	df 91       	pop	r29
    4fdc:	cf 91       	pop	r28
    4fde:	0f 91       	pop	r16
    4fe0:	08 95       	ret

00004fe2 <_ZN7TwoWire15endTransmissionEv>:
    4fe2:	cf 93       	push	r28
    4fe4:	df 93       	push	r29
    4fe6:	00 d0       	rcall	.+0      	; 0x4fe8 <_ZN7TwoWire15endTransmissionEv+0x6>
    4fe8:	cd b7       	in	r28, 0x3d	; 61
    4fea:	de b7       	in	r29, 0x3e	; 62
    4fec:	9a 83       	std	Y+2, r25	; 0x02
    4fee:	89 83       	std	Y+1, r24	; 0x01
    4ff0:	89 81       	ldd	r24, Y+1	; 0x01
    4ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff4:	61 e0       	ldi	r22, 0x01	; 1
    4ff6:	d1 df       	rcall	.-94     	; 0x4f9a <_ZN7TwoWire15endTransmissionEh>
    4ff8:	0f 90       	pop	r0
    4ffa:	0f 90       	pop	r0
    4ffc:	df 91       	pop	r29
    4ffe:	cf 91       	pop	r28
    5000:	08 95       	ret

00005002 <_ZN7TwoWire5writeEh>:
    5002:	cf 93       	push	r28
    5004:	df 93       	push	r29
    5006:	00 d0       	rcall	.+0      	; 0x5008 <_ZN7TwoWire5writeEh+0x6>
    5008:	1f 92       	push	r1
    500a:	cd b7       	in	r28, 0x3d	; 61
    500c:	de b7       	in	r29, 0x3e	; 62
    500e:	9a 83       	std	Y+2, r25	; 0x02
    5010:	89 83       	std	Y+1, r24	; 0x01
    5012:	6b 83       	std	Y+3, r22	; 0x03
    5014:	80 91 67 04 	lds	r24, 0x0467
    5018:	88 23       	and	r24, r24
    501a:	f9 f0       	breq	.+62     	; 0x505a <_ZN7TwoWire5writeEh+0x58>
    501c:	80 91 66 04 	lds	r24, 0x0466
    5020:	80 32       	cpi	r24, 0x20	; 32
    5022:	40 f0       	brcs	.+16     	; 0x5034 <_ZN7TwoWire5writeEh+0x32>
    5024:	89 81       	ldd	r24, Y+1	; 0x01
    5026:	9a 81       	ldd	r25, Y+2	; 0x02
    5028:	61 e0       	ldi	r22, 0x01	; 1
    502a:	70 e0       	ldi	r23, 0x00	; 0
    502c:	de de       	rcall	.-580    	; 0x4dea <_ZN5Print13setWriteErrorEi>
    502e:	80 e0       	ldi	r24, 0x00	; 0
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	19 c0       	rjmp	.+50     	; 0x5066 <_ZN7TwoWire5writeEh+0x64>
    5034:	80 91 65 04 	lds	r24, 0x0465
    5038:	88 2f       	mov	r24, r24
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	2b 81       	ldd	r18, Y+3	; 0x03
    503e:	8b 5b       	subi	r24, 0xBB	; 187
    5040:	9b 4f       	sbci	r25, 0xFB	; 251
    5042:	fc 01       	movw	r30, r24
    5044:	20 83       	st	Z, r18
    5046:	80 91 65 04 	lds	r24, 0x0465
    504a:	8f 5f       	subi	r24, 0xFF	; 255
    504c:	80 93 65 04 	sts	0x0465, r24
    5050:	80 91 65 04 	lds	r24, 0x0465
    5054:	80 93 66 04 	sts	0x0466, r24
    5058:	04 c0       	rjmp	.+8      	; 0x5062 <_ZN7TwoWire5writeEh+0x60>
    505a:	ce 01       	movw	r24, r28
    505c:	03 96       	adiw	r24, 0x03	; 3
    505e:	61 e0       	ldi	r22, 0x01	; 1
    5060:	07 dd       	rcall	.-1522   	; 0x4a70 <twi_transmit>
    5062:	81 e0       	ldi	r24, 0x01	; 1
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	0f 90       	pop	r0
    5068:	0f 90       	pop	r0
    506a:	0f 90       	pop	r0
    506c:	df 91       	pop	r29
    506e:	cf 91       	pop	r28
    5070:	08 95       	ret

00005072 <_ZN7TwoWire5writeEPKhj>:
    5072:	cf 93       	push	r28
    5074:	df 93       	push	r29
    5076:	cd b7       	in	r28, 0x3d	; 61
    5078:	de b7       	in	r29, 0x3e	; 62
    507a:	28 97       	sbiw	r28, 0x08	; 8
    507c:	0f b6       	in	r0, 0x3f	; 63
    507e:	f8 94       	cli
    5080:	de bf       	out	0x3e, r29	; 62
    5082:	0f be       	out	0x3f, r0	; 63
    5084:	cd bf       	out	0x3d, r28	; 61
    5086:	9c 83       	std	Y+4, r25	; 0x04
    5088:	8b 83       	std	Y+3, r24	; 0x03
    508a:	7e 83       	std	Y+6, r23	; 0x06
    508c:	6d 83       	std	Y+5, r22	; 0x05
    508e:	58 87       	std	Y+8, r21	; 0x08
    5090:	4f 83       	std	Y+7, r20	; 0x07
    5092:	80 91 67 04 	lds	r24, 0x0467
    5096:	88 23       	and	r24, r24
    5098:	29 f1       	breq	.+74     	; 0x50e4 <_ZN7TwoWire5writeEPKhj+0x72>
    509a:	1a 82       	std	Y+2, r1	; 0x02
    509c:	19 82       	std	Y+1, r1	; 0x01
    509e:	1a c0       	rjmp	.+52     	; 0x50d4 <_ZN7TwoWire5writeEPKhj+0x62>
    50a0:	8b 81       	ldd	r24, Y+3	; 0x03
    50a2:	9c 81       	ldd	r25, Y+4	; 0x04
    50a4:	fc 01       	movw	r30, r24
    50a6:	80 81       	ld	r24, Z
    50a8:	91 81       	ldd	r25, Z+1	; 0x01
    50aa:	fc 01       	movw	r30, r24
    50ac:	20 81       	ld	r18, Z
    50ae:	31 81       	ldd	r19, Z+1	; 0x01
    50b0:	4d 81       	ldd	r20, Y+5	; 0x05
    50b2:	5e 81       	ldd	r21, Y+6	; 0x06
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	9a 81       	ldd	r25, Y+2	; 0x02
    50b8:	84 0f       	add	r24, r20
    50ba:	95 1f       	adc	r25, r21
    50bc:	fc 01       	movw	r30, r24
    50be:	40 81       	ld	r20, Z
    50c0:	8b 81       	ldd	r24, Y+3	; 0x03
    50c2:	9c 81       	ldd	r25, Y+4	; 0x04
    50c4:	64 2f       	mov	r22, r20
    50c6:	f9 01       	movw	r30, r18
    50c8:	09 95       	icall
    50ca:	89 81       	ldd	r24, Y+1	; 0x01
    50cc:	9a 81       	ldd	r25, Y+2	; 0x02
    50ce:	01 96       	adiw	r24, 0x01	; 1
    50d0:	9a 83       	std	Y+2, r25	; 0x02
    50d2:	89 83       	std	Y+1, r24	; 0x01
    50d4:	29 81       	ldd	r18, Y+1	; 0x01
    50d6:	3a 81       	ldd	r19, Y+2	; 0x02
    50d8:	8f 81       	ldd	r24, Y+7	; 0x07
    50da:	98 85       	ldd	r25, Y+8	; 0x08
    50dc:	28 17       	cp	r18, r24
    50de:	39 07       	cpc	r19, r25
    50e0:	f8 f2       	brcs	.-66     	; 0x50a0 <_ZN7TwoWire5writeEPKhj+0x2e>
    50e2:	05 c0       	rjmp	.+10     	; 0x50ee <_ZN7TwoWire5writeEPKhj+0x7c>
    50e4:	2f 81       	ldd	r18, Y+7	; 0x07
    50e6:	8d 81       	ldd	r24, Y+5	; 0x05
    50e8:	9e 81       	ldd	r25, Y+6	; 0x06
    50ea:	62 2f       	mov	r22, r18
    50ec:	c1 dc       	rcall	.-1662   	; 0x4a70 <twi_transmit>
    50ee:	8f 81       	ldd	r24, Y+7	; 0x07
    50f0:	98 85       	ldd	r25, Y+8	; 0x08
    50f2:	28 96       	adiw	r28, 0x08	; 8
    50f4:	0f b6       	in	r0, 0x3f	; 63
    50f6:	f8 94       	cli
    50f8:	de bf       	out	0x3e, r29	; 62
    50fa:	0f be       	out	0x3f, r0	; 63
    50fc:	cd bf       	out	0x3d, r28	; 61
    50fe:	df 91       	pop	r29
    5100:	cf 91       	pop	r28
    5102:	08 95       	ret

00005104 <_ZN7TwoWire9availableEv>:
    5104:	cf 93       	push	r28
    5106:	df 93       	push	r29
    5108:	00 d0       	rcall	.+0      	; 0x510a <_ZN7TwoWire9availableEv+0x6>
    510a:	cd b7       	in	r28, 0x3d	; 61
    510c:	de b7       	in	r29, 0x3e	; 62
    510e:	9a 83       	std	Y+2, r25	; 0x02
    5110:	89 83       	std	Y+1, r24	; 0x01
    5112:	80 91 43 04 	lds	r24, 0x0443
    5116:	28 2f       	mov	r18, r24
    5118:	30 e0       	ldi	r19, 0x00	; 0
    511a:	80 91 42 04 	lds	r24, 0x0442
    511e:	88 2f       	mov	r24, r24
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	a9 01       	movw	r20, r18
    5124:	48 1b       	sub	r20, r24
    5126:	59 0b       	sbc	r21, r25
    5128:	ca 01       	movw	r24, r20
    512a:	0f 90       	pop	r0
    512c:	0f 90       	pop	r0
    512e:	df 91       	pop	r29
    5130:	cf 91       	pop	r28
    5132:	08 95       	ret

00005134 <_ZN7TwoWire4readEv>:
    5134:	cf 93       	push	r28
    5136:	df 93       	push	r29
    5138:	00 d0       	rcall	.+0      	; 0x513a <_ZN7TwoWire4readEv+0x6>
    513a:	00 d0       	rcall	.+0      	; 0x513c <_ZN7TwoWire4readEv+0x8>
    513c:	cd b7       	in	r28, 0x3d	; 61
    513e:	de b7       	in	r29, 0x3e	; 62
    5140:	9c 83       	std	Y+4, r25	; 0x04
    5142:	8b 83       	std	Y+3, r24	; 0x03
    5144:	8f ef       	ldi	r24, 0xFF	; 255
    5146:	9f ef       	ldi	r25, 0xFF	; 255
    5148:	9a 83       	std	Y+2, r25	; 0x02
    514a:	89 83       	std	Y+1, r24	; 0x01
    514c:	90 91 42 04 	lds	r25, 0x0442
    5150:	80 91 43 04 	lds	r24, 0x0443
    5154:	98 17       	cp	r25, r24
    5156:	88 f4       	brcc	.+34     	; 0x517a <_ZN7TwoWire4readEv+0x46>
    5158:	80 91 42 04 	lds	r24, 0x0442
    515c:	88 2f       	mov	r24, r24
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	8e 5d       	subi	r24, 0xDE	; 222
    5162:	9b 4f       	sbci	r25, 0xFB	; 251
    5164:	fc 01       	movw	r30, r24
    5166:	80 81       	ld	r24, Z
    5168:	88 2f       	mov	r24, r24
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	9a 83       	std	Y+2, r25	; 0x02
    516e:	89 83       	std	Y+1, r24	; 0x01
    5170:	80 91 42 04 	lds	r24, 0x0442
    5174:	8f 5f       	subi	r24, 0xFF	; 255
    5176:	80 93 42 04 	sts	0x0442, r24
    517a:	89 81       	ldd	r24, Y+1	; 0x01
    517c:	9a 81       	ldd	r25, Y+2	; 0x02
    517e:	0f 90       	pop	r0
    5180:	0f 90       	pop	r0
    5182:	0f 90       	pop	r0
    5184:	0f 90       	pop	r0
    5186:	df 91       	pop	r29
    5188:	cf 91       	pop	r28
    518a:	08 95       	ret

0000518c <_ZN7TwoWire4peekEv>:
    518c:	cf 93       	push	r28
    518e:	df 93       	push	r29
    5190:	00 d0       	rcall	.+0      	; 0x5192 <_ZN7TwoWire4peekEv+0x6>
    5192:	00 d0       	rcall	.+0      	; 0x5194 <_ZN7TwoWire4peekEv+0x8>
    5194:	cd b7       	in	r28, 0x3d	; 61
    5196:	de b7       	in	r29, 0x3e	; 62
    5198:	9c 83       	std	Y+4, r25	; 0x04
    519a:	8b 83       	std	Y+3, r24	; 0x03
    519c:	8f ef       	ldi	r24, 0xFF	; 255
    519e:	9f ef       	ldi	r25, 0xFF	; 255
    51a0:	9a 83       	std	Y+2, r25	; 0x02
    51a2:	89 83       	std	Y+1, r24	; 0x01
    51a4:	90 91 42 04 	lds	r25, 0x0442
    51a8:	80 91 43 04 	lds	r24, 0x0443
    51ac:	98 17       	cp	r25, r24
    51ae:	60 f4       	brcc	.+24     	; 0x51c8 <_ZN7TwoWire4peekEv+0x3c>
    51b0:	80 91 42 04 	lds	r24, 0x0442
    51b4:	88 2f       	mov	r24, r24
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	8e 5d       	subi	r24, 0xDE	; 222
    51ba:	9b 4f       	sbci	r25, 0xFB	; 251
    51bc:	fc 01       	movw	r30, r24
    51be:	80 81       	ld	r24, Z
    51c0:	88 2f       	mov	r24, r24
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	9a 83       	std	Y+2, r25	; 0x02
    51c6:	89 83       	std	Y+1, r24	; 0x01
    51c8:	89 81       	ldd	r24, Y+1	; 0x01
    51ca:	9a 81       	ldd	r25, Y+2	; 0x02
    51cc:	0f 90       	pop	r0
    51ce:	0f 90       	pop	r0
    51d0:	0f 90       	pop	r0
    51d2:	0f 90       	pop	r0
    51d4:	df 91       	pop	r29
    51d6:	cf 91       	pop	r28
    51d8:	08 95       	ret

000051da <_ZN7TwoWire5flushEv>:
    51da:	cf 93       	push	r28
    51dc:	df 93       	push	r29
    51de:	00 d0       	rcall	.+0      	; 0x51e0 <_ZN7TwoWire5flushEv+0x6>
    51e0:	cd b7       	in	r28, 0x3d	; 61
    51e2:	de b7       	in	r29, 0x3e	; 62
    51e4:	9a 83       	std	Y+2, r25	; 0x02
    51e6:	89 83       	std	Y+1, r24	; 0x01
    51e8:	0f 90       	pop	r0
    51ea:	0f 90       	pop	r0
    51ec:	df 91       	pop	r29
    51ee:	cf 91       	pop	r28
    51f0:	08 95       	ret

000051f2 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    51f2:	cf 93       	push	r28
    51f4:	df 93       	push	r29
    51f6:	00 d0       	rcall	.+0      	; 0x51f8 <_Z41__static_initialization_and_destruction_0ii+0x6>
    51f8:	00 d0       	rcall	.+0      	; 0x51fa <_Z41__static_initialization_and_destruction_0ii+0x8>
    51fa:	cd b7       	in	r28, 0x3d	; 61
    51fc:	de b7       	in	r29, 0x3e	; 62
    51fe:	9a 83       	std	Y+2, r25	; 0x02
    5200:	89 83       	std	Y+1, r24	; 0x01
    5202:	7c 83       	std	Y+4, r23	; 0x04
    5204:	6b 83       	std	Y+3, r22	; 0x03
    5206:	89 81       	ldd	r24, Y+1	; 0x01
    5208:	9a 81       	ldd	r25, Y+2	; 0x02
    520a:	81 30       	cpi	r24, 0x01	; 1
    520c:	91 05       	cpc	r25, r1
    520e:	49 f4       	brne	.+18     	; 0x5222 <_Z41__static_initialization_and_destruction_0ii+0x30>
    5210:	8b 81       	ldd	r24, Y+3	; 0x03
    5212:	9c 81       	ldd	r25, Y+4	; 0x04
    5214:	8f 3f       	cpi	r24, 0xFF	; 255
    5216:	2f ef       	ldi	r18, 0xFF	; 255
    5218:	92 07       	cpc	r25, r18
    521a:	19 f4       	brne	.+6      	; 0x5222 <_Z41__static_initialization_and_destruction_0ii+0x30>
    521c:	88 e6       	ldi	r24, 0x68	; 104
    521e:	94 e0       	ldi	r25, 0x04	; 4
    5220:	1e de       	rcall	.-964    	; 0x4e5e <_ZN7TwoWireC1Ev>
    5222:	0f 90       	pop	r0
    5224:	0f 90       	pop	r0
    5226:	0f 90       	pop	r0
    5228:	0f 90       	pop	r0
    522a:	df 91       	pop	r29
    522c:	cf 91       	pop	r28
    522e:	08 95       	ret

00005230 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    5230:	cf 93       	push	r28
    5232:	df 93       	push	r29
    5234:	cd b7       	in	r28, 0x3d	; 61
    5236:	de b7       	in	r29, 0x3e	; 62
    5238:	6f ef       	ldi	r22, 0xFF	; 255
    523a:	7f ef       	ldi	r23, 0xFF	; 255
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	d8 df       	rcall	.-80     	; 0x51f2 <_Z41__static_initialization_and_destruction_0ii>
    5242:	df 91       	pop	r29
    5244:	cf 91       	pop	r28
    5246:	08 95       	ret

00005248 <_ZN14HardwareSerial9availableEv>:
    5248:	fc 01       	movw	r30, r24
    524a:	84 85       	ldd	r24, Z+12	; 0x0c
    524c:	95 85       	ldd	r25, Z+13	; 0x0d
    524e:	fc 01       	movw	r30, r24
    5250:	e0 5c       	subi	r30, 0xC0	; 192
    5252:	ff 4f       	sbci	r31, 0xFF	; 255
    5254:	20 81       	ld	r18, Z
    5256:	31 81       	ldd	r19, Z+1	; 0x01
    5258:	fc 01       	movw	r30, r24
    525a:	ee 5b       	subi	r30, 0xBE	; 190
    525c:	ff 4f       	sbci	r31, 0xFF	; 255
    525e:	80 81       	ld	r24, Z
    5260:	91 81       	ldd	r25, Z+1	; 0x01
    5262:	28 1b       	sub	r18, r24
    5264:	39 0b       	sbc	r19, r25
    5266:	2f 73       	andi	r18, 0x3F	; 63
    5268:	33 27       	eor	r19, r19
    526a:	c9 01       	movw	r24, r18
    526c:	08 95       	ret

0000526e <_ZN14HardwareSerial4peekEv>:
    526e:	fc 01       	movw	r30, r24
    5270:	84 85       	ldd	r24, Z+12	; 0x0c
    5272:	95 85       	ldd	r25, Z+13	; 0x0d
    5274:	fc 01       	movw	r30, r24
    5276:	e0 5c       	subi	r30, 0xC0	; 192
    5278:	ff 4f       	sbci	r31, 0xFF	; 255
    527a:	40 81       	ld	r20, Z
    527c:	51 81       	ldd	r21, Z+1	; 0x01
    527e:	fc 01       	movw	r30, r24
    5280:	ee 5b       	subi	r30, 0xBE	; 190
    5282:	ff 4f       	sbci	r31, 0xFF	; 255
    5284:	20 81       	ld	r18, Z
    5286:	31 81       	ldd	r19, Z+1	; 0x01
    5288:	42 17       	cp	r20, r18
    528a:	53 07       	cpc	r21, r19
    528c:	41 f0       	breq	.+16     	; 0x529e <_ZN14HardwareSerial4peekEv+0x30>
    528e:	01 90       	ld	r0, Z+
    5290:	f0 81       	ld	r31, Z
    5292:	e0 2d       	mov	r30, r0
    5294:	e8 0f       	add	r30, r24
    5296:	f9 1f       	adc	r31, r25
    5298:	20 81       	ld	r18, Z
    529a:	30 e0       	ldi	r19, 0x00	; 0
    529c:	02 c0       	rjmp	.+4      	; 0x52a2 <_ZN14HardwareSerial4peekEv+0x34>
    529e:	2f ef       	ldi	r18, 0xFF	; 255
    52a0:	3f ef       	ldi	r19, 0xFF	; 255
    52a2:	c9 01       	movw	r24, r18
    52a4:	08 95       	ret

000052a6 <_ZN14HardwareSerial4readEv>:
    52a6:	fc 01       	movw	r30, r24
    52a8:	84 85       	ldd	r24, Z+12	; 0x0c
    52aa:	95 85       	ldd	r25, Z+13	; 0x0d
    52ac:	fc 01       	movw	r30, r24
    52ae:	e0 5c       	subi	r30, 0xC0	; 192
    52b0:	ff 4f       	sbci	r31, 0xFF	; 255
    52b2:	40 81       	ld	r20, Z
    52b4:	51 81       	ldd	r21, Z+1	; 0x01
    52b6:	fc 01       	movw	r30, r24
    52b8:	ee 5b       	subi	r30, 0xBE	; 190
    52ba:	ff 4f       	sbci	r31, 0xFF	; 255
    52bc:	20 81       	ld	r18, Z
    52be:	31 81       	ldd	r19, Z+1	; 0x01
    52c0:	42 17       	cp	r20, r18
    52c2:	53 07       	cpc	r21, r19
    52c4:	81 f0       	breq	.+32     	; 0x52e6 <_ZN14HardwareSerial4readEv+0x40>
    52c6:	a0 81       	ld	r26, Z
    52c8:	b1 81       	ldd	r27, Z+1	; 0x01
    52ca:	a8 0f       	add	r26, r24
    52cc:	b9 1f       	adc	r27, r25
    52ce:	8c 91       	ld	r24, X
    52d0:	20 81       	ld	r18, Z
    52d2:	31 81       	ldd	r19, Z+1	; 0x01
    52d4:	2f 5f       	subi	r18, 0xFF	; 255
    52d6:	3f 4f       	sbci	r19, 0xFF	; 255
    52d8:	2f 73       	andi	r18, 0x3F	; 63
    52da:	33 27       	eor	r19, r19
    52dc:	31 83       	std	Z+1, r19	; 0x01
    52de:	20 83       	st	Z, r18
    52e0:	28 2f       	mov	r18, r24
    52e2:	30 e0       	ldi	r19, 0x00	; 0
    52e4:	02 c0       	rjmp	.+4      	; 0x52ea <_ZN14HardwareSerial4readEv+0x44>
    52e6:	2f ef       	ldi	r18, 0xFF	; 255
    52e8:	3f ef       	ldi	r19, 0xFF	; 255
    52ea:	c9 01       	movw	r24, r18
    52ec:	08 95       	ret

000052ee <_ZN14HardwareSerial5flushEv>:
    52ee:	fc 01       	movw	r30, r24
    52f0:	81 a1       	ldd	r24, Z+33	; 0x21
    52f2:	88 23       	and	r24, r24
    52f4:	29 f0       	breq	.+10     	; 0x5300 <_ZN14HardwareSerial5flushEv+0x12>
    52f6:	a4 89       	ldd	r26, Z+20	; 0x14
    52f8:	b5 89       	ldd	r27, Z+21	; 0x15
    52fa:	8c 91       	ld	r24, X
    52fc:	86 ff       	sbrs	r24, 6
    52fe:	fb cf       	rjmp	.-10     	; 0x52f6 <_ZN14HardwareSerial5flushEv+0x8>
    5300:	11 a2       	std	Z+33, r1	; 0x21
    5302:	08 95       	ret

00005304 <_ZN14HardwareSerial5writeEh>:
    5304:	cf 93       	push	r28
    5306:	df 93       	push	r29
    5308:	fc 01       	movw	r30, r24
    530a:	26 85       	ldd	r18, Z+14	; 0x0e
    530c:	37 85       	ldd	r19, Z+15	; 0x0f
    530e:	d9 01       	movw	r26, r18
    5310:	a0 5c       	subi	r26, 0xC0	; 192
    5312:	bf 4f       	sbci	r27, 0xFF	; 255
    5314:	8d 91       	ld	r24, X+
    5316:	9c 91       	ld	r25, X
    5318:	11 97       	sbiw	r26, 0x01	; 1
    531a:	01 96       	adiw	r24, 0x01	; 1
    531c:	8f 73       	andi	r24, 0x3F	; 63
    531e:	99 27       	eor	r25, r25
    5320:	e9 01       	movw	r28, r18
    5322:	ce 5b       	subi	r28, 0xBE	; 190
    5324:	df 4f       	sbci	r29, 0xFF	; 255
    5326:	48 81       	ld	r20, Y
    5328:	59 81       	ldd	r21, Y+1	; 0x01
    532a:	84 17       	cp	r24, r20
    532c:	95 07       	cpc	r25, r21
    532e:	d9 f3       	breq	.-10     	; 0x5326 <_ZN14HardwareSerial5writeEh+0x22>
    5330:	0d 90       	ld	r0, X+
    5332:	bc 91       	ld	r27, X
    5334:	a0 2d       	mov	r26, r0
    5336:	a2 0f       	add	r26, r18
    5338:	b3 1f       	adc	r27, r19
    533a:	6c 93       	st	X, r22
    533c:	a6 85       	ldd	r26, Z+14	; 0x0e
    533e:	b7 85       	ldd	r27, Z+15	; 0x0f
    5340:	a0 5c       	subi	r26, 0xC0	; 192
    5342:	bf 4f       	sbci	r27, 0xFF	; 255
    5344:	11 96       	adiw	r26, 0x01	; 1
    5346:	9c 93       	st	X, r25
    5348:	8e 93       	st	-X, r24
    534a:	a6 89       	ldd	r26, Z+22	; 0x16
    534c:	b7 89       	ldd	r27, Z+23	; 0x17
    534e:	2c 91       	ld	r18, X
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	07 8c       	ldd	r0, Z+31	; 0x1f
    5356:	02 c0       	rjmp	.+4      	; 0x535c <_ZN14HardwareSerial5writeEh+0x58>
    5358:	88 0f       	add	r24, r24
    535a:	99 1f       	adc	r25, r25
    535c:	0a 94       	dec	r0
    535e:	e2 f7       	brpl	.-8      	; 0x5358 <_ZN14HardwareSerial5writeEh+0x54>
    5360:	28 2b       	or	r18, r24
    5362:	2c 93       	st	X, r18
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	81 a3       	std	Z+33, r24	; 0x21
    5368:	04 88       	ldd	r0, Z+20	; 0x14
    536a:	f5 89       	ldd	r31, Z+21	; 0x15
    536c:	e0 2d       	mov	r30, r0
    536e:	80 81       	ld	r24, Z
    5370:	80 64       	ori	r24, 0x40	; 64
    5372:	80 83       	st	Z, r24
    5374:	81 e0       	ldi	r24, 0x01	; 1
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	df 91       	pop	r29
    537a:	cf 91       	pop	r28
    537c:	08 95       	ret

0000537e <_Z11serialEventv>:
    537e:	08 95       	ret

00005380 <__vector_18>:
    5380:	1f 92       	push	r1
    5382:	0f 92       	push	r0
    5384:	0f b6       	in	r0, 0x3f	; 63
    5386:	0f 92       	push	r0
    5388:	11 24       	eor	r1, r1
    538a:	2f 93       	push	r18
    538c:	3f 93       	push	r19
    538e:	4f 93       	push	r20
    5390:	8f 93       	push	r24
    5392:	9f 93       	push	r25
    5394:	ef 93       	push	r30
    5396:	ff 93       	push	r31
    5398:	80 91 c0 00 	lds	r24, 0x00C0
    539c:	82 fd       	sbrc	r24, 2
    539e:	1c c0       	rjmp	.+56     	; 0x53d8 <__vector_18+0x58>
    53a0:	40 91 c6 00 	lds	r20, 0x00C6
    53a4:	80 91 1a 05 	lds	r24, 0x051A
    53a8:	90 91 1b 05 	lds	r25, 0x051B
    53ac:	01 96       	adiw	r24, 0x01	; 1
    53ae:	8f 73       	andi	r24, 0x3F	; 63
    53b0:	99 27       	eor	r25, r25
    53b2:	20 91 1c 05 	lds	r18, 0x051C
    53b6:	30 91 1d 05 	lds	r19, 0x051D
    53ba:	82 17       	cp	r24, r18
    53bc:	93 07       	cpc	r25, r19
    53be:	71 f0       	breq	.+28     	; 0x53dc <__vector_18+0x5c>
    53c0:	e0 91 1a 05 	lds	r30, 0x051A
    53c4:	f0 91 1b 05 	lds	r31, 0x051B
    53c8:	e6 52       	subi	r30, 0x26	; 38
    53ca:	fb 4f       	sbci	r31, 0xFB	; 251
    53cc:	40 83       	st	Z, r20
    53ce:	90 93 1b 05 	sts	0x051B, r25
    53d2:	80 93 1a 05 	sts	0x051A, r24
    53d6:	02 c0       	rjmp	.+4      	; 0x53dc <__vector_18+0x5c>
    53d8:	80 91 c6 00 	lds	r24, 0x00C6
    53dc:	ff 91       	pop	r31
    53de:	ef 91       	pop	r30
    53e0:	9f 91       	pop	r25
    53e2:	8f 91       	pop	r24
    53e4:	4f 91       	pop	r20
    53e6:	3f 91       	pop	r19
    53e8:	2f 91       	pop	r18
    53ea:	0f 90       	pop	r0
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	0f 90       	pop	r0
    53f0:	1f 90       	pop	r1
    53f2:	18 95       	reti

000053f4 <_Z14serialEventRunv>:
    53f4:	84 e7       	ldi	r24, 0x74	; 116
    53f6:	94 e0       	ldi	r25, 0x04	; 4
    53f8:	27 df       	rcall	.-434    	; 0x5248 <_ZN14HardwareSerial9availableEv>
    53fa:	89 2b       	or	r24, r25
    53fc:	09 f0       	breq	.+2      	; 0x5400 <_Z14serialEventRunv+0xc>
    53fe:	bf cf       	rjmp	.-130    	; 0x537e <_Z11serialEventv>
    5400:	08 95       	ret

00005402 <__vector_19>:
    5402:	1f 92       	push	r1
    5404:	0f 92       	push	r0
    5406:	0f b6       	in	r0, 0x3f	; 63
    5408:	0f 92       	push	r0
    540a:	11 24       	eor	r1, r1
    540c:	2f 93       	push	r18
    540e:	3f 93       	push	r19
    5410:	8f 93       	push	r24
    5412:	9f 93       	push	r25
    5414:	ef 93       	push	r30
    5416:	ff 93       	push	r31
    5418:	20 91 d6 04 	lds	r18, 0x04D6
    541c:	30 91 d7 04 	lds	r19, 0x04D7
    5420:	80 91 d8 04 	lds	r24, 0x04D8
    5424:	90 91 d9 04 	lds	r25, 0x04D9
    5428:	28 17       	cp	r18, r24
    542a:	39 07       	cpc	r19, r25
    542c:	31 f4       	brne	.+12     	; 0x543a <__vector_19+0x38>
    542e:	80 91 c1 00 	lds	r24, 0x00C1
    5432:	8f 7d       	andi	r24, 0xDF	; 223
    5434:	80 93 c1 00 	sts	0x00C1, r24
    5438:	14 c0       	rjmp	.+40     	; 0x5462 <__vector_19+0x60>
    543a:	e0 91 d8 04 	lds	r30, 0x04D8
    543e:	f0 91 d9 04 	lds	r31, 0x04D9
    5442:	ea 56       	subi	r30, 0x6A	; 106
    5444:	fb 4f       	sbci	r31, 0xFB	; 251
    5446:	20 81       	ld	r18, Z
    5448:	80 91 d8 04 	lds	r24, 0x04D8
    544c:	90 91 d9 04 	lds	r25, 0x04D9
    5450:	01 96       	adiw	r24, 0x01	; 1
    5452:	8f 73       	andi	r24, 0x3F	; 63
    5454:	99 27       	eor	r25, r25
    5456:	90 93 d9 04 	sts	0x04D9, r25
    545a:	80 93 d8 04 	sts	0x04D8, r24
    545e:	20 93 c6 00 	sts	0x00C6, r18
    5462:	ff 91       	pop	r31
    5464:	ef 91       	pop	r30
    5466:	9f 91       	pop	r25
    5468:	8f 91       	pop	r24
    546a:	3f 91       	pop	r19
    546c:	2f 91       	pop	r18
    546e:	0f 90       	pop	r0
    5470:	0f be       	out	0x3f, r0	; 63
    5472:	0f 90       	pop	r0
    5474:	1f 90       	pop	r1
    5476:	18 95       	reti

00005478 <_ZN14HardwareSerial5beginEm>:
    5478:	cf 92       	push	r12
    547a:	df 92       	push	r13
    547c:	ef 92       	push	r14
    547e:	ff 92       	push	r15
    5480:	cf 93       	push	r28
    5482:	df 93       	push	r29
    5484:	ec 01       	movw	r28, r24
    5486:	6a 01       	movw	r12, r20
    5488:	7b 01       	movw	r14, r22
    548a:	41 15       	cp	r20, r1
    548c:	81 ee       	ldi	r24, 0xE1	; 225
    548e:	58 07       	cpc	r21, r24
    5490:	61 05       	cpc	r22, r1
    5492:	71 05       	cpc	r23, r1
    5494:	f9 f0       	breq	.+62     	; 0x54d4 <_ZN14HardwareSerial5beginEm+0x5c>
    5496:	ec 89       	ldd	r30, Y+20	; 0x14
    5498:	fd 89       	ldd	r31, Y+21	; 0x15
    549a:	81 e0       	ldi	r24, 0x01	; 1
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	08 a0       	ldd	r0, Y+32	; 0x20
    54a0:	02 c0       	rjmp	.+4      	; 0x54a6 <_ZN14HardwareSerial5beginEm+0x2e>
    54a2:	88 0f       	add	r24, r24
    54a4:	99 1f       	adc	r25, r25
    54a6:	0a 94       	dec	r0
    54a8:	e2 f7       	brpl	.-8      	; 0x54a2 <_ZN14HardwareSerial5beginEm+0x2a>
    54aa:	80 83       	st	Z, r24
    54ac:	60 e0       	ldi	r22, 0x00	; 0
    54ae:	79 e0       	ldi	r23, 0x09	; 9
    54b0:	8d e3       	ldi	r24, 0x3D	; 61
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	a7 01       	movw	r20, r14
    54b6:	96 01       	movw	r18, r12
    54b8:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__udivmodsi4>
    54bc:	21 50       	subi	r18, 0x01	; 1
    54be:	31 09       	sbc	r19, r1
    54c0:	41 09       	sbc	r20, r1
    54c2:	51 09       	sbc	r21, r1
    54c4:	56 95       	lsr	r21
    54c6:	47 95       	ror	r20
    54c8:	37 95       	ror	r19
    54ca:	27 95       	ror	r18
    54cc:	21 15       	cp	r18, r1
    54ce:	80 e1       	ldi	r24, 0x10	; 16
    54d0:	38 07       	cpc	r19, r24
    54d2:	98 f0       	brcs	.+38     	; 0x54fa <_ZN14HardwareSerial5beginEm+0x82>
    54d4:	ec 89       	ldd	r30, Y+20	; 0x14
    54d6:	fd 89       	ldd	r31, Y+21	; 0x15
    54d8:	10 82       	st	Z, r1
    54da:	60 e8       	ldi	r22, 0x80	; 128
    54dc:	74 e8       	ldi	r23, 0x84	; 132
    54de:	8e e1       	ldi	r24, 0x1E	; 30
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	a7 01       	movw	r20, r14
    54e4:	96 01       	movw	r18, r12
    54e6:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__udivmodsi4>
    54ea:	21 50       	subi	r18, 0x01	; 1
    54ec:	31 09       	sbc	r19, r1
    54ee:	41 09       	sbc	r20, r1
    54f0:	51 09       	sbc	r21, r1
    54f2:	56 95       	lsr	r21
    54f4:	47 95       	ror	r20
    54f6:	37 95       	ror	r19
    54f8:	27 95       	ror	r18
    54fa:	e8 89       	ldd	r30, Y+16	; 0x10
    54fc:	f9 89       	ldd	r31, Y+17	; 0x11
    54fe:	30 83       	st	Z, r19
    5500:	ea 89       	ldd	r30, Y+18	; 0x12
    5502:	fb 89       	ldd	r31, Y+19	; 0x13
    5504:	20 83       	st	Z, r18
    5506:	19 a2       	std	Y+33, r1	; 0x21
    5508:	ee 89       	ldd	r30, Y+22	; 0x16
    550a:	ff 89       	ldd	r31, Y+23	; 0x17
    550c:	40 81       	ld	r20, Z
    550e:	81 e0       	ldi	r24, 0x01	; 1
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	9c 01       	movw	r18, r24
    5514:	0c 8c       	ldd	r0, Y+28	; 0x1c
    5516:	02 c0       	rjmp	.+4      	; 0x551c <_ZN14HardwareSerial5beginEm+0xa4>
    5518:	22 0f       	add	r18, r18
    551a:	33 1f       	adc	r19, r19
    551c:	0a 94       	dec	r0
    551e:	e2 f7       	brpl	.-8      	; 0x5518 <_ZN14HardwareSerial5beginEm+0xa0>
    5520:	42 2b       	or	r20, r18
    5522:	40 83       	st	Z, r20
    5524:	ee 89       	ldd	r30, Y+22	; 0x16
    5526:	ff 89       	ldd	r31, Y+23	; 0x17
    5528:	40 81       	ld	r20, Z
    552a:	9c 01       	movw	r18, r24
    552c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    552e:	02 c0       	rjmp	.+4      	; 0x5534 <_ZN14HardwareSerial5beginEm+0xbc>
    5530:	22 0f       	add	r18, r18
    5532:	33 1f       	adc	r19, r19
    5534:	0a 94       	dec	r0
    5536:	e2 f7       	brpl	.-8      	; 0x5530 <_ZN14HardwareSerial5beginEm+0xb8>
    5538:	42 2b       	or	r20, r18
    553a:	40 83       	st	Z, r20
    553c:	ee 89       	ldd	r30, Y+22	; 0x16
    553e:	ff 89       	ldd	r31, Y+23	; 0x17
    5540:	40 81       	ld	r20, Z
    5542:	9c 01       	movw	r18, r24
    5544:	0e 8c       	ldd	r0, Y+30	; 0x1e
    5546:	02 c0       	rjmp	.+4      	; 0x554c <_ZN14HardwareSerial5beginEm+0xd4>
    5548:	22 0f       	add	r18, r18
    554a:	33 1f       	adc	r19, r19
    554c:	0a 94       	dec	r0
    554e:	e2 f7       	brpl	.-8      	; 0x5548 <_ZN14HardwareSerial5beginEm+0xd0>
    5550:	42 2b       	or	r20, r18
    5552:	40 83       	st	Z, r20
    5554:	ee 89       	ldd	r30, Y+22	; 0x16
    5556:	ff 89       	ldd	r31, Y+23	; 0x17
    5558:	20 81       	ld	r18, Z
    555a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    555c:	02 c0       	rjmp	.+4      	; 0x5562 <_ZN14HardwareSerial5beginEm+0xea>
    555e:	88 0f       	add	r24, r24
    5560:	99 1f       	adc	r25, r25
    5562:	0a 94       	dec	r0
    5564:	e2 f7       	brpl	.-8      	; 0x555e <_ZN14HardwareSerial5beginEm+0xe6>
    5566:	80 95       	com	r24
    5568:	82 23       	and	r24, r18
    556a:	80 83       	st	Z, r24
    556c:	df 91       	pop	r29
    556e:	cf 91       	pop	r28
    5570:	ff 90       	pop	r15
    5572:	ef 90       	pop	r14
    5574:	df 90       	pop	r13
    5576:	cf 90       	pop	r12
    5578:	08 95       	ret

0000557a <_GLOBAL__sub_I_rx_buffer>:
    557a:	10 92 77 04 	sts	0x0477, r1
    557e:	10 92 76 04 	sts	0x0476, r1
    5582:	88 ee       	ldi	r24, 0xE8	; 232
    5584:	93 e0       	ldi	r25, 0x03	; 3
    5586:	a0 e0       	ldi	r26, 0x00	; 0
    5588:	b0 e0       	ldi	r27, 0x00	; 0
    558a:	80 93 78 04 	sts	0x0478, r24
    558e:	90 93 79 04 	sts	0x0479, r25
    5592:	a0 93 7a 04 	sts	0x047A, r26
    5596:	b0 93 7b 04 	sts	0x047B, r27
    559a:	80 e2       	ldi	r24, 0x20	; 32
    559c:	92 e0       	ldi	r25, 0x02	; 2
    559e:	90 93 75 04 	sts	0x0475, r25
    55a2:	80 93 74 04 	sts	0x0474, r24
    55a6:	8a ed       	ldi	r24, 0xDA	; 218
    55a8:	94 e0       	ldi	r25, 0x04	; 4
    55aa:	90 93 81 04 	sts	0x0481, r25
    55ae:	80 93 80 04 	sts	0x0480, r24
    55b2:	86 e9       	ldi	r24, 0x96	; 150
    55b4:	94 e0       	ldi	r25, 0x04	; 4
    55b6:	90 93 83 04 	sts	0x0483, r25
    55ba:	80 93 82 04 	sts	0x0482, r24
    55be:	85 ec       	ldi	r24, 0xC5	; 197
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	90 93 85 04 	sts	0x0485, r25
    55c6:	80 93 84 04 	sts	0x0484, r24
    55ca:	84 ec       	ldi	r24, 0xC4	; 196
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	90 93 87 04 	sts	0x0487, r25
    55d2:	80 93 86 04 	sts	0x0486, r24
    55d6:	80 ec       	ldi	r24, 0xC0	; 192
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	90 93 89 04 	sts	0x0489, r25
    55de:	80 93 88 04 	sts	0x0488, r24
    55e2:	81 ec       	ldi	r24, 0xC1	; 193
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	90 93 8b 04 	sts	0x048B, r25
    55ea:	80 93 8a 04 	sts	0x048A, r24
    55ee:	82 ec       	ldi	r24, 0xC2	; 194
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	90 93 8d 04 	sts	0x048D, r25
    55f6:	80 93 8c 04 	sts	0x048C, r24
    55fa:	86 ec       	ldi	r24, 0xC6	; 198
    55fc:	90 e0       	ldi	r25, 0x00	; 0
    55fe:	90 93 8f 04 	sts	0x048F, r25
    5602:	80 93 8e 04 	sts	0x048E, r24
    5606:	84 e0       	ldi	r24, 0x04	; 4
    5608:	80 93 90 04 	sts	0x0490, r24
    560c:	83 e0       	ldi	r24, 0x03	; 3
    560e:	80 93 91 04 	sts	0x0491, r24
    5612:	87 e0       	ldi	r24, 0x07	; 7
    5614:	80 93 92 04 	sts	0x0492, r24
    5618:	85 e0       	ldi	r24, 0x05	; 5
    561a:	80 93 93 04 	sts	0x0493, r24
    561e:	81 e0       	ldi	r24, 0x01	; 1
    5620:	80 93 94 04 	sts	0x0494, r24
    5624:	08 95       	ret

00005626 <main>:
    5626:	1e d2       	rcall	.+1084   	; 0x5a64 <init>
    5628:	0e 94 c5 0b 	call	0x178a	; 0x178a <setup>
    562c:	ca ef       	ldi	r28, 0xFA	; 250
    562e:	d9 e2       	ldi	r29, 0x29	; 41
    5630:	0e 94 66 0c 	call	0x18cc	; 0x18cc <loop>
    5634:	20 97       	sbiw	r28, 0x00	; 0
    5636:	e1 f3       	breq	.-8      	; 0x5630 <main+0xa>
    5638:	dd de       	rcall	.-582    	; 0x53f4 <_Z14serialEventRunv>
    563a:	fa cf       	rjmp	.-12     	; 0x5630 <main+0xa>

0000563c <_ZdlPv>:
    563c:	e6 c2       	rjmp	.+1484   	; 0x5c0a <free>

0000563e <__cxa_pure_virtual>:
    563e:	08 95       	ret

00005640 <_ZN5Print5writeEPKhj>:
    5640:	cf 92       	push	r12
    5642:	df 92       	push	r13
    5644:	ef 92       	push	r14
    5646:	ff 92       	push	r15
    5648:	0f 93       	push	r16
    564a:	1f 93       	push	r17
    564c:	cf 93       	push	r28
    564e:	df 93       	push	r29
    5650:	6c 01       	movw	r12, r24
    5652:	eb 01       	movw	r28, r22
    5654:	7a 01       	movw	r14, r20
    5656:	e6 0e       	add	r14, r22
    5658:	f7 1e       	adc	r15, r23
    565a:	00 e0       	ldi	r16, 0x00	; 0
    565c:	10 e0       	ldi	r17, 0x00	; 0
    565e:	0b c0       	rjmp	.+22     	; 0x5676 <_ZN5Print5writeEPKhj+0x36>
    5660:	69 91       	ld	r22, Y+
    5662:	d6 01       	movw	r26, r12
    5664:	ed 91       	ld	r30, X+
    5666:	fc 91       	ld	r31, X
    5668:	01 90       	ld	r0, Z+
    566a:	f0 81       	ld	r31, Z
    566c:	e0 2d       	mov	r30, r0
    566e:	c6 01       	movw	r24, r12
    5670:	09 95       	icall
    5672:	08 0f       	add	r16, r24
    5674:	19 1f       	adc	r17, r25
    5676:	ce 15       	cp	r28, r14
    5678:	df 05       	cpc	r29, r15
    567a:	91 f7       	brne	.-28     	; 0x5660 <_ZN5Print5writeEPKhj+0x20>
    567c:	c8 01       	movw	r24, r16
    567e:	df 91       	pop	r29
    5680:	cf 91       	pop	r28
    5682:	1f 91       	pop	r17
    5684:	0f 91       	pop	r16
    5686:	ff 90       	pop	r15
    5688:	ef 90       	pop	r14
    568a:	df 90       	pop	r13
    568c:	cf 90       	pop	r12
    568e:	08 95       	ret

00005690 <_ZN5Print5writeEPKc>:
    5690:	61 15       	cp	r22, r1
    5692:	71 05       	cpc	r23, r1
    5694:	81 f0       	breq	.+32     	; 0x56b6 <_ZN5Print5writeEPKc+0x26>
    5696:	db 01       	movw	r26, r22
    5698:	0d 90       	ld	r0, X+
    569a:	00 20       	and	r0, r0
    569c:	e9 f7       	brne	.-6      	; 0x5698 <_ZN5Print5writeEPKc+0x8>
    569e:	ad 01       	movw	r20, r26
    56a0:	41 50       	subi	r20, 0x01	; 1
    56a2:	51 09       	sbc	r21, r1
    56a4:	46 1b       	sub	r20, r22
    56a6:	57 0b       	sbc	r21, r23
    56a8:	dc 01       	movw	r26, r24
    56aa:	ed 91       	ld	r30, X+
    56ac:	fc 91       	ld	r31, X
    56ae:	02 80       	ldd	r0, Z+2	; 0x02
    56b0:	f3 81       	ldd	r31, Z+3	; 0x03
    56b2:	e0 2d       	mov	r30, r0
    56b4:	09 94       	ijmp
    56b6:	80 e0       	ldi	r24, 0x00	; 0
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	08 95       	ret

000056bc <_ZN5Print5printEPK19__FlashStringHelper>:
    56bc:	ef 92       	push	r14
    56be:	ff 92       	push	r15
    56c0:	0f 93       	push	r16
    56c2:	1f 93       	push	r17
    56c4:	cf 93       	push	r28
    56c6:	df 93       	push	r29
    56c8:	7c 01       	movw	r14, r24
    56ca:	eb 01       	movw	r28, r22
    56cc:	00 e0       	ldi	r16, 0x00	; 0
    56ce:	10 e0       	ldi	r17, 0x00	; 0
    56d0:	fe 01       	movw	r30, r28
    56d2:	21 96       	adiw	r28, 0x01	; 1
    56d4:	64 91       	lpm	r22, Z
    56d6:	66 23       	and	r22, r22
    56d8:	51 f0       	breq	.+20     	; 0x56ee <_ZN5Print5printEPK19__FlashStringHelper+0x32>
    56da:	f7 01       	movw	r30, r14
    56dc:	a0 81       	ld	r26, Z
    56de:	b1 81       	ldd	r27, Z+1	; 0x01
    56e0:	ed 91       	ld	r30, X+
    56e2:	fc 91       	ld	r31, X
    56e4:	c7 01       	movw	r24, r14
    56e6:	09 95       	icall
    56e8:	08 0f       	add	r16, r24
    56ea:	19 1f       	adc	r17, r25
    56ec:	f1 cf       	rjmp	.-30     	; 0x56d0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    56ee:	c8 01       	movw	r24, r16
    56f0:	df 91       	pop	r29
    56f2:	cf 91       	pop	r28
    56f4:	1f 91       	pop	r17
    56f6:	0f 91       	pop	r16
    56f8:	ff 90       	pop	r15
    56fa:	ef 90       	pop	r14
    56fc:	08 95       	ret

000056fe <_ZN5Print5printEPKc>:
    56fe:	c8 cf       	rjmp	.-112    	; 0x5690 <_ZN5Print5writeEPKc>

00005700 <_ZN5Print5printEc>:
    5700:	dc 01       	movw	r26, r24
    5702:	ed 91       	ld	r30, X+
    5704:	fc 91       	ld	r31, X
    5706:	01 90       	ld	r0, Z+
    5708:	f0 81       	ld	r31, Z
    570a:	e0 2d       	mov	r30, r0
    570c:	09 94       	ijmp

0000570e <_ZN5Print7printlnEv>:
    570e:	0f 93       	push	r16
    5710:	1f 93       	push	r17
    5712:	cf 93       	push	r28
    5714:	df 93       	push	r29
    5716:	ec 01       	movw	r28, r24
    5718:	6d e0       	ldi	r22, 0x0D	; 13
    571a:	f2 df       	rcall	.-28     	; 0x5700 <_ZN5Print5printEc>
    571c:	8c 01       	movw	r16, r24
    571e:	6a e0       	ldi	r22, 0x0A	; 10
    5720:	ce 01       	movw	r24, r28
    5722:	ee df       	rcall	.-36     	; 0x5700 <_ZN5Print5printEc>
    5724:	9c 01       	movw	r18, r24
    5726:	20 0f       	add	r18, r16
    5728:	31 1f       	adc	r19, r17
    572a:	c9 01       	movw	r24, r18
    572c:	df 91       	pop	r29
    572e:	cf 91       	pop	r28
    5730:	1f 91       	pop	r17
    5732:	0f 91       	pop	r16
    5734:	08 95       	ret

00005736 <_ZN5Print7printlnEPKc>:
    5736:	0f 93       	push	r16
    5738:	1f 93       	push	r17
    573a:	cf 93       	push	r28
    573c:	df 93       	push	r29
    573e:	ec 01       	movw	r28, r24
    5740:	a7 df       	rcall	.-178    	; 0x5690 <_ZN5Print5writeEPKc>
    5742:	8c 01       	movw	r16, r24
    5744:	ce 01       	movw	r24, r28
    5746:	e3 df       	rcall	.-58     	; 0x570e <_ZN5Print7printlnEv>
    5748:	98 01       	movw	r18, r16
    574a:	28 0f       	add	r18, r24
    574c:	39 1f       	adc	r19, r25
    574e:	c9 01       	movw	r24, r18
    5750:	df 91       	pop	r29
    5752:	cf 91       	pop	r28
    5754:	1f 91       	pop	r17
    5756:	0f 91       	pop	r16
    5758:	08 95       	ret

0000575a <_ZN5Print11printNumberEmh>:
    575a:	4f 92       	push	r4
    575c:	5f 92       	push	r5
    575e:	6f 92       	push	r6
    5760:	7f 92       	push	r7
    5762:	9f 92       	push	r9
    5764:	af 92       	push	r10
    5766:	bf 92       	push	r11
    5768:	cf 92       	push	r12
    576a:	df 92       	push	r13
    576c:	ef 92       	push	r14
    576e:	ff 92       	push	r15
    5770:	0f 93       	push	r16
    5772:	1f 93       	push	r17
    5774:	cf 93       	push	r28
    5776:	df 93       	push	r29
    5778:	cd b7       	in	r28, 0x3d	; 61
    577a:	de b7       	in	r29, 0x3e	; 62
    577c:	a1 97       	sbiw	r28, 0x21	; 33
    577e:	0f b6       	in	r0, 0x3f	; 63
    5780:	f8 94       	cli
    5782:	de bf       	out	0x3e, r29	; 62
    5784:	0f be       	out	0x3f, r0	; 63
    5786:	cd bf       	out	0x3d, r28	; 61
    5788:	5c 01       	movw	r10, r24
    578a:	6a 01       	movw	r12, r20
    578c:	7b 01       	movw	r14, r22
    578e:	92 2e       	mov	r9, r18
    5790:	19 a2       	std	Y+33, r1	; 0x21
    5792:	81 e0       	ldi	r24, 0x01	; 1
    5794:	82 17       	cp	r24, r18
    5796:	10 f0       	brcs	.+4      	; 0x579c <_ZN5Print11printNumberEmh+0x42>
    5798:	8a e0       	ldi	r24, 0x0A	; 10
    579a:	98 2e       	mov	r9, r24
    579c:	8e 01       	movw	r16, r28
    579e:	0f 5d       	subi	r16, 0xDF	; 223
    57a0:	1f 4f       	sbci	r17, 0xFF	; 255
    57a2:	49 2c       	mov	r4, r9
    57a4:	51 2c       	mov	r5, r1
    57a6:	61 2c       	mov	r6, r1
    57a8:	71 2c       	mov	r7, r1
    57aa:	c7 01       	movw	r24, r14
    57ac:	b6 01       	movw	r22, r12
    57ae:	a3 01       	movw	r20, r6
    57b0:	92 01       	movw	r18, r4
    57b2:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__udivmodsi4>
    57b6:	8c 2d       	mov	r24, r12
    57b8:	92 9e       	mul	r9, r18
    57ba:	80 19       	sub	r24, r0
    57bc:	11 24       	eor	r1, r1
    57be:	01 50       	subi	r16, 0x01	; 1
    57c0:	11 09       	sbc	r17, r1
    57c2:	8a 30       	cpi	r24, 0x0A	; 10
    57c4:	10 f4       	brcc	.+4      	; 0x57ca <_ZN5Print11printNumberEmh+0x70>
    57c6:	80 5d       	subi	r24, 0xD0	; 208
    57c8:	01 c0       	rjmp	.+2      	; 0x57cc <_ZN5Print11printNumberEmh+0x72>
    57ca:	89 5c       	subi	r24, 0xC9	; 201
    57cc:	f8 01       	movw	r30, r16
    57ce:	80 83       	st	Z, r24
    57d0:	69 01       	movw	r12, r18
    57d2:	7a 01       	movw	r14, r20
    57d4:	c1 14       	cp	r12, r1
    57d6:	d1 04       	cpc	r13, r1
    57d8:	e1 04       	cpc	r14, r1
    57da:	f1 04       	cpc	r15, r1
    57dc:	31 f7       	brne	.-52     	; 0x57aa <_ZN5Print11printNumberEmh+0x50>
    57de:	b8 01       	movw	r22, r16
    57e0:	c5 01       	movw	r24, r10
    57e2:	56 df       	rcall	.-340    	; 0x5690 <_ZN5Print5writeEPKc>
    57e4:	a1 96       	adiw	r28, 0x21	; 33
    57e6:	0f b6       	in	r0, 0x3f	; 63
    57e8:	f8 94       	cli
    57ea:	de bf       	out	0x3e, r29	; 62
    57ec:	0f be       	out	0x3f, r0	; 63
    57ee:	cd bf       	out	0x3d, r28	; 61
    57f0:	df 91       	pop	r29
    57f2:	cf 91       	pop	r28
    57f4:	1f 91       	pop	r17
    57f6:	0f 91       	pop	r16
    57f8:	ff 90       	pop	r15
    57fa:	ef 90       	pop	r14
    57fc:	df 90       	pop	r13
    57fe:	cf 90       	pop	r12
    5800:	bf 90       	pop	r11
    5802:	af 90       	pop	r10
    5804:	9f 90       	pop	r9
    5806:	7f 90       	pop	r7
    5808:	6f 90       	pop	r6
    580a:	5f 90       	pop	r5
    580c:	4f 90       	pop	r4
    580e:	08 95       	ret

00005810 <_ZN5Print5printEmi>:
    5810:	21 15       	cp	r18, r1
    5812:	31 05       	cpc	r19, r1
    5814:	41 f4       	brne	.+16     	; 0x5826 <_ZN5Print5printEmi+0x16>
    5816:	dc 01       	movw	r26, r24
    5818:	ed 91       	ld	r30, X+
    581a:	fc 91       	ld	r31, X
    581c:	01 90       	ld	r0, Z+
    581e:	f0 81       	ld	r31, Z
    5820:	e0 2d       	mov	r30, r0
    5822:	64 2f       	mov	r22, r20
    5824:	09 94       	ijmp
    5826:	99 cf       	rjmp	.-206    	; 0x575a <_ZN5Print11printNumberEmh>

00005828 <_ZN5Print5printEji>:
    5828:	9a 01       	movw	r18, r20
    582a:	ab 01       	movw	r20, r22
    582c:	60 e0       	ldi	r22, 0x00	; 0
    582e:	70 e0       	ldi	r23, 0x00	; 0
    5830:	ef cf       	rjmp	.-34     	; 0x5810 <_ZN5Print5printEmi>

00005832 <_ZN5Print5printEhi>:
    5832:	9a 01       	movw	r18, r20
    5834:	46 2f       	mov	r20, r22
    5836:	50 e0       	ldi	r21, 0x00	; 0
    5838:	60 e0       	ldi	r22, 0x00	; 0
    583a:	70 e0       	ldi	r23, 0x00	; 0
    583c:	e9 cf       	rjmp	.-46     	; 0x5810 <_ZN5Print5printEmi>

0000583e <_ZN5Print7printlnEhi>:
    583e:	0f 93       	push	r16
    5840:	1f 93       	push	r17
    5842:	cf 93       	push	r28
    5844:	df 93       	push	r29
    5846:	ec 01       	movw	r28, r24
    5848:	9a 01       	movw	r18, r20
    584a:	46 2f       	mov	r20, r22
    584c:	50 e0       	ldi	r21, 0x00	; 0
    584e:	60 e0       	ldi	r22, 0x00	; 0
    5850:	70 e0       	ldi	r23, 0x00	; 0
    5852:	de df       	rcall	.-68     	; 0x5810 <_ZN5Print5printEmi>
    5854:	8c 01       	movw	r16, r24
    5856:	ce 01       	movw	r24, r28
    5858:	5a df       	rcall	.-332    	; 0x570e <_ZN5Print7printlnEv>
    585a:	98 01       	movw	r18, r16
    585c:	28 0f       	add	r18, r24
    585e:	39 1f       	adc	r19, r25
    5860:	c9 01       	movw	r24, r18
    5862:	df 91       	pop	r29
    5864:	cf 91       	pop	r28
    5866:	1f 91       	pop	r17
    5868:	0f 91       	pop	r16
    586a:	08 95       	ret

0000586c <_ZN5Print5printEli>:
    586c:	cf 92       	push	r12
    586e:	df 92       	push	r13
    5870:	ef 92       	push	r14
    5872:	ff 92       	push	r15
    5874:	0f 93       	push	r16
    5876:	1f 93       	push	r17
    5878:	cf 93       	push	r28
    587a:	df 93       	push	r29
    587c:	ec 01       	movw	r28, r24
    587e:	6a 01       	movw	r12, r20
    5880:	7b 01       	movw	r14, r22
    5882:	21 15       	cp	r18, r1
    5884:	31 05       	cpc	r19, r1
    5886:	79 f4       	brne	.+30     	; 0x58a6 <_ZN5Print5printEli+0x3a>
    5888:	e8 81       	ld	r30, Y
    588a:	f9 81       	ldd	r31, Y+1	; 0x01
    588c:	01 90       	ld	r0, Z+
    588e:	f0 81       	ld	r31, Z
    5890:	e0 2d       	mov	r30, r0
    5892:	64 2f       	mov	r22, r20
    5894:	df 91       	pop	r29
    5896:	cf 91       	pop	r28
    5898:	1f 91       	pop	r17
    589a:	0f 91       	pop	r16
    589c:	ff 90       	pop	r15
    589e:	ef 90       	pop	r14
    58a0:	df 90       	pop	r13
    58a2:	cf 90       	pop	r12
    58a4:	09 94       	ijmp
    58a6:	2a 30       	cpi	r18, 0x0A	; 10
    58a8:	31 05       	cpc	r19, r1
    58aa:	19 f4       	brne	.+6      	; 0x58b2 <_ZN5Print5printEli+0x46>
    58ac:	77 fd       	sbrc	r23, 7
    58ae:	0d c0       	rjmp	.+26     	; 0x58ca <_ZN5Print5printEli+0x5e>
    58b0:	2a e0       	ldi	r18, 0x0A	; 10
    58b2:	b7 01       	movw	r22, r14
    58b4:	a6 01       	movw	r20, r12
    58b6:	ce 01       	movw	r24, r28
    58b8:	df 91       	pop	r29
    58ba:	cf 91       	pop	r28
    58bc:	1f 91       	pop	r17
    58be:	0f 91       	pop	r16
    58c0:	ff 90       	pop	r15
    58c2:	ef 90       	pop	r14
    58c4:	df 90       	pop	r13
    58c6:	cf 90       	pop	r12
    58c8:	48 cf       	rjmp	.-368    	; 0x575a <_ZN5Print11printNumberEmh>
    58ca:	6d e2       	ldi	r22, 0x2D	; 45
    58cc:	19 df       	rcall	.-462    	; 0x5700 <_ZN5Print5printEc>
    58ce:	8c 01       	movw	r16, r24
    58d0:	44 27       	eor	r20, r20
    58d2:	55 27       	eor	r21, r21
    58d4:	ba 01       	movw	r22, r20
    58d6:	4c 19       	sub	r20, r12
    58d8:	5d 09       	sbc	r21, r13
    58da:	6e 09       	sbc	r22, r14
    58dc:	7f 09       	sbc	r23, r15
    58de:	2a e0       	ldi	r18, 0x0A	; 10
    58e0:	ce 01       	movw	r24, r28
    58e2:	3b df       	rcall	.-394    	; 0x575a <_ZN5Print11printNumberEmh>
    58e4:	08 0f       	add	r16, r24
    58e6:	19 1f       	adc	r17, r25
    58e8:	c8 01       	movw	r24, r16
    58ea:	df 91       	pop	r29
    58ec:	cf 91       	pop	r28
    58ee:	1f 91       	pop	r17
    58f0:	0f 91       	pop	r16
    58f2:	ff 90       	pop	r15
    58f4:	ef 90       	pop	r14
    58f6:	df 90       	pop	r13
    58f8:	cf 90       	pop	r12
    58fa:	08 95       	ret

000058fc <__vector_16>:
    58fc:	1f 92       	push	r1
    58fe:	0f 92       	push	r0
    5900:	0f b6       	in	r0, 0x3f	; 63
    5902:	0f 92       	push	r0
    5904:	11 24       	eor	r1, r1
    5906:	2f 93       	push	r18
    5908:	3f 93       	push	r19
    590a:	8f 93       	push	r24
    590c:	9f 93       	push	r25
    590e:	af 93       	push	r26
    5910:	bf 93       	push	r27
    5912:	80 91 1e 05 	lds	r24, 0x051E
    5916:	90 91 1f 05 	lds	r25, 0x051F
    591a:	a0 91 20 05 	lds	r26, 0x0520
    591e:	b0 91 21 05 	lds	r27, 0x0521
    5922:	30 91 26 05 	lds	r19, 0x0526
    5926:	23 2f       	mov	r18, r19
    5928:	2d 5f       	subi	r18, 0xFD	; 253
    592a:	2d 37       	cpi	r18, 0x7D	; 125
    592c:	20 f4       	brcc	.+8      	; 0x5936 <__vector_16+0x3a>
    592e:	01 96       	adiw	r24, 0x01	; 1
    5930:	a1 1d       	adc	r26, r1
    5932:	b1 1d       	adc	r27, r1
    5934:	05 c0       	rjmp	.+10     	; 0x5940 <__vector_16+0x44>
    5936:	23 2f       	mov	r18, r19
    5938:	2a 57       	subi	r18, 0x7A	; 122
    593a:	02 96       	adiw	r24, 0x02	; 2
    593c:	a1 1d       	adc	r26, r1
    593e:	b1 1d       	adc	r27, r1
    5940:	20 93 26 05 	sts	0x0526, r18
    5944:	80 93 1e 05 	sts	0x051E, r24
    5948:	90 93 1f 05 	sts	0x051F, r25
    594c:	a0 93 20 05 	sts	0x0520, r26
    5950:	b0 93 21 05 	sts	0x0521, r27
    5954:	80 91 22 05 	lds	r24, 0x0522
    5958:	90 91 23 05 	lds	r25, 0x0523
    595c:	a0 91 24 05 	lds	r26, 0x0524
    5960:	b0 91 25 05 	lds	r27, 0x0525
    5964:	01 96       	adiw	r24, 0x01	; 1
    5966:	a1 1d       	adc	r26, r1
    5968:	b1 1d       	adc	r27, r1
    596a:	80 93 22 05 	sts	0x0522, r24
    596e:	90 93 23 05 	sts	0x0523, r25
    5972:	a0 93 24 05 	sts	0x0524, r26
    5976:	b0 93 25 05 	sts	0x0525, r27
    597a:	bf 91       	pop	r27
    597c:	af 91       	pop	r26
    597e:	9f 91       	pop	r25
    5980:	8f 91       	pop	r24
    5982:	3f 91       	pop	r19
    5984:	2f 91       	pop	r18
    5986:	0f 90       	pop	r0
    5988:	0f be       	out	0x3f, r0	; 63
    598a:	0f 90       	pop	r0
    598c:	1f 90       	pop	r1
    598e:	18 95       	reti

00005990 <millis>:
    5990:	0f 93       	push	r16
    5992:	1f 93       	push	r17
    5994:	8f b7       	in	r24, 0x3f	; 63
    5996:	f8 94       	cli
    5998:	00 91 1e 05 	lds	r16, 0x051E
    599c:	10 91 1f 05 	lds	r17, 0x051F
    59a0:	20 91 20 05 	lds	r18, 0x0520
    59a4:	30 91 21 05 	lds	r19, 0x0521
    59a8:	8f bf       	out	0x3f, r24	; 63
    59aa:	b8 01       	movw	r22, r16
    59ac:	c9 01       	movw	r24, r18
    59ae:	1f 91       	pop	r17
    59b0:	0f 91       	pop	r16
    59b2:	08 95       	ret

000059b4 <micros>:
    59b4:	0f 93       	push	r16
    59b6:	1f 93       	push	r17
    59b8:	9f b7       	in	r25, 0x3f	; 63
    59ba:	f8 94       	cli
    59bc:	00 91 22 05 	lds	r16, 0x0522
    59c0:	10 91 23 05 	lds	r17, 0x0523
    59c4:	20 91 24 05 	lds	r18, 0x0524
    59c8:	30 91 25 05 	lds	r19, 0x0525
    59cc:	86 b5       	in	r24, 0x26	; 38
    59ce:	a8 9b       	sbis	0x15, 0	; 21
    59d0:	06 c0       	rjmp	.+12     	; 0x59de <micros+0x2a>
    59d2:	8f 3f       	cpi	r24, 0xFF	; 255
    59d4:	21 f0       	breq	.+8      	; 0x59de <micros+0x2a>
    59d6:	0f 5f       	subi	r16, 0xFF	; 255
    59d8:	1f 4f       	sbci	r17, 0xFF	; 255
    59da:	2f 4f       	sbci	r18, 0xFF	; 255
    59dc:	3f 4f       	sbci	r19, 0xFF	; 255
    59de:	9f bf       	out	0x3f, r25	; 63
    59e0:	32 2f       	mov	r19, r18
    59e2:	21 2f       	mov	r18, r17
    59e4:	10 2f       	mov	r17, r16
    59e6:	00 27       	eor	r16, r16
    59e8:	08 0f       	add	r16, r24
    59ea:	11 1d       	adc	r17, r1
    59ec:	21 1d       	adc	r18, r1
    59ee:	31 1d       	adc	r19, r1
    59f0:	42 e0       	ldi	r20, 0x02	; 2
    59f2:	00 0f       	add	r16, r16
    59f4:	11 1f       	adc	r17, r17
    59f6:	22 1f       	adc	r18, r18
    59f8:	33 1f       	adc	r19, r19
    59fa:	4a 95       	dec	r20
    59fc:	d1 f7       	brne	.-12     	; 0x59f2 <micros+0x3e>
    59fe:	b8 01       	movw	r22, r16
    5a00:	c9 01       	movw	r24, r18
    5a02:	1f 91       	pop	r17
    5a04:	0f 91       	pop	r16
    5a06:	08 95       	ret

00005a08 <delay>:
    5a08:	cf 92       	push	r12
    5a0a:	df 92       	push	r13
    5a0c:	ef 92       	push	r14
    5a0e:	ff 92       	push	r15
    5a10:	cf 93       	push	r28
    5a12:	df 93       	push	r29
    5a14:	6b 01       	movw	r12, r22
    5a16:	7c 01       	movw	r14, r24
    5a18:	cd df       	rcall	.-102    	; 0x59b4 <micros>
    5a1a:	eb 01       	movw	r28, r22
    5a1c:	0d c0       	rjmp	.+26     	; 0x5a38 <delay+0x30>
    5a1e:	ca df       	rcall	.-108    	; 0x59b4 <micros>
    5a20:	6c 1b       	sub	r22, r28
    5a22:	7d 0b       	sbc	r23, r29
    5a24:	68 3e       	cpi	r22, 0xE8	; 232
    5a26:	73 40       	sbci	r23, 0x03	; 3
    5a28:	38 f0       	brcs	.+14     	; 0x5a38 <delay+0x30>
    5a2a:	81 e0       	ldi	r24, 0x01	; 1
    5a2c:	c8 1a       	sub	r12, r24
    5a2e:	d1 08       	sbc	r13, r1
    5a30:	e1 08       	sbc	r14, r1
    5a32:	f1 08       	sbc	r15, r1
    5a34:	c8 51       	subi	r28, 0x18	; 24
    5a36:	dc 4f       	sbci	r29, 0xFC	; 252
    5a38:	c1 14       	cp	r12, r1
    5a3a:	d1 04       	cpc	r13, r1
    5a3c:	e1 04       	cpc	r14, r1
    5a3e:	f1 04       	cpc	r15, r1
    5a40:	71 f7       	brne	.-36     	; 0x5a1e <delay+0x16>
    5a42:	df 91       	pop	r29
    5a44:	cf 91       	pop	r28
    5a46:	ff 90       	pop	r15
    5a48:	ef 90       	pop	r14
    5a4a:	df 90       	pop	r13
    5a4c:	cf 90       	pop	r12
    5a4e:	08 95       	ret

00005a50 <delayMicroseconds>:
    5a50:	01 97       	sbiw	r24, 0x01	; 1
    5a52:	39 f0       	breq	.+14     	; 0x5a62 <delayMicroseconds+0x12>
    5a54:	88 0f       	add	r24, r24
    5a56:	99 1f       	adc	r25, r25
    5a58:	88 0f       	add	r24, r24
    5a5a:	99 1f       	adc	r25, r25
    5a5c:	02 97       	sbiw	r24, 0x02	; 2
    5a5e:	01 97       	sbiw	r24, 0x01	; 1
    5a60:	f1 f7       	brne	.-4      	; 0x5a5e <delayMicroseconds+0xe>
    5a62:	08 95       	ret

00005a64 <init>:
    5a64:	78 94       	sei
    5a66:	84 b5       	in	r24, 0x24	; 36
    5a68:	82 60       	ori	r24, 0x02	; 2
    5a6a:	84 bd       	out	0x24, r24	; 36
    5a6c:	84 b5       	in	r24, 0x24	; 36
    5a6e:	81 60       	ori	r24, 0x01	; 1
    5a70:	84 bd       	out	0x24, r24	; 36
    5a72:	85 b5       	in	r24, 0x25	; 37
    5a74:	82 60       	ori	r24, 0x02	; 2
    5a76:	85 bd       	out	0x25, r24	; 37
    5a78:	85 b5       	in	r24, 0x25	; 37
    5a7a:	81 60       	ori	r24, 0x01	; 1
    5a7c:	85 bd       	out	0x25, r24	; 37
    5a7e:	ee e6       	ldi	r30, 0x6E	; 110
    5a80:	f0 e0       	ldi	r31, 0x00	; 0
    5a82:	80 81       	ld	r24, Z
    5a84:	81 60       	ori	r24, 0x01	; 1
    5a86:	80 83       	st	Z, r24
    5a88:	e1 e8       	ldi	r30, 0x81	; 129
    5a8a:	f0 e0       	ldi	r31, 0x00	; 0
    5a8c:	10 82       	st	Z, r1
    5a8e:	80 81       	ld	r24, Z
    5a90:	82 60       	ori	r24, 0x02	; 2
    5a92:	80 83       	st	Z, r24
    5a94:	80 81       	ld	r24, Z
    5a96:	81 60       	ori	r24, 0x01	; 1
    5a98:	80 83       	st	Z, r24
    5a9a:	e0 e8       	ldi	r30, 0x80	; 128
    5a9c:	f0 e0       	ldi	r31, 0x00	; 0
    5a9e:	80 81       	ld	r24, Z
    5aa0:	81 60       	ori	r24, 0x01	; 1
    5aa2:	80 83       	st	Z, r24
    5aa4:	e1 eb       	ldi	r30, 0xB1	; 177
    5aa6:	f0 e0       	ldi	r31, 0x00	; 0
    5aa8:	80 81       	ld	r24, Z
    5aaa:	84 60       	ori	r24, 0x04	; 4
    5aac:	80 83       	st	Z, r24
    5aae:	e0 eb       	ldi	r30, 0xB0	; 176
    5ab0:	f0 e0       	ldi	r31, 0x00	; 0
    5ab2:	80 81       	ld	r24, Z
    5ab4:	81 60       	ori	r24, 0x01	; 1
    5ab6:	80 83       	st	Z, r24
    5ab8:	ea e7       	ldi	r30, 0x7A	; 122
    5aba:	f0 e0       	ldi	r31, 0x00	; 0
    5abc:	80 81       	ld	r24, Z
    5abe:	84 60       	ori	r24, 0x04	; 4
    5ac0:	80 83       	st	Z, r24
    5ac2:	80 81       	ld	r24, Z
    5ac4:	82 60       	ori	r24, 0x02	; 2
    5ac6:	80 83       	st	Z, r24
    5ac8:	80 81       	ld	r24, Z
    5aca:	81 60       	ori	r24, 0x01	; 1
    5acc:	80 83       	st	Z, r24
    5ace:	80 81       	ld	r24, Z
    5ad0:	80 68       	ori	r24, 0x80	; 128
    5ad2:	80 83       	st	Z, r24
    5ad4:	10 92 c1 00 	sts	0x00C1, r1
    5ad8:	08 95       	ret

00005ada <turnOffPWM>:
    5ada:	83 30       	cpi	r24, 0x03	; 3
    5adc:	69 f0       	breq	.+26     	; 0x5af8 <turnOffPWM+0x1e>
    5ade:	28 f4       	brcc	.+10     	; 0x5aea <turnOffPWM+0x10>
    5ae0:	81 30       	cpi	r24, 0x01	; 1
    5ae2:	a1 f0       	breq	.+40     	; 0x5b0c <turnOffPWM+0x32>
    5ae4:	82 30       	cpi	r24, 0x02	; 2
    5ae6:	11 f5       	brne	.+68     	; 0x5b2c <turnOffPWM+0x52>
    5ae8:	14 c0       	rjmp	.+40     	; 0x5b12 <turnOffPWM+0x38>
    5aea:	86 30       	cpi	r24, 0x06	; 6
    5aec:	b1 f0       	breq	.+44     	; 0x5b1a <turnOffPWM+0x40>
    5aee:	87 30       	cpi	r24, 0x07	; 7
    5af0:	c1 f0       	breq	.+48     	; 0x5b22 <turnOffPWM+0x48>
    5af2:	84 30       	cpi	r24, 0x04	; 4
    5af4:	d9 f4       	brne	.+54     	; 0x5b2c <turnOffPWM+0x52>
    5af6:	04 c0       	rjmp	.+8      	; 0x5b00 <turnOffPWM+0x26>
    5af8:	80 91 80 00 	lds	r24, 0x0080
    5afc:	8f 77       	andi	r24, 0x7F	; 127
    5afe:	03 c0       	rjmp	.+6      	; 0x5b06 <turnOffPWM+0x2c>
    5b00:	80 91 80 00 	lds	r24, 0x0080
    5b04:	8f 7d       	andi	r24, 0xDF	; 223
    5b06:	80 93 80 00 	sts	0x0080, r24
    5b0a:	08 95       	ret
    5b0c:	84 b5       	in	r24, 0x24	; 36
    5b0e:	8f 77       	andi	r24, 0x7F	; 127
    5b10:	02 c0       	rjmp	.+4      	; 0x5b16 <turnOffPWM+0x3c>
    5b12:	84 b5       	in	r24, 0x24	; 36
    5b14:	8f 7d       	andi	r24, 0xDF	; 223
    5b16:	84 bd       	out	0x24, r24	; 36
    5b18:	08 95       	ret
    5b1a:	80 91 b0 00 	lds	r24, 0x00B0
    5b1e:	8f 77       	andi	r24, 0x7F	; 127
    5b20:	03 c0       	rjmp	.+6      	; 0x5b28 <turnOffPWM+0x4e>
    5b22:	80 91 b0 00 	lds	r24, 0x00B0
    5b26:	8f 7d       	andi	r24, 0xDF	; 223
    5b28:	80 93 b0 00 	sts	0x00B0, r24
    5b2c:	08 95       	ret

00005b2e <pinMode>:
    5b2e:	cf 93       	push	r28
    5b30:	df 93       	push	r29
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	fc 01       	movw	r30, r24
    5b36:	ec 50       	subi	r30, 0x0C	; 12
    5b38:	fd 4f       	sbci	r31, 0xFD	; 253
    5b3a:	44 91       	lpm	r20, Z
    5b3c:	fc 01       	movw	r30, r24
    5b3e:	e8 5f       	subi	r30, 0xF8	; 248
    5b40:	fc 4f       	sbci	r31, 0xFC	; 252
    5b42:	84 91       	lpm	r24, Z
    5b44:	88 23       	and	r24, r24
    5b46:	41 f1       	breq	.+80     	; 0x5b98 <pinMode+0x6a>
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	88 0f       	add	r24, r24
    5b4c:	99 1f       	adc	r25, r25
    5b4e:	fc 01       	movw	r30, r24
    5b50:	ea 5d       	subi	r30, 0xDA	; 218
    5b52:	fc 4f       	sbci	r31, 0xFC	; 252
    5b54:	25 91       	lpm	r18, Z+
    5b56:	34 91       	lpm	r19, Z
    5b58:	d9 01       	movw	r26, r18
    5b5a:	84 5e       	subi	r24, 0xE4	; 228
    5b5c:	9c 4f       	sbci	r25, 0xFC	; 252
    5b5e:	fc 01       	movw	r30, r24
    5b60:	85 91       	lpm	r24, Z+
    5b62:	94 91       	lpm	r25, Z
    5b64:	c8 2f       	mov	r28, r24
    5b66:	d9 2f       	mov	r29, r25
    5b68:	9f b7       	in	r25, 0x3f	; 63
    5b6a:	f8 94       	cli
    5b6c:	8c 91       	ld	r24, X
    5b6e:	61 11       	cpse	r22, r1
    5b70:	06 c0       	rjmp	.+12     	; 0x5b7e <pinMode+0x50>
    5b72:	40 95       	com	r20
    5b74:	84 23       	and	r24, r20
    5b76:	8c 93       	st	X, r24
    5b78:	88 81       	ld	r24, Y
    5b7a:	84 23       	and	r24, r20
    5b7c:	08 c0       	rjmp	.+16     	; 0x5b8e <pinMode+0x60>
    5b7e:	62 30       	cpi	r22, 0x02	; 2
    5b80:	41 f4       	brne	.+16     	; 0x5b92 <pinMode+0x64>
    5b82:	24 2f       	mov	r18, r20
    5b84:	20 95       	com	r18
    5b86:	82 23       	and	r24, r18
    5b88:	8c 93       	st	X, r24
    5b8a:	88 81       	ld	r24, Y
    5b8c:	84 2b       	or	r24, r20
    5b8e:	88 83       	st	Y, r24
    5b90:	02 c0       	rjmp	.+4      	; 0x5b96 <pinMode+0x68>
    5b92:	84 2b       	or	r24, r20
    5b94:	8c 93       	st	X, r24
    5b96:	9f bf       	out	0x3f, r25	; 63
    5b98:	df 91       	pop	r29
    5b9a:	cf 91       	pop	r28
    5b9c:	08 95       	ret

00005b9e <digitalWrite>:
    5b9e:	0f 93       	push	r16
    5ba0:	1f 93       	push	r17
    5ba2:	cf 93       	push	r28
    5ba4:	df 93       	push	r29
    5ba6:	1f 92       	push	r1
    5ba8:	cd b7       	in	r28, 0x3d	; 61
    5baa:	de b7       	in	r29, 0x3e	; 62
    5bac:	28 2f       	mov	r18, r24
    5bae:	30 e0       	ldi	r19, 0x00	; 0
    5bb0:	f9 01       	movw	r30, r18
    5bb2:	e0 52       	subi	r30, 0x20	; 32
    5bb4:	fd 4f       	sbci	r31, 0xFD	; 253
    5bb6:	84 91       	lpm	r24, Z
    5bb8:	f9 01       	movw	r30, r18
    5bba:	ec 50       	subi	r30, 0x0C	; 12
    5bbc:	fd 4f       	sbci	r31, 0xFD	; 253
    5bbe:	14 91       	lpm	r17, Z
    5bc0:	f9 01       	movw	r30, r18
    5bc2:	e8 5f       	subi	r30, 0xF8	; 248
    5bc4:	fc 4f       	sbci	r31, 0xFC	; 252
    5bc6:	04 91       	lpm	r16, Z
    5bc8:	00 23       	and	r16, r16
    5bca:	c9 f0       	breq	.+50     	; 0x5bfe <digitalWrite+0x60>
    5bcc:	88 23       	and	r24, r24
    5bce:	19 f0       	breq	.+6      	; 0x5bd6 <digitalWrite+0x38>
    5bd0:	69 83       	std	Y+1, r22	; 0x01
    5bd2:	83 df       	rcall	.-250    	; 0x5ada <turnOffPWM>
    5bd4:	69 81       	ldd	r22, Y+1	; 0x01
    5bd6:	e0 2f       	mov	r30, r16
    5bd8:	f0 e0       	ldi	r31, 0x00	; 0
    5bda:	ee 0f       	add	r30, r30
    5bdc:	ff 1f       	adc	r31, r31
    5bde:	e4 5e       	subi	r30, 0xE4	; 228
    5be0:	fc 4f       	sbci	r31, 0xFC	; 252
    5be2:	85 91       	lpm	r24, Z+
    5be4:	94 91       	lpm	r25, Z
    5be6:	dc 01       	movw	r26, r24
    5be8:	9f b7       	in	r25, 0x3f	; 63
    5bea:	f8 94       	cli
    5bec:	8c 91       	ld	r24, X
    5bee:	61 11       	cpse	r22, r1
    5bf0:	03 c0       	rjmp	.+6      	; 0x5bf8 <digitalWrite+0x5a>
    5bf2:	10 95       	com	r17
    5bf4:	81 23       	and	r24, r17
    5bf6:	01 c0       	rjmp	.+2      	; 0x5bfa <digitalWrite+0x5c>
    5bf8:	81 2b       	or	r24, r17
    5bfa:	8c 93       	st	X, r24
    5bfc:	9f bf       	out	0x3f, r25	; 63
    5bfe:	0f 90       	pop	r0
    5c00:	df 91       	pop	r29
    5c02:	cf 91       	pop	r28
    5c04:	1f 91       	pop	r17
    5c06:	0f 91       	pop	r16
    5c08:	08 95       	ret

00005c0a <free>:
    5c0a:	ef 92       	push	r14
    5c0c:	ff 92       	push	r15
    5c0e:	0f 93       	push	r16
    5c10:	1f 93       	push	r17
    5c12:	cf 93       	push	r28
    5c14:	df 93       	push	r29
    5c16:	00 97       	sbiw	r24, 0x00	; 0
    5c18:	09 f4       	brne	.+2      	; 0x5c1c <free+0x12>
    5c1a:	8f c0       	rjmp	.+286    	; 0x5d3a <free+0x130>
    5c1c:	dc 01       	movw	r26, r24
    5c1e:	12 97       	sbiw	r26, 0x02	; 2
    5c20:	13 96       	adiw	r26, 0x03	; 3
    5c22:	1c 92       	st	X, r1
    5c24:	1e 92       	st	-X, r1
    5c26:	12 97       	sbiw	r26, 0x02	; 2
    5c28:	e0 90 2d 05 	lds	r14, 0x052D
    5c2c:	f0 90 2e 05 	lds	r15, 0x052E
    5c30:	e1 14       	cp	r14, r1
    5c32:	f1 04       	cpc	r15, r1
    5c34:	89 f4       	brne	.+34     	; 0x5c58 <free+0x4e>
    5c36:	2d 91       	ld	r18, X+
    5c38:	3c 91       	ld	r19, X
    5c3a:	11 97       	sbiw	r26, 0x01	; 1
    5c3c:	28 0f       	add	r18, r24
    5c3e:	39 1f       	adc	r19, r25
    5c40:	80 91 16 01 	lds	r24, 0x0116
    5c44:	90 91 17 01 	lds	r25, 0x0117
    5c48:	82 17       	cp	r24, r18
    5c4a:	93 07       	cpc	r25, r19
    5c4c:	89 f5       	brne	.+98     	; 0x5cb0 <free+0xa6>
    5c4e:	b0 93 17 01 	sts	0x0117, r27
    5c52:	a0 93 16 01 	sts	0x0116, r26
    5c56:	71 c0       	rjmp	.+226    	; 0x5d3a <free+0x130>
    5c58:	e7 01       	movw	r28, r14
    5c5a:	20 e0       	ldi	r18, 0x00	; 0
    5c5c:	30 e0       	ldi	r19, 0x00	; 0
    5c5e:	01 c0       	rjmp	.+2      	; 0x5c62 <free+0x58>
    5c60:	ea 01       	movw	r28, r20
    5c62:	ca 17       	cp	r28, r26
    5c64:	db 07       	cpc	r29, r27
    5c66:	38 f4       	brcc	.+14     	; 0x5c76 <free+0x6c>
    5c68:	4a 81       	ldd	r20, Y+2	; 0x02
    5c6a:	5b 81       	ldd	r21, Y+3	; 0x03
    5c6c:	9e 01       	movw	r18, r28
    5c6e:	41 15       	cp	r20, r1
    5c70:	51 05       	cpc	r21, r1
    5c72:	b1 f7       	brne	.-20     	; 0x5c60 <free+0x56>
    5c74:	22 c0       	rjmp	.+68     	; 0x5cba <free+0xb0>
    5c76:	bc 01       	movw	r22, r24
    5c78:	62 50       	subi	r22, 0x02	; 2
    5c7a:	71 09       	sbc	r23, r1
    5c7c:	fb 01       	movw	r30, r22
    5c7e:	d3 83       	std	Z+3, r29	; 0x03
    5c80:	c2 83       	std	Z+2, r28	; 0x02
    5c82:	00 81       	ld	r16, Z
    5c84:	11 81       	ldd	r17, Z+1	; 0x01
    5c86:	ac 01       	movw	r20, r24
    5c88:	40 0f       	add	r20, r16
    5c8a:	51 1f       	adc	r21, r17
    5c8c:	4c 17       	cp	r20, r28
    5c8e:	5d 07       	cpc	r21, r29
    5c90:	61 f4       	brne	.+24     	; 0x5caa <free+0xa0>
    5c92:	48 81       	ld	r20, Y
    5c94:	59 81       	ldd	r21, Y+1	; 0x01
    5c96:	40 0f       	add	r20, r16
    5c98:	51 1f       	adc	r21, r17
    5c9a:	4e 5f       	subi	r20, 0xFE	; 254
    5c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c9e:	51 83       	std	Z+1, r21	; 0x01
    5ca0:	40 83       	st	Z, r20
    5ca2:	4a 81       	ldd	r20, Y+2	; 0x02
    5ca4:	5b 81       	ldd	r21, Y+3	; 0x03
    5ca6:	53 83       	std	Z+3, r21	; 0x03
    5ca8:	42 83       	std	Z+2, r20	; 0x02
    5caa:	21 15       	cp	r18, r1
    5cac:	31 05       	cpc	r19, r1
    5cae:	29 f4       	brne	.+10     	; 0x5cba <free+0xb0>
    5cb0:	b0 93 2e 05 	sts	0x052E, r27
    5cb4:	a0 93 2d 05 	sts	0x052D, r26
    5cb8:	40 c0       	rjmp	.+128    	; 0x5d3a <free+0x130>
    5cba:	f9 01       	movw	r30, r18
    5cbc:	b3 83       	std	Z+3, r27	; 0x03
    5cbe:	a2 83       	std	Z+2, r26	; 0x02
    5cc0:	e9 01       	movw	r28, r18
    5cc2:	69 91       	ld	r22, Y+
    5cc4:	79 91       	ld	r23, Y+
    5cc6:	c6 0f       	add	r28, r22
    5cc8:	d7 1f       	adc	r29, r23
    5cca:	ac 17       	cp	r26, r28
    5ccc:	bd 07       	cpc	r27, r29
    5cce:	79 f4       	brne	.+30     	; 0x5cee <free+0xe4>
    5cd0:	dc 01       	movw	r26, r24
    5cd2:	5e 91       	ld	r21, -X
    5cd4:	4e 91       	ld	r20, -X
    5cd6:	46 0f       	add	r20, r22
    5cd8:	57 1f       	adc	r21, r23
    5cda:	4e 5f       	subi	r20, 0xFE	; 254
    5cdc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cde:	51 83       	std	Z+1, r21	; 0x01
    5ce0:	40 83       	st	Z, r20
    5ce2:	12 96       	adiw	r26, 0x02	; 2
    5ce4:	8d 91       	ld	r24, X+
    5ce6:	9c 91       	ld	r25, X
    5ce8:	13 97       	sbiw	r26, 0x03	; 3
    5cea:	93 83       	std	Z+3, r25	; 0x03
    5cec:	82 83       	std	Z+2, r24	; 0x02
    5cee:	a0 e0       	ldi	r26, 0x00	; 0
    5cf0:	b0 e0       	ldi	r27, 0x00	; 0
    5cf2:	02 c0       	rjmp	.+4      	; 0x5cf8 <free+0xee>
    5cf4:	d7 01       	movw	r26, r14
    5cf6:	7c 01       	movw	r14, r24
    5cf8:	f7 01       	movw	r30, r14
    5cfa:	82 81       	ldd	r24, Z+2	; 0x02
    5cfc:	93 81       	ldd	r25, Z+3	; 0x03
    5cfe:	00 97       	sbiw	r24, 0x00	; 0
    5d00:	c9 f7       	brne	.-14     	; 0x5cf4 <free+0xea>
    5d02:	c7 01       	movw	r24, r14
    5d04:	02 96       	adiw	r24, 0x02	; 2
    5d06:	20 81       	ld	r18, Z
    5d08:	31 81       	ldd	r19, Z+1	; 0x01
    5d0a:	82 0f       	add	r24, r18
    5d0c:	93 1f       	adc	r25, r19
    5d0e:	20 91 16 01 	lds	r18, 0x0116
    5d12:	30 91 17 01 	lds	r19, 0x0117
    5d16:	28 17       	cp	r18, r24
    5d18:	39 07       	cpc	r19, r25
    5d1a:	79 f4       	brne	.+30     	; 0x5d3a <free+0x130>
    5d1c:	10 97       	sbiw	r26, 0x00	; 0
    5d1e:	29 f4       	brne	.+10     	; 0x5d2a <free+0x120>
    5d20:	10 92 2e 05 	sts	0x052E, r1
    5d24:	10 92 2d 05 	sts	0x052D, r1
    5d28:	04 c0       	rjmp	.+8      	; 0x5d32 <free+0x128>
    5d2a:	13 96       	adiw	r26, 0x03	; 3
    5d2c:	1c 92       	st	X, r1
    5d2e:	1e 92       	st	-X, r1
    5d30:	12 97       	sbiw	r26, 0x02	; 2
    5d32:	f0 92 17 01 	sts	0x0117, r15
    5d36:	e0 92 16 01 	sts	0x0116, r14
    5d3a:	df 91       	pop	r29
    5d3c:	cf 91       	pop	r28
    5d3e:	1f 91       	pop	r17
    5d40:	0f 91       	pop	r16
    5d42:	ff 90       	pop	r15
    5d44:	ef 90       	pop	r14
    5d46:	08 95       	ret

00005d48 <_ZN13NKEventParser5ParseEjPKhRKm>:
    5d48:	cf 92       	push	r12
    5d4a:	df 92       	push	r13
    5d4c:	ef 92       	push	r14
    5d4e:	ff 92       	push	r15
    5d50:	0f 93       	push	r16
    5d52:	1f 93       	push	r17
    5d54:	cf 93       	push	r28
    5d56:	df 93       	push	r29
    5d58:	00 d0       	rcall	.+0      	; 0x5d5a <_ZN13NKEventParser5ParseEjPKhRKm+0x12>
    5d5a:	00 d0       	rcall	.+0      	; 0x5d5c <_ZN13NKEventParser5ParseEjPKhRKm+0x14>
    5d5c:	cd b7       	in	r28, 0x3d	; 61
    5d5e:	de b7       	in	r29, 0x3e	; 62
    5d60:	8c 01       	movw	r16, r24
    5d62:	5c 83       	std	Y+4, r21	; 0x04
    5d64:	4b 83       	std	Y+3, r20	; 0x03
    5d66:	7a 83       	std	Y+2, r23	; 0x02
    5d68:	69 83       	std	Y+1, r22	; 0x01
    5d6a:	dc 01       	movw	r26, r24
    5d6c:	17 96       	adiw	r26, 0x07	; 7
    5d6e:	8c 91       	ld	r24, X
    5d70:	82 30       	cpi	r24, 0x02	; 2
    5d72:	e9 f0       	breq	.+58     	; 0x5dae <_ZN13NKEventParser5ParseEjPKhRKm+0x66>
    5d74:	28 f4       	brcc	.+10     	; 0x5d80 <_ZN13NKEventParser5ParseEjPKhRKm+0x38>
    5d76:	88 23       	and	r24, r24
    5d78:	41 f0       	breq	.+16     	; 0x5d8a <_ZN13NKEventParser5ParseEjPKhRKm+0x42>
    5d7a:	81 30       	cpi	r24, 0x01	; 1
    5d7c:	71 f0       	breq	.+28     	; 0x5d9a <_ZN13NKEventParser5ParseEjPKhRKm+0x52>
    5d7e:	65 c0       	rjmp	.+202    	; 0x5e4a <_ZN13NKEventParser5ParseEjPKhRKm+0x102>
    5d80:	83 30       	cpi	r24, 0x03	; 3
    5d82:	51 f1       	breq	.+84     	; 0x5dd8 <_ZN13NKEventParser5ParseEjPKhRKm+0x90>
    5d84:	84 30       	cpi	r24, 0x04	; 4
    5d86:	99 f1       	breq	.+102    	; 0x5dee <_ZN13NKEventParser5ParseEjPKhRKm+0xa6>
    5d88:	60 c0       	rjmp	.+192    	; 0x5e4a <_ZN13NKEventParser5ParseEjPKhRKm+0x102>
    5d8a:	44 5f       	subi	r20, 0xF4	; 244
    5d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d8e:	5c 83       	std	Y+4, r21	; 0x04
    5d90:	4b 83       	std	Y+3, r20	; 0x03
    5d92:	6c 50       	subi	r22, 0x0C	; 12
    5d94:	71 09       	sbc	r23, r1
    5d96:	7a 83       	std	Y+2, r23	; 0x02
    5d98:	69 83       	std	Y+1, r22	; 0x01
    5d9a:	22 e0       	ldi	r18, 0x02	; 2
    5d9c:	f8 01       	movw	r30, r16
    5d9e:	24 87       	std	Z+12, r18	; 0x0c
    5da0:	85 85       	ldd	r24, Z+13	; 0x0d
    5da2:	96 85       	ldd	r25, Z+14	; 0x0e
    5da4:	96 8b       	std	Z+22, r25	; 0x16
    5da6:	85 8b       	std	Z+21, r24	; 0x15
    5da8:	20 8f       	std	Z+24, r18	; 0x18
    5daa:	27 8b       	std	Z+23, r18	; 0x17
    5dac:	27 83       	std	Z+7, r18	; 0x07
    5dae:	ae 01       	movw	r20, r28
    5db0:	4f 5f       	subi	r20, 0xFF	; 255
    5db2:	5f 4f       	sbci	r21, 0xFF	; 255
    5db4:	be 01       	movw	r22, r28
    5db6:	6d 5f       	subi	r22, 0xFD	; 253
    5db8:	7f 4f       	sbci	r23, 0xFF	; 255
    5dba:	c8 01       	movw	r24, r16
    5dbc:	45 96       	adiw	r24, 0x15	; 21
    5dbe:	3a d6       	rcall	.+3188   	; 0x6a34 <_ZN20MultiByteValueParser5ParseEPPhPj>
    5dc0:	88 23       	and	r24, r24
    5dc2:	09 f4       	brne	.+2      	; 0x5dc6 <_ZN13NKEventParser5ParseEjPKhRKm+0x7e>
    5dc4:	42 c0       	rjmp	.+132    	; 0x5e4a <_ZN13NKEventParser5ParseEjPKhRKm+0x102>
    5dc6:	c8 01       	movw	r24, r16
    5dc8:	0f 96       	adiw	r24, 0x0f	; 15
    5dca:	d8 01       	movw	r26, r16
    5dcc:	1a 96       	adiw	r26, 0x0a	; 10
    5dce:	9c 93       	st	X, r25
    5dd0:	8e 93       	st	-X, r24
    5dd2:	19 97       	sbiw	r26, 0x09	; 9
    5dd4:	1b 96       	adiw	r26, 0x0b	; 11
    5dd6:	8c 93       	st	X, r24
    5dd8:	26 e0       	ldi	r18, 0x06	; 6
    5dda:	f8 01       	movw	r30, r16
    5ddc:	24 87       	std	Z+12, r18	; 0x0c
    5dde:	85 85       	ldd	r24, Z+13	; 0x0d
    5de0:	96 85       	ldd	r25, Z+14	; 0x0e
    5de2:	96 8b       	std	Z+22, r25	; 0x16
    5de4:	85 8b       	std	Z+21, r24	; 0x15
    5de6:	20 8f       	std	Z+24, r18	; 0x18
    5de8:	27 8b       	std	Z+23, r18	; 0x17
    5dea:	84 e0       	ldi	r24, 0x04	; 4
    5dec:	87 83       	std	Z+7, r24	; 0x07
    5dee:	78 01       	movw	r14, r16
    5df0:	f5 e1       	ldi	r31, 0x15	; 21
    5df2:	ef 0e       	add	r14, r31
    5df4:	f1 1c       	adc	r15, r1
    5df6:	68 01       	movw	r12, r16
    5df8:	8f e0       	ldi	r24, 0x0F	; 15
    5dfa:	c8 0e       	add	r12, r24
    5dfc:	d1 1c       	adc	r13, r1
    5dfe:	d8 01       	movw	r26, r16
    5e00:	1b 96       	adiw	r26, 0x0b	; 11
    5e02:	8c 91       	ld	r24, X
    5e04:	1b 97       	sbiw	r26, 0x0b	; 11
    5e06:	88 23       	and	r24, r24
    5e08:	f1 f0       	breq	.+60     	; 0x5e46 <_ZN13NKEventParser5ParseEjPKhRKm+0xfe>
    5e0a:	ae 01       	movw	r20, r28
    5e0c:	4f 5f       	subi	r20, 0xFF	; 255
    5e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    5e10:	be 01       	movw	r22, r28
    5e12:	6d 5f       	subi	r22, 0xFD	; 253
    5e14:	7f 4f       	sbci	r23, 0xFF	; 255
    5e16:	c7 01       	movw	r24, r14
    5e18:	0d d6       	rcall	.+3098   	; 0x6a34 <_ZN20MultiByteValueParser5ParseEPPhPj>
    5e1a:	88 23       	and	r24, r24
    5e1c:	b1 f0       	breq	.+44     	; 0x5e4a <_ZN13NKEventParser5ParseEjPKhRKm+0x102>
    5e1e:	d8 01       	movw	r26, r16
    5e20:	14 96       	adiw	r26, 0x04	; 4
    5e22:	8d 91       	ld	r24, X+
    5e24:	9c 91       	ld	r25, X
    5e26:	15 97       	sbiw	r26, 0x05	; 5
    5e28:	00 97       	sbiw	r24, 0x00	; 0
    5e2a:	41 f0       	breq	.+16     	; 0x5e3c <_ZN13NKEventParser5ParseEjPKhRKm+0xf4>
    5e2c:	dc 01       	movw	r26, r24
    5e2e:	ed 91       	ld	r30, X+
    5e30:	fc 91       	ld	r31, X
    5e32:	01 90       	ld	r0, Z+
    5e34:	f0 81       	ld	r31, Z
    5e36:	e0 2d       	mov	r30, r0
    5e38:	b6 01       	movw	r22, r12
    5e3a:	09 95       	icall
    5e3c:	f8 01       	movw	r30, r16
    5e3e:	83 85       	ldd	r24, Z+11	; 0x0b
    5e40:	81 50       	subi	r24, 0x01	; 1
    5e42:	83 87       	std	Z+11, r24	; 0x0b
    5e44:	dc cf       	rjmp	.-72     	; 0x5dfe <_ZN13NKEventParser5ParseEjPKhRKm+0xb6>
    5e46:	17 96       	adiw	r26, 0x07	; 7
    5e48:	1c 92       	st	X, r1
    5e4a:	0f 90       	pop	r0
    5e4c:	0f 90       	pop	r0
    5e4e:	0f 90       	pop	r0
    5e50:	0f 90       	pop	r0
    5e52:	df 91       	pop	r29
    5e54:	cf 91       	pop	r28
    5e56:	1f 91       	pop	r17
    5e58:	0f 91       	pop	r16
    5e5a:	ff 90       	pop	r15
    5e5c:	ef 90       	pop	r14
    5e5e:	df 90       	pop	r13
    5e60:	cf 90       	pop	r12
    5e62:	08 95       	ret

00005e64 <_ZN16PTPStateHandlers25OnDeviceDisconnectedStateEP3PTP>:
    5e64:	08 95       	ret

00005e66 <_ZN16PTPStateHandlers20OnSessionOpenedStateEP3PTP>:
    5e66:	84 e0       	ldi	r24, 0x04	; 4
    5e68:	fb 01       	movw	r30, r22
    5e6a:	82 83       	std	Z+2, r24	; 0x02
    5e6c:	08 95       	ret

00005e6e <_ZN16PTPStateHandlers24OnDeviceInitializedStateEP3PTP>:
    5e6e:	08 95       	ret

00005e70 <_ZN16PTPStateHandlers26OnDeviceNotRespondingStateEP3PTP>:
    5e70:	08 95       	ret

00005e72 <_ZN16PTPStateHandlers17OnDeviceBusyStateEP3PTP>:
    5e72:	08 95       	ret

00005e74 <_ZN3PTP7ReleaseEv>:
    5e74:	cf 93       	push	r28
    5e76:	df 93       	push	r29
    5e78:	ec 01       	movw	r28, r24
    5e7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    5e7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    5e7e:	dc 01       	movw	r26, r24
    5e80:	ed 91       	ld	r30, X+
    5e82:	fc 91       	ld	r31, X
    5e84:	04 80       	ldd	r0, Z+4	; 0x04
    5e86:	f5 81       	ldd	r31, Z+5	; 0x05
    5e88:	e0 2d       	mov	r30, r0
    5e8a:	6a 85       	ldd	r22, Y+10	; 0x0a
    5e8c:	09 95       	icall
    5e8e:	81 e0       	ldi	r24, 0x01	; 1
    5e90:	8a 83       	std	Y+2, r24	; 0x02
    5e92:	8f 81       	ldd	r24, Y+7	; 0x07
    5e94:	98 85       	ldd	r25, Y+8	; 0x08
    5e96:	dc 01       	movw	r26, r24
    5e98:	ed 91       	ld	r30, X+
    5e9a:	fc 91       	ld	r31, X
    5e9c:	01 90       	ld	r0, Z+
    5e9e:	f0 81       	ld	r31, Z
    5ea0:	e0 2d       	mov	r30, r0
    5ea2:	be 01       	movw	r22, r28
    5ea4:	09 95       	icall
    5ea6:	1a 86       	std	Y+10, r1	; 0x0a
    5ea8:	1e 82       	std	Y+6, r1	; 0x06
    5eaa:	1d 82       	std	Y+5, r1	; 0x05
    5eac:	8f ef       	ldi	r24, 0xFF	; 255
    5eae:	9f ef       	ldi	r25, 0xFF	; 255
    5eb0:	9c 83       	std	Y+4, r25	; 0x04
    5eb2:	8b 83       	std	Y+3, r24	; 0x03
    5eb4:	80 e0       	ldi	r24, 0x00	; 0
    5eb6:	df 91       	pop	r29
    5eb8:	cf 91       	pop	r28
    5eba:	08 95       	ret

00005ebc <_ZN3PTP10EventCheckEP13PTPReadParser>:
    5ebc:	0f 93       	push	r16
    5ebe:	1f 93       	push	r17
    5ec0:	cf 93       	push	r28
    5ec2:	df 93       	push	r29
    5ec4:	cd b7       	in	r28, 0x3d	; 61
    5ec6:	de b7       	in	r29, 0x3e	; 62
    5ec8:	2a 97       	sbiw	r28, 0x0a	; 10
    5eca:	0f b6       	in	r0, 0x3f	; 63
    5ecc:	f8 94       	cli
    5ece:	de bf       	out	0x3e, r29	; 62
    5ed0:	0f be       	out	0x3f, r0	; 63
    5ed2:	cd bf       	out	0x3d, r28	; 61
    5ed4:	fc 01       	movw	r30, r24
    5ed6:	19 82       	std	Y+1, r1	; 0x01
    5ed8:	1a 82       	std	Y+2, r1	; 0x02
    5eda:	1b 82       	std	Y+3, r1	; 0x03
    5edc:	1c 82       	std	Y+4, r1	; 0x04
    5ede:	1d 82       	std	Y+5, r1	; 0x05
    5ee0:	1e 82       	std	Y+6, r1	; 0x06
    5ee2:	1f 82       	std	Y+7, r1	; 0x07
    5ee4:	18 86       	std	Y+8, r1	; 0x08
    5ee6:	88 e0       	ldi	r24, 0x08	; 8
    5ee8:	90 e0       	ldi	r25, 0x00	; 0
    5eea:	9a 87       	std	Y+10, r25	; 0x0a
    5eec:	89 87       	std	Y+9, r24	; 0x09
    5eee:	8e 01       	movw	r16, r28
    5ef0:	0f 5f       	subi	r16, 0xFF	; 255
    5ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ef4:	9e 01       	movw	r18, r28
    5ef6:	27 5f       	subi	r18, 0xF7	; 247
    5ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    5efa:	47 89       	ldd	r20, Z+23	; 0x17
    5efc:	62 85       	ldd	r22, Z+10	; 0x0a
    5efe:	84 85       	ldd	r24, Z+12	; 0x0c
    5f00:	95 85       	ldd	r25, Z+13	; 0x0d
    5f02:	0e 94 94 3b 	call	0x7728	; 0x7728 <_ZN3USB10inTransferEhhPjPh>
    5f06:	8f 3f       	cpi	r24, 0xFF	; 255
    5f08:	41 f0       	breq	.+16     	; 0x5f1a <_ZN3PTP10EventCheckEP13PTPReadParser+0x5e>
    5f0a:	61 e0       	ldi	r22, 0x01	; 1
    5f0c:	70 e0       	ldi	r23, 0x00	; 0
    5f0e:	80 e0       	ldi	r24, 0x00	; 0
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	7a dd       	rcall	.-1292   	; 0x5a08 <delay>
    5f14:	82 e0       	ldi	r24, 0x02	; 2
    5f16:	90 e2       	ldi	r25, 0x20	; 32
    5f18:	02 c0       	rjmp	.+4      	; 0x5f1e <_ZN3PTP10EventCheckEP13PTPReadParser+0x62>
    5f1a:	80 e0       	ldi	r24, 0x00	; 0
    5f1c:	90 e4       	ldi	r25, 0x40	; 64
    5f1e:	2a 96       	adiw	r28, 0x0a	; 10
    5f20:	0f b6       	in	r0, 0x3f	; 63
    5f22:	f8 94       	cli
    5f24:	de bf       	out	0x3e, r29	; 62
    5f26:	0f be       	out	0x3f, r0	; 63
    5f28:	cd bf       	out	0x3d, r28	; 61
    5f2a:	df 91       	pop	r29
    5f2c:	cf 91       	pop	r28
    5f2e:	1f 91       	pop	r17
    5f30:	0f 91       	pop	r16
    5f32:	08 95       	ret

00005f34 <_ZN3PTPC1EP3USBP16PTPStateHandlers>:
    5f34:	cf 93       	push	r28
    5f36:	df 93       	push	r29
    5f38:	fc 01       	movw	r30, r24
    5f3a:	8e e4       	ldi	r24, 0x4E	; 78
    5f3c:	92 e0       	ldi	r25, 0x02	; 2
    5f3e:	91 83       	std	Z+1, r25	; 0x01
    5f40:	80 83       	st	Z, r24
    5f42:	12 82       	std	Z+2, r1	; 0x02
    5f44:	8f ef       	ldi	r24, 0xFF	; 255
    5f46:	9f ef       	ldi	r25, 0xFF	; 255
    5f48:	94 83       	std	Z+4, r25	; 0x04
    5f4a:	83 83       	std	Z+3, r24	; 0x03
    5f4c:	16 82       	std	Z+6, r1	; 0x06
    5f4e:	15 82       	std	Z+5, r1	; 0x05
    5f50:	50 87       	std	Z+8, r21	; 0x08
    5f52:	47 83       	std	Z+7, r20	; 0x07
    5f54:	12 86       	std	Z+10, r1	; 0x0a
    5f56:	13 86       	std	Z+11, r1	; 0x0b
    5f58:	75 87       	std	Z+13, r23	; 0x0d
    5f5a:	64 87       	std	Z+12, r22	; 0x0c
    5f5c:	16 86       	std	Z+14, r1	; 0x0e
    5f5e:	88 e0       	ldi	r24, 0x08	; 8
    5f60:	87 87       	std	Z+15, r24	; 0x0f
    5f62:	9c e3       	ldi	r25, 0x3C	; 60
    5f64:	90 8b       	std	Z+16, r25	; 0x10
    5f66:	11 8a       	std	Z+17, r1	; 0x11
    5f68:	82 8b       	std	Z+18, r24	; 0x12
    5f6a:	13 8a       	std	Z+19, r1	; 0x13
    5f6c:	14 8a       	std	Z+20, r1	; 0x14
    5f6e:	85 8b       	std	Z+21, r24	; 0x15
    5f70:	16 8a       	std	Z+22, r1	; 0x16
    5f72:	17 8a       	std	Z+23, r1	; 0x17
    5f74:	80 8f       	std	Z+24, r24	; 0x18
    5f76:	11 8e       	std	Z+25, r1	; 0x19
    5f78:	61 15       	cp	r22, r1
    5f7a:	71 05       	cpc	r23, r1
    5f7c:	b9 f0       	breq	.+46     	; 0x5fac <_ZN3PTPC1EP3USBP16PTPStateHandlers+0x78>
    5f7e:	cb 01       	movw	r24, r22
    5f80:	a0 e0       	ldi	r26, 0x00	; 0
    5f82:	b0 e0       	ldi	r27, 0x00	; 0
    5f84:	ec 01       	movw	r28, r24
    5f86:	ca 5a       	subi	r28, 0xAA	; 170
    5f88:	df 4f       	sbci	r29, 0xFF	; 255
    5f8a:	28 81       	ld	r18, Y
    5f8c:	39 81       	ldd	r19, Y+1	; 0x01
    5f8e:	23 2b       	or	r18, r19
    5f90:	41 f4       	brne	.+16     	; 0x5fa2 <_ZN3PTPC1EP3USBP16PTPStateHandlers+0x6e>
    5f92:	9b 96       	adiw	r26, 0x2b	; 43
    5f94:	aa 0f       	add	r26, r26
    5f96:	bb 1f       	adc	r27, r27
    5f98:	a6 0f       	add	r26, r22
    5f9a:	b7 1f       	adc	r27, r23
    5f9c:	ed 93       	st	X+, r30
    5f9e:	fc 93       	st	X, r31
    5fa0:	05 c0       	rjmp	.+10     	; 0x5fac <_ZN3PTPC1EP3USBP16PTPStateHandlers+0x78>
    5fa2:	11 96       	adiw	r26, 0x01	; 1
    5fa4:	02 96       	adiw	r24, 0x02	; 2
    5fa6:	a0 31       	cpi	r26, 0x10	; 16
    5fa8:	b1 05       	cpc	r27, r1
    5faa:	61 f7       	brne	.-40     	; 0x5f84 <_ZN3PTPC1EP3USBP16PTPStateHandlers+0x50>
    5fac:	df 91       	pop	r29
    5fae:	cf 91       	pop	r28
    5fb0:	08 95       	ret

00005fb2 <_ZN3PTP13FillEPRecordsEP23USB_ENDPOINT_DESCRIPTOR>:
    5fb2:	0f 93       	push	r16
    5fb4:	1f 93       	push	r17
    5fb6:	cf 93       	push	r28
    5fb8:	df 93       	push	r29
    5fba:	20 e0       	ldi	r18, 0x00	; 0
    5fbc:	30 e0       	ldi	r19, 0x00	; 0
    5fbe:	db 01       	movw	r26, r22
    5fc0:	a2 0f       	add	r26, r18
    5fc2:	b3 1f       	adc	r27, r19
    5fc4:	13 96       	adiw	r26, 0x03	; 3
    5fc6:	4c 91       	ld	r20, X
    5fc8:	13 97       	sbiw	r26, 0x03	; 3
    5fca:	43 70       	andi	r20, 0x03	; 3
    5fcc:	12 96       	adiw	r26, 0x02	; 2
    5fce:	0c 91       	ld	r16, X
    5fd0:	12 97       	sbiw	r26, 0x02	; 2
    5fd2:	43 30       	cpi	r20, 0x03	; 3
    5fd4:	49 f0       	breq	.+18     	; 0x5fe8 <_ZN3PTP13FillEPRecordsEP23USB_ENDPOINT_DESCRIPTOR+0x36>
    5fd6:	42 30       	cpi	r20, 0x02	; 2
    5fd8:	49 f4       	brne	.+18     	; 0x5fec <_ZN3PTP13FillEPRecordsEP23USB_ENDPOINT_DESCRIPTOR+0x3a>
    5fda:	10 2f       	mov	r17, r16
    5fdc:	10 95       	com	r17
    5fde:	11 1f       	adc	r17, r17
    5fe0:	11 27       	eor	r17, r17
    5fe2:	11 1f       	adc	r17, r17
    5fe4:	1f 5f       	subi	r17, 0xFF	; 255
    5fe6:	03 c0       	rjmp	.+6      	; 0x5fee <_ZN3PTP13FillEPRecordsEP23USB_ENDPOINT_DESCRIPTOR+0x3c>
    5fe8:	13 e0       	ldi	r17, 0x03	; 3
    5fea:	01 c0       	rjmp	.+2      	; 0x5fee <_ZN3PTP13FillEPRecordsEP23USB_ENDPOINT_DESCRIPTOR+0x3c>
    5fec:	12 e0       	ldi	r17, 0x02	; 2
    5fee:	41 2f       	mov	r20, r17
    5ff0:	50 e0       	ldi	r21, 0x00	; 0
    5ff2:	ea 01       	movw	r28, r20
    5ff4:	cc 0f       	add	r28, r28
    5ff6:	dd 1f       	adc	r29, r29
    5ff8:	fe 01       	movw	r30, r28
    5ffa:	e4 0f       	add	r30, r20
    5ffc:	f5 1f       	adc	r31, r21
    5ffe:	e8 0f       	add	r30, r24
    6000:	f9 1f       	adc	r31, r25
    6002:	0f 70       	andi	r16, 0x0F	; 15
    6004:	06 87       	std	Z+14, r16	; 0x0e
    6006:	14 96       	adiw	r26, 0x04	; 4
    6008:	ac 91       	ld	r26, X
    600a:	a7 87       	std	Z+15, r26	; 0x0f
    600c:	10 8a       	std	Z+16, r1	; 0x10
    600e:	13 30       	cpi	r17, 0x03	; 3
    6010:	11 f4       	brne	.+4      	; 0x6016 <_ZN3PTP13FillEPRecordsEP23USB_ENDPOINT_DESCRIPTOR+0x64>
    6012:	a0 e0       	ldi	r26, 0x00	; 0
    6014:	01 c0       	rjmp	.+2      	; 0x6018 <_ZN3PTP13FillEPRecordsEP23USB_ENDPOINT_DESCRIPTOR+0x66>
    6016:	af e0       	ldi	r26, 0x0F	; 15
    6018:	fe 01       	movw	r30, r28
    601a:	e4 0f       	add	r30, r20
    601c:	f5 1f       	adc	r31, r21
    601e:	e8 0f       	add	r30, r24
    6020:	f9 1f       	adc	r31, r25
    6022:	aa 0f       	add	r26, r26
    6024:	aa 0f       	add	r26, r26
    6026:	40 89       	ldd	r20, Z+16	; 0x10
    6028:	43 70       	andi	r20, 0x03	; 3
    602a:	4a 2b       	or	r20, r26
    602c:	40 8b       	std	Z+16, r20	; 0x10
    602e:	29 5f       	subi	r18, 0xF9	; 249
    6030:	3f 4f       	sbci	r19, 0xFF	; 255
    6032:	25 31       	cpi	r18, 0x15	; 21
    6034:	31 05       	cpc	r19, r1
    6036:	19 f6       	brne	.-122    	; 0x5fbe <_ZN3PTP13FillEPRecordsEP23USB_ENDPOINT_DESCRIPTOR+0xc>
    6038:	df 91       	pop	r29
    603a:	cf 91       	pop	r28
    603c:	1f 91       	pop	r17
    603e:	0f 91       	pop	r16
    6040:	08 95       	ret

00006042 <_ZN3PTP4InitEhhb>:
    6042:	4f 92       	push	r4
    6044:	5f 92       	push	r5
    6046:	6f 92       	push	r6
    6048:	7f 92       	push	r7
    604a:	8f 92       	push	r8
    604c:	9f 92       	push	r9
    604e:	af 92       	push	r10
    6050:	bf 92       	push	r11
    6052:	cf 92       	push	r12
    6054:	df 92       	push	r13
    6056:	ef 92       	push	r14
    6058:	ff 92       	push	r15
    605a:	0f 93       	push	r16
    605c:	1f 93       	push	r17
    605e:	cf 93       	push	r28
    6060:	df 93       	push	r29
    6062:	cd b7       	in	r28, 0x3d	; 61
    6064:	de b7       	in	r29, 0x3e	; 62
    6066:	a7 97       	sbiw	r28, 0x27	; 39
    6068:	0f b6       	in	r0, 0x3f	; 63
    606a:	f8 94       	cli
    606c:	de bf       	out	0x3e, r29	; 62
    606e:	0f be       	out	0x3f, r0	; 63
    6070:	cd bf       	out	0x3d, r28	; 61
    6072:	6c 01       	movw	r12, r24
    6074:	56 2e       	mov	r5, r22
    6076:	44 2e       	mov	r4, r20
    6078:	dc 01       	movw	r26, r24
    607a:	1c 96       	adiw	r26, 0x0c	; 12
    607c:	ad 90       	ld	r10, X+
    607e:	bc 90       	ld	r11, X
    6080:	1d 97       	sbiw	r26, 0x0d	; 13
    6082:	1a 96       	adiw	r26, 0x0a	; 10
    6084:	8c 91       	ld	r24, X
    6086:	81 11       	cpse	r24, r1
    6088:	0b c1       	rjmp	.+534    	; 0x62a0 <_ZN3PTP4InitEhhb+0x25e>
    608a:	d5 01       	movw	r26, r10
    608c:	ed 91       	ld	r30, X+
    608e:	fc 91       	ld	r31, X
    6090:	01 90       	ld	r0, Z+
    6092:	f0 81       	ld	r31, Z
    6094:	e0 2d       	mov	r30, r0
    6096:	60 e0       	ldi	r22, 0x00	; 0
    6098:	c5 01       	movw	r24, r10
    609a:	09 95       	icall
    609c:	7c 01       	movw	r14, r24
    609e:	00 97       	sbiw	r24, 0x00	; 0
    60a0:	09 f4       	brne	.+2      	; 0x60a4 <_ZN3PTP4InitEhhb+0x62>
    60a2:	00 c1       	rjmp	.+512    	; 0x62a4 <_ZN3PTP4InitEhhb+0x262>
    60a4:	fc 01       	movw	r30, r24
    60a6:	80 80       	ld	r8, Z
    60a8:	91 80       	ldd	r9, Z+1	; 0x01
    60aa:	81 14       	cp	r8, r1
    60ac:	91 04       	cpc	r9, r1
    60ae:	09 f4       	brne	.+2      	; 0x60b2 <_ZN3PTP4InitEhhb+0x70>
    60b0:	fb c0       	rjmp	.+502    	; 0x62a8 <_ZN3PTP4InitEhhb+0x266>
    60b2:	36 01       	movw	r6, r12
    60b4:	fe e0       	ldi	r31, 0x0E	; 14
    60b6:	6f 0e       	add	r6, r31
    60b8:	71 1c       	adc	r7, r1
    60ba:	dc 01       	movw	r26, r24
    60bc:	6d 92       	st	X+, r6
    60be:	7c 92       	st	X, r7
    60c0:	8e 01       	movw	r16, r28
    60c2:	0f 5f       	subi	r16, 0xFF	; 255
    60c4:	1f 4f       	sbci	r17, 0xFF	; 255
    60c6:	28 e0       	ldi	r18, 0x08	; 8
    60c8:	30 e0       	ldi	r19, 0x00	; 0
    60ca:	40 e0       	ldi	r20, 0x00	; 0
    60cc:	60 e0       	ldi	r22, 0x00	; 0
    60ce:	f6 01       	movw	r30, r12
    60d0:	84 85       	ldd	r24, Z+12	; 0x0c
    60d2:	95 85       	ldd	r25, Z+13	; 0x0d
    60d4:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <_ZN3USB11getDevDescrEhhjPh>
    60d8:	81 11       	cpse	r24, r1
    60da:	ea c0       	rjmp	.+468    	; 0x62b0 <_ZN3PTP4InitEhhb+0x26e>
    60dc:	19 81       	ldd	r17, Y+1	; 0x01
    60de:	8d 81       	ldd	r24, Y+5	; 0x05
    60e0:	88 23       	and	r24, r24
    60e2:	51 f0       	breq	.+20     	; 0x60f8 <_ZN3PTP4InitEhhb+0xb6>
    60e4:	86 30       	cpi	r24, 0x06	; 6
    60e6:	41 f0       	breq	.+16     	; 0x60f8 <_ZN3PTP4InitEhhb+0xb6>
    60e8:	8e 81       	ldd	r24, Y+6	; 0x06
    60ea:	81 30       	cpi	r24, 0x01	; 1
    60ec:	29 f0       	breq	.+10     	; 0x60f8 <_ZN3PTP4InitEhhb+0xb6>
    60ee:	8f 81       	ldd	r24, Y+7	; 0x07
    60f0:	81 30       	cpi	r24, 0x01	; 1
    60f2:	11 f0       	breq	.+4      	; 0x60f8 <_ZN3PTP4InitEhhb+0xb6>
    60f4:	81 ed       	ldi	r24, 0xD1	; 209
    60f6:	df c0       	rjmp	.+446    	; 0x62b6 <_ZN3PTP4InitEhhb+0x274>
    60f8:	d5 01       	movw	r26, r10
    60fa:	ed 91       	ld	r30, X+
    60fc:	fc 91       	ld	r31, X
    60fe:	02 80       	ldd	r0, Z+2	; 0x02
    6100:	f3 81       	ldd	r31, Z+3	; 0x03
    6102:	e0 2d       	mov	r30, r0
    6104:	24 2d       	mov	r18, r4
    6106:	40 e0       	ldi	r20, 0x00	; 0
    6108:	65 2d       	mov	r22, r5
    610a:	c5 01       	movw	r24, r10
    610c:	09 95       	icall
    610e:	f6 01       	movw	r30, r12
    6110:	82 87       	std	Z+10, r24	; 0x0a
    6112:	88 23       	and	r24, r24
    6114:	09 f4       	brne	.+2      	; 0x6118 <_ZN3PTP4InitEhhb+0xd6>
    6116:	ca c0       	rjmp	.+404    	; 0x62ac <_ZN3PTP4InitEhhb+0x26a>
    6118:	98 85       	ldd	r25, Y+8	; 0x08
    611a:	97 87       	std	Z+15, r25	; 0x0f
    611c:	28 2f       	mov	r18, r24
    611e:	40 e0       	ldi	r20, 0x00	; 0
    6120:	60 e0       	ldi	r22, 0x00	; 0
    6122:	84 85       	ldd	r24, Z+12	; 0x0c
    6124:	95 85       	ldd	r25, Z+13	; 0x0d
    6126:	0e 94 22 3b 	call	0x7644	; 0x7644 <_ZN3USB7setAddrEhhh>
    612a:	58 2e       	mov	r5, r24
    612c:	88 23       	and	r24, r24
    612e:	b9 f0       	breq	.+46     	; 0x615e <_ZN3PTP4InitEhhb+0x11c>
    6130:	d7 01       	movw	r26, r14
    6132:	8d 92       	st	X+, r8
    6134:	9c 92       	st	X, r9
    6136:	d5 01       	movw	r26, r10
    6138:	ed 91       	ld	r30, X+
    613a:	fc 91       	ld	r31, X
    613c:	04 80       	ldd	r0, Z+4	; 0x04
    613e:	f5 81       	ldd	r31, Z+5	; 0x05
    6140:	e0 2d       	mov	r30, r0
    6142:	d6 01       	movw	r26, r12
    6144:	1a 96       	adiw	r26, 0x0a	; 10
    6146:	6c 91       	ld	r22, X
    6148:	c5 01       	movw	r24, r10
    614a:	09 95       	icall
    614c:	f6 01       	movw	r30, r12
    614e:	12 86       	std	Z+10, r1	; 0x0a
    6150:	61 e0       	ldi	r22, 0x01	; 1
    6152:	70 e0       	ldi	r23, 0x00	; 0
    6154:	80 e0       	ldi	r24, 0x00	; 0
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	57 dc       	rcall	.-1874   	; 0x5a08 <delay>
    615a:	85 2d       	mov	r24, r5
    615c:	ac c0       	rjmp	.+344    	; 0x62b6 <_ZN3PTP4InitEhhb+0x274>
    615e:	11 32       	cpi	r17, 0x21	; 33
    6160:	08 f0       	brcs	.+2      	; 0x6164 <_ZN3PTP4InitEhhb+0x122>
    6162:	10 e2       	ldi	r17, 0x20	; 32
    6164:	61 e0       	ldi	r22, 0x01	; 1
    6166:	70 e0       	ldi	r23, 0x00	; 0
    6168:	80 e0       	ldi	r24, 0x00	; 0
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	4d dc       	rcall	.-1894   	; 0x5a08 <delay>
    616e:	d7 01       	movw	r26, r14
    6170:	8d 92       	st	X+, r8
    6172:	9c 92       	st	X, r9
    6174:	11 11       	cpse	r17, r1
    6176:	0d c0       	rjmp	.+26     	; 0x6192 <_ZN3PTP4InitEhhb+0x150>
    6178:	aa 88       	ldd	r10, Y+18	; 0x12
    617a:	93 01       	movw	r18, r6
    617c:	44 e0       	ldi	r20, 0x04	; 4
    617e:	f6 01       	movw	r30, r12
    6180:	62 85       	ldd	r22, Z+10	; 0x0a
    6182:	84 85       	ldd	r24, Z+12	; 0x0c
    6184:	95 85       	ldd	r25, Z+13	; 0x0d
    6186:	83 d5       	rcall	.+2822   	; 0x6c8e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
    6188:	18 2f       	mov	r17, r24
    618a:	81 11       	cpse	r24, r1
    618c:	81 c0       	rjmp	.+258    	; 0x6290 <_ZN3PTP4InitEhhb+0x24e>
    618e:	b1 2c       	mov	r11, r1
    6190:	4a c0       	rjmp	.+148    	; 0x6226 <_ZN3PTP4InitEhhb+0x1e4>
    6192:	21 2f       	mov	r18, r17
    6194:	30 e0       	ldi	r19, 0x00	; 0
    6196:	8e 01       	movw	r16, r28
    6198:	0f 5f       	subi	r16, 0xFF	; 255
    619a:	1f 4f       	sbci	r17, 0xFF	; 255
    619c:	40 e0       	ldi	r20, 0x00	; 0
    619e:	d6 01       	movw	r26, r12
    61a0:	1a 96       	adiw	r26, 0x0a	; 10
    61a2:	6c 91       	ld	r22, X
    61a4:	1a 97       	sbiw	r26, 0x0a	; 10
    61a6:	1c 96       	adiw	r26, 0x0c	; 12
    61a8:	8d 91       	ld	r24, X+
    61aa:	9c 91       	ld	r25, X
    61ac:	1d 97       	sbiw	r26, 0x0d	; 13
    61ae:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <_ZN3USB11getDevDescrEhhjPh>
    61b2:	18 2f       	mov	r17, r24
    61b4:	81 11       	cpse	r24, r1
    61b6:	6c c0       	rjmp	.+216    	; 0x6290 <_ZN3PTP4InitEhhb+0x24e>
    61b8:	df cf       	rjmp	.-66     	; 0x6178 <_ZN3PTP4InitEhhb+0x136>
    61ba:	fe 01       	movw	r30, r28
    61bc:	31 96       	adiw	r30, 0x01	; 1
    61be:	7f 01       	movw	r14, r30
    61c0:	0b 2d       	mov	r16, r11
    61c2:	28 e0       	ldi	r18, 0x08	; 8
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	40 e0       	ldi	r20, 0x00	; 0
    61c8:	d6 01       	movw	r26, r12
    61ca:	1a 96       	adiw	r26, 0x0a	; 10
    61cc:	6c 91       	ld	r22, X
    61ce:	1a 97       	sbiw	r26, 0x0a	; 10
    61d0:	1c 96       	adiw	r26, 0x0c	; 12
    61d2:	8d 91       	ld	r24, X+
    61d4:	9c 91       	ld	r25, X
    61d6:	1d 97       	sbiw	r26, 0x0d	; 13
    61d8:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <_ZN3USB12getConfDescrEhhjhPh>
    61dc:	18 2f       	mov	r17, r24
    61de:	81 11       	cpse	r24, r1
    61e0:	57 c0       	rjmp	.+174    	; 0x6290 <_ZN3PTP4InitEhhb+0x24e>
    61e2:	2b 81       	ldd	r18, Y+3	; 0x03
    61e4:	3c 81       	ldd	r19, Y+4	; 0x04
    61e6:	28 32       	cpi	r18, 0x28	; 40
    61e8:	31 05       	cpc	r19, r1
    61ea:	10 f0       	brcs	.+4      	; 0x61f0 <_ZN3PTP4InitEhhb+0x1ae>
    61ec:	27 e2       	ldi	r18, 0x27	; 39
    61ee:	30 e0       	ldi	r19, 0x00	; 0
    61f0:	fe 01       	movw	r30, r28
    61f2:	31 96       	adiw	r30, 0x01	; 1
    61f4:	7f 01       	movw	r14, r30
    61f6:	0b 2d       	mov	r16, r11
    61f8:	40 e0       	ldi	r20, 0x00	; 0
    61fa:	d6 01       	movw	r26, r12
    61fc:	1a 96       	adiw	r26, 0x0a	; 10
    61fe:	6c 91       	ld	r22, X
    6200:	1a 97       	sbiw	r26, 0x0a	; 10
    6202:	1c 96       	adiw	r26, 0x0c	; 12
    6204:	8d 91       	ld	r24, X+
    6206:	9c 91       	ld	r25, X
    6208:	1d 97       	sbiw	r26, 0x0d	; 13
    620a:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <_ZN3USB12getConfDescrEhhjhPh>
    620e:	18 2f       	mov	r17, r24
    6210:	81 11       	cpse	r24, r1
    6212:	3e c0       	rjmp	.+124    	; 0x6290 <_ZN3PTP4InitEhhb+0x24e>
    6214:	61 e0       	ldi	r22, 0x01	; 1
    6216:	70 e0       	ldi	r23, 0x00	; 0
    6218:	80 e0       	ldi	r24, 0x00	; 0
    621a:	90 e0       	ldi	r25, 0x00	; 0
    621c:	f5 db       	rcall	.-2070   	; 0x5a08 <delay>
    621e:	8d 81       	ldd	r24, Y+5	; 0x05
    6220:	81 11       	cpse	r24, r1
    6222:	04 c0       	rjmp	.+8      	; 0x622c <_ZN3PTP4InitEhhb+0x1ea>
    6224:	b3 94       	inc	r11
    6226:	ba 10       	cpse	r11, r10
    6228:	c8 cf       	rjmp	.-112    	; 0x61ba <_ZN3PTP4InitEhhb+0x178>
    622a:	11 c0       	rjmp	.+34     	; 0x624e <_ZN3PTP4InitEhhb+0x20c>
    622c:	8f 85       	ldd	r24, Y+15	; 0x0f
    622e:	86 30       	cpi	r24, 0x06	; 6
    6230:	c9 f7       	brne	.-14     	; 0x6224 <_ZN3PTP4InitEhhb+0x1e2>
    6232:	88 89       	ldd	r24, Y+16	; 0x10
    6234:	81 30       	cpi	r24, 0x01	; 1
    6236:	b1 f7       	brne	.-20     	; 0x6224 <_ZN3PTP4InitEhhb+0x1e2>
    6238:	89 89       	ldd	r24, Y+17	; 0x11
    623a:	81 30       	cpi	r24, 0x01	; 1
    623c:	99 f7       	brne	.-26     	; 0x6224 <_ZN3PTP4InitEhhb+0x1e2>
    623e:	be 01       	movw	r22, r28
    6240:	6d 5e       	subi	r22, 0xED	; 237
    6242:	7f 4f       	sbci	r23, 0xFF	; 255
    6244:	c6 01       	movw	r24, r12
    6246:	b5 de       	rcall	.-662    	; 0x5fb2 <_ZN3PTP13FillEPRecordsEP23USB_ENDPOINT_DESCRIPTOR>
    6248:	8e 81       	ldd	r24, Y+6	; 0x06
    624a:	f6 01       	movw	r30, r12
    624c:	83 87       	std	Z+11, r24	; 0x0b
    624e:	d6 01       	movw	r26, r12
    6250:	1b 96       	adiw	r26, 0x0b	; 11
    6252:	2c 91       	ld	r18, X
    6254:	1b 97       	sbiw	r26, 0x0b	; 11
    6256:	22 23       	and	r18, r18
    6258:	09 f4       	brne	.+2      	; 0x625c <_ZN3PTP4InitEhhb+0x21a>
    625a:	4c cf       	rjmp	.-360    	; 0x60f4 <_ZN3PTP4InitEhhb+0xb2>
    625c:	40 e0       	ldi	r20, 0x00	; 0
    625e:	1a 96       	adiw	r26, 0x0a	; 10
    6260:	6c 91       	ld	r22, X
    6262:	1a 97       	sbiw	r26, 0x0a	; 10
    6264:	1c 96       	adiw	r26, 0x0c	; 12
    6266:	8d 91       	ld	r24, X+
    6268:	9c 91       	ld	r25, X
    626a:	1d 97       	sbiw	r26, 0x0d	; 13
    626c:	0e 94 50 3b 	call	0x76a0	; 0x76a0 <_ZN3USB7setConfEhhh>
    6270:	18 2f       	mov	r17, r24
    6272:	81 11       	cpse	r24, r1
    6274:	0d c0       	rjmp	.+26     	; 0x6290 <_ZN3PTP4InitEhhb+0x24e>
    6276:	f6 01       	movw	r30, r12
    6278:	16 82       	std	Z+6, r1	; 0x06
    627a:	15 82       	std	Z+5, r1	; 0x05
    627c:	8f ef       	ldi	r24, 0xFF	; 255
    627e:	9f ef       	ldi	r25, 0xFF	; 255
    6280:	94 83       	std	Z+4, r25	; 0x04
    6282:	83 83       	std	Z+3, r24	; 0x03
    6284:	82 e0       	ldi	r24, 0x02	; 2
    6286:	82 83       	std	Z+2, r24	; 0x02
    6288:	81 e0       	ldi	r24, 0x01	; 1
    628a:	81 87       	std	Z+9, r24	; 0x09
    628c:	80 e0       	ldi	r24, 0x00	; 0
    628e:	13 c0       	rjmp	.+38     	; 0x62b6 <_ZN3PTP4InitEhhb+0x274>
    6290:	40 e1       	ldi	r20, 0x10	; 16
    6292:	50 e0       	ldi	r21, 0x00	; 0
    6294:	61 2f       	mov	r22, r17
    6296:	84 e7       	ldi	r24, 0x74	; 116
    6298:	94 e0       	ldi	r25, 0x04	; 4
    629a:	d1 da       	rcall	.-2654   	; 0x583e <_ZN5Print7printlnEhi>
    629c:	81 2f       	mov	r24, r17
    629e:	0b c0       	rjmp	.+22     	; 0x62b6 <_ZN3PTP4InitEhhb+0x274>
    62a0:	89 ed       	ldi	r24, 0xD9	; 217
    62a2:	09 c0       	rjmp	.+18     	; 0x62b6 <_ZN3PTP4InitEhhb+0x274>
    62a4:	86 ed       	ldi	r24, 0xD6	; 214
    62a6:	07 c0       	rjmp	.+14     	; 0x62b6 <_ZN3PTP4InitEhhb+0x274>
    62a8:	87 ed       	ldi	r24, 0xD7	; 215
    62aa:	05 c0       	rjmp	.+10     	; 0x62b6 <_ZN3PTP4InitEhhb+0x274>
    62ac:	84 ed       	ldi	r24, 0xD4	; 212
    62ae:	03 c0       	rjmp	.+6      	; 0x62b6 <_ZN3PTP4InitEhhb+0x274>
    62b0:	d7 01       	movw	r26, r14
    62b2:	8d 92       	st	X+, r8
    62b4:	9c 92       	st	X, r9
    62b6:	a7 96       	adiw	r28, 0x27	; 39
    62b8:	0f b6       	in	r0, 0x3f	; 63
    62ba:	f8 94       	cli
    62bc:	de bf       	out	0x3e, r29	; 62
    62be:	0f be       	out	0x3f, r0	; 63
    62c0:	cd bf       	out	0x3d, r28	; 61
    62c2:	df 91       	pop	r29
    62c4:	cf 91       	pop	r28
    62c6:	1f 91       	pop	r17
    62c8:	0f 91       	pop	r16
    62ca:	ff 90       	pop	r15
    62cc:	ef 90       	pop	r14
    62ce:	df 90       	pop	r13
    62d0:	cf 90       	pop	r12
    62d2:	bf 90       	pop	r11
    62d4:	af 90       	pop	r10
    62d6:	9f 90       	pop	r9
    62d8:	8f 90       	pop	r8
    62da:	7f 90       	pop	r7
    62dc:	6f 90       	pop	r6
    62de:	5f 90       	pop	r5
    62e0:	4f 90       	pop	r4
    62e2:	08 95       	ret

000062e4 <_ZN3PTP4TaskEv>:
    62e4:	bc 01       	movw	r22, r24
    62e6:	dc 01       	movw	r26, r24
    62e8:	12 96       	adiw	r26, 0x02	; 2
    62ea:	8c 91       	ld	r24, X
    62ec:	84 30       	cpi	r24, 0x04	; 4
    62ee:	19 f1       	breq	.+70     	; 0x6336 <_ZN3PTP4TaskEv+0x52>
    62f0:	28 f4       	brcc	.+10     	; 0x62fc <_ZN3PTP4TaskEv+0x18>
    62f2:	82 30       	cpi	r24, 0x02	; 2
    62f4:	41 f0       	breq	.+16     	; 0x6306 <_ZN3PTP4TaskEv+0x22>
    62f6:	83 30       	cpi	r24, 0x03	; 3
    62f8:	91 f0       	breq	.+36     	; 0x631e <_ZN3PTP4TaskEv+0x3a>
    62fa:	08 95       	ret
    62fc:	85 30       	cpi	r24, 0x05	; 5
    62fe:	39 f1       	breq	.+78     	; 0x634e <_ZN3PTP4TaskEv+0x6a>
    6300:	86 30       	cpi	r24, 0x06	; 6
    6302:	89 f1       	breq	.+98     	; 0x6366 <_ZN3PTP4TaskEv+0x82>
    6304:	08 95       	ret
    6306:	fb 01       	movw	r30, r22
    6308:	87 81       	ldd	r24, Z+7	; 0x07
    630a:	90 85       	ldd	r25, Z+8	; 0x08
    630c:	00 97       	sbiw	r24, 0x00	; 0
    630e:	b9 f1       	breq	.+110    	; 0x637e <_ZN3PTP4TaskEv+0x9a>
    6310:	dc 01       	movw	r26, r24
    6312:	ed 91       	ld	r30, X+
    6314:	fc 91       	ld	r31, X
    6316:	02 80       	ldd	r0, Z+2	; 0x02
    6318:	f3 81       	ldd	r31, Z+3	; 0x03
    631a:	e0 2d       	mov	r30, r0
    631c:	2f c0       	rjmp	.+94     	; 0x637c <_ZN3PTP4TaskEv+0x98>
    631e:	fb 01       	movw	r30, r22
    6320:	87 81       	ldd	r24, Z+7	; 0x07
    6322:	90 85       	ldd	r25, Z+8	; 0x08
    6324:	00 97       	sbiw	r24, 0x00	; 0
    6326:	59 f1       	breq	.+86     	; 0x637e <_ZN3PTP4TaskEv+0x9a>
    6328:	dc 01       	movw	r26, r24
    632a:	ed 91       	ld	r30, X+
    632c:	fc 91       	ld	r31, X
    632e:	04 80       	ldd	r0, Z+4	; 0x04
    6330:	f5 81       	ldd	r31, Z+5	; 0x05
    6332:	e0 2d       	mov	r30, r0
    6334:	23 c0       	rjmp	.+70     	; 0x637c <_ZN3PTP4TaskEv+0x98>
    6336:	fb 01       	movw	r30, r22
    6338:	87 81       	ldd	r24, Z+7	; 0x07
    633a:	90 85       	ldd	r25, Z+8	; 0x08
    633c:	00 97       	sbiw	r24, 0x00	; 0
    633e:	f9 f0       	breq	.+62     	; 0x637e <_ZN3PTP4TaskEv+0x9a>
    6340:	dc 01       	movw	r26, r24
    6342:	ed 91       	ld	r30, X+
    6344:	fc 91       	ld	r31, X
    6346:	06 80       	ldd	r0, Z+6	; 0x06
    6348:	f7 81       	ldd	r31, Z+7	; 0x07
    634a:	e0 2d       	mov	r30, r0
    634c:	17 c0       	rjmp	.+46     	; 0x637c <_ZN3PTP4TaskEv+0x98>
    634e:	fb 01       	movw	r30, r22
    6350:	87 81       	ldd	r24, Z+7	; 0x07
    6352:	90 85       	ldd	r25, Z+8	; 0x08
    6354:	00 97       	sbiw	r24, 0x00	; 0
    6356:	99 f0       	breq	.+38     	; 0x637e <_ZN3PTP4TaskEv+0x9a>
    6358:	dc 01       	movw	r26, r24
    635a:	ed 91       	ld	r30, X+
    635c:	fc 91       	ld	r31, X
    635e:	00 84       	ldd	r0, Z+8	; 0x08
    6360:	f1 85       	ldd	r31, Z+9	; 0x09
    6362:	e0 2d       	mov	r30, r0
    6364:	0b c0       	rjmp	.+22     	; 0x637c <_ZN3PTP4TaskEv+0x98>
    6366:	fb 01       	movw	r30, r22
    6368:	87 81       	ldd	r24, Z+7	; 0x07
    636a:	90 85       	ldd	r25, Z+8	; 0x08
    636c:	00 97       	sbiw	r24, 0x00	; 0
    636e:	39 f0       	breq	.+14     	; 0x637e <_ZN3PTP4TaskEv+0x9a>
    6370:	dc 01       	movw	r26, r24
    6372:	ed 91       	ld	r30, X+
    6374:	fc 91       	ld	r31, X
    6376:	02 84       	ldd	r0, Z+10	; 0x0a
    6378:	f3 85       	ldd	r31, Z+11	; 0x0b
    637a:	e0 2d       	mov	r30, r0
    637c:	09 94       	ijmp
    637e:	08 95       	ret

00006380 <_ZN3PTP4PollEv>:
    6380:	fc 01       	movw	r30, r24
    6382:	21 85       	ldd	r18, Z+9	; 0x09
    6384:	21 11       	cpse	r18, r1
    6386:	ae df       	rcall	.-164    	; 0x62e4 <_ZN3PTP4TaskEv>
    6388:	80 e0       	ldi	r24, 0x00	; 0
    638a:	08 95       	ret

0000638c <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv>:
    638c:	2f 92       	push	r2
    638e:	3f 92       	push	r3
    6390:	4f 92       	push	r4
    6392:	5f 92       	push	r5
    6394:	6f 92       	push	r6
    6396:	7f 92       	push	r7
    6398:	8f 92       	push	r8
    639a:	9f 92       	push	r9
    639c:	af 92       	push	r10
    639e:	bf 92       	push	r11
    63a0:	cf 92       	push	r12
    63a2:	df 92       	push	r13
    63a4:	ef 92       	push	r14
    63a6:	ff 92       	push	r15
    63a8:	0f 93       	push	r16
    63aa:	1f 93       	push	r17
    63ac:	cf 93       	push	r28
    63ae:	df 93       	push	r29
    63b0:	cd b7       	in	r28, 0x3d	; 61
    63b2:	de b7       	in	r29, 0x3e	; 62
    63b4:	c0 56       	subi	r28, 0x60	; 96
    63b6:	d1 09       	sbc	r29, r1
    63b8:	0f b6       	in	r0, 0x3f	; 63
    63ba:	f8 94       	cli
    63bc:	de bf       	out	0x3e, r29	; 62
    63be:	0f be       	out	0x3f, r0	; 63
    63c0:	cd bf       	out	0x3d, r28	; 61
    63c2:	6c 01       	movw	r12, r24
    63c4:	4b 01       	movw	r8, r22
    63c6:	2d 96       	adiw	r28, 0x0d	; 13
    63c8:	5f af       	std	Y+63, r21	; 0x3f
    63ca:	4e af       	std	Y+62, r20	; 0x3e
    63cc:	2d 97       	sbiw	r28, 0x0d	; 13
    63ce:	2f 96       	adiw	r28, 0x0f	; 15
    63d0:	3f af       	std	Y+63, r19	; 0x3f
    63d2:	2e af       	std	Y+62, r18	; 0x3e
    63d4:	2f 97       	sbiw	r28, 0x0f	; 15
    63d6:	78 01       	movw	r14, r16
    63d8:	dc 01       	movw	r26, r24
    63da:	13 96       	adiw	r26, 0x03	; 3
    63dc:	8d 91       	ld	r24, X+
    63de:	9c 91       	ld	r25, X
    63e0:	14 97       	sbiw	r26, 0x04	; 4
    63e2:	01 96       	adiw	r24, 0x01	; 1
    63e4:	14 96       	adiw	r26, 0x04	; 4
    63e6:	9c 93       	st	X, r25
    63e8:	8e 93       	st	-X, r24
    63ea:	13 97       	sbiw	r26, 0x03	; 3
    63ec:	21 e0       	ldi	r18, 0x01	; 1
    63ee:	30 e0       	ldi	r19, 0x00	; 0
    63f0:	3e 83       	std	Y+6, r19	; 0x06
    63f2:	2d 83       	std	Y+5, r18	; 0x05
    63f4:	78 87       	std	Y+8, r23	; 0x08
    63f6:	6f 83       	std	Y+7, r22	; 0x07
    63f8:	a0 e0       	ldi	r26, 0x00	; 0
    63fa:	b0 e0       	ldi	r27, 0x00	; 0
    63fc:	89 87       	std	Y+9, r24	; 0x09
    63fe:	9a 87       	std	Y+10, r25	; 0x0a
    6400:	ab 87       	std	Y+11, r26	; 0x0b
    6402:	bc 87       	std	Y+12, r27	; 0x0c
    6404:	1d 86       	std	Y+13, r1	; 0x0d
    6406:	1e 86       	std	Y+14, r1	; 0x0e
    6408:	1f 86       	std	Y+15, r1	; 0x0f
    640a:	18 8a       	std	Y+16, r1	; 0x10
    640c:	19 8a       	std	Y+17, r1	; 0x11
    640e:	1a 8a       	std	Y+18, r1	; 0x12
    6410:	1b 8a       	std	Y+19, r1	; 0x13
    6412:	1c 8a       	std	Y+20, r1	; 0x14
    6414:	1d 8a       	std	Y+21, r1	; 0x15
    6416:	1e 8a       	std	Y+22, r1	; 0x16
    6418:	1f 8a       	std	Y+23, r1	; 0x17
    641a:	18 8e       	std	Y+24, r1	; 0x18
    641c:	fa 01       	movw	r30, r20
    641e:	20 81       	ld	r18, Z
    6420:	27 70       	andi	r18, 0x07	; 7
    6422:	30 e0       	ldi	r19, 0x00	; 0
    6424:	22 30       	cpi	r18, 0x02	; 2
    6426:	31 05       	cpc	r19, r1
    6428:	99 f0       	breq	.+38     	; 0x6450 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0xc4>
    642a:	23 30       	cpi	r18, 0x03	; 3
    642c:	31 05       	cpc	r19, r1
    642e:	21 f0       	breq	.+8      	; 0x6438 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0xac>
    6430:	21 30       	cpi	r18, 0x01	; 1
    6432:	31 05       	cpc	r19, r1
    6434:	29 f5       	brne	.+74     	; 0x6480 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0xf4>
    6436:	18 c0       	rjmp	.+48     	; 0x6468 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0xdc>
    6438:	2f 96       	adiw	r28, 0x0f	; 15
    643a:	ee ad       	ldd	r30, Y+62	; 0x3e
    643c:	ff ad       	ldd	r31, Y+63	; 0x3f
    643e:	2f 97       	sbiw	r28, 0x0f	; 15
    6440:	80 85       	ldd	r24, Z+8	; 0x08
    6442:	91 85       	ldd	r25, Z+9	; 0x09
    6444:	a2 85       	ldd	r26, Z+10	; 0x0a
    6446:	b3 85       	ldd	r27, Z+11	; 0x0b
    6448:	8d 8b       	std	Y+21, r24	; 0x15
    644a:	9e 8b       	std	Y+22, r25	; 0x16
    644c:	af 8b       	std	Y+23, r26	; 0x17
    644e:	b8 8f       	std	Y+24, r27	; 0x18
    6450:	2f 96       	adiw	r28, 0x0f	; 15
    6452:	ee ad       	ldd	r30, Y+62	; 0x3e
    6454:	ff ad       	ldd	r31, Y+63	; 0x3f
    6456:	2f 97       	sbiw	r28, 0x0f	; 15
    6458:	84 81       	ldd	r24, Z+4	; 0x04
    645a:	95 81       	ldd	r25, Z+5	; 0x05
    645c:	a6 81       	ldd	r26, Z+6	; 0x06
    645e:	b7 81       	ldd	r27, Z+7	; 0x07
    6460:	89 8b       	std	Y+17, r24	; 0x11
    6462:	9a 8b       	std	Y+18, r25	; 0x12
    6464:	ab 8b       	std	Y+19, r26	; 0x13
    6466:	bc 8b       	std	Y+20, r27	; 0x14
    6468:	2f 96       	adiw	r28, 0x0f	; 15
    646a:	ee ad       	ldd	r30, Y+62	; 0x3e
    646c:	ff ad       	ldd	r31, Y+63	; 0x3f
    646e:	2f 97       	sbiw	r28, 0x0f	; 15
    6470:	80 81       	ld	r24, Z
    6472:	91 81       	ldd	r25, Z+1	; 0x01
    6474:	a2 81       	ldd	r26, Z+2	; 0x02
    6476:	b3 81       	ldd	r27, Z+3	; 0x03
    6478:	8d 87       	std	Y+13, r24	; 0x0d
    647a:	9e 87       	std	Y+14, r25	; 0x0e
    647c:	af 87       	std	Y+15, r26	; 0x0f
    647e:	b8 8b       	std	Y+16, r27	; 0x10
    6480:	22 0f       	add	r18, r18
    6482:	33 1f       	adc	r19, r19
    6484:	22 0f       	add	r18, r18
    6486:	33 1f       	adc	r19, r19
    6488:	24 5f       	subi	r18, 0xF4	; 244
    648a:	3f 4f       	sbci	r19, 0xFF	; 255
    648c:	c9 01       	movw	r24, r18
    648e:	a0 e0       	ldi	r26, 0x00	; 0
    6490:	b0 e0       	ldi	r27, 0x00	; 0
    6492:	89 83       	std	Y+1, r24	; 0x01
    6494:	9a 83       	std	Y+2, r25	; 0x02
    6496:	ab 83       	std	Y+3, r26	; 0x03
    6498:	bc 83       	std	Y+4, r27	; 0x04
    649a:	8e 01       	movw	r16, r28
    649c:	0f 5f       	subi	r16, 0xFF	; 255
    649e:	1f 4f       	sbci	r17, 0xFF	; 255
    64a0:	58 01       	movw	r10, r16
    64a2:	d6 01       	movw	r26, r12
    64a4:	54 96       	adiw	r26, 0x14	; 20
    64a6:	4c 91       	ld	r20, X
    64a8:	54 97       	sbiw	r26, 0x14	; 20
    64aa:	1a 96       	adiw	r26, 0x0a	; 10
    64ac:	6c 91       	ld	r22, X
    64ae:	1a 97       	sbiw	r26, 0x0a	; 10
    64b0:	1c 96       	adiw	r26, 0x0c	; 12
    64b2:	8d 91       	ld	r24, X+
    64b4:	9c 91       	ld	r25, X
    64b6:	1d 97       	sbiw	r26, 0x0d	; 13
    64b8:	af d6       	rcall	.+3422   	; 0x7218 <_ZN3USB11outTransferEhhjPh>
    64ba:	81 11       	cpse	r24, r1
    64bc:	dc c0       	rjmp	.+440    	; 0x6676 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x2ea>
    64be:	2d 96       	adiw	r28, 0x0d	; 13
    64c0:	ee ad       	ldd	r30, Y+62	; 0x3e
    64c2:	ff ad       	ldd	r31, Y+63	; 0x3f
    64c4:	2d 97       	sbiw	r28, 0x0d	; 13
    64c6:	80 81       	ld	r24, Z
    64c8:	86 ff       	sbrs	r24, 6
    64ca:	9c c0       	rjmp	.+312    	; 0x6604 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x278>
    64cc:	41 81       	ldd	r20, Z+1	; 0x01
    64ce:	84 2f       	mov	r24, r20
    64d0:	83 70       	andi	r24, 0x03	; 3
    64d2:	21 f0       	breq	.+8      	; 0x64dc <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x150>
    64d4:	e1 14       	cp	r14, r1
    64d6:	f1 04       	cpc	r15, r1
    64d8:	09 f4       	brne	.+2      	; 0x64dc <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x150>
    64da:	d2 c0       	rjmp	.+420    	; 0x6680 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x2f4>
    64dc:	d6 01       	movw	r26, r12
    64de:	13 96       	adiw	r26, 0x03	; 3
    64e0:	8d 91       	ld	r24, X+
    64e2:	9c 91       	ld	r25, X
    64e4:	14 97       	sbiw	r26, 0x04	; 4
    64e6:	a0 e0       	ldi	r26, 0x00	; 0
    64e8:	b0 e0       	ldi	r27, 0x00	; 0
    64ea:	19 82       	std	Y+1, r1	; 0x01
    64ec:	1a 82       	std	Y+2, r1	; 0x02
    64ee:	1b 82       	std	Y+3, r1	; 0x03
    64f0:	1c 82       	std	Y+4, r1	; 0x04
    64f2:	22 e0       	ldi	r18, 0x02	; 2
    64f4:	30 e0       	ldi	r19, 0x00	; 0
    64f6:	3e 83       	std	Y+6, r19	; 0x06
    64f8:	2d 83       	std	Y+5, r18	; 0x05
    64fa:	98 86       	std	Y+8, r9	; 0x08
    64fc:	8f 82       	std	Y+7, r8	; 0x07
    64fe:	89 87       	std	Y+9, r24	; 0x09
    6500:	9a 87       	std	Y+10, r25	; 0x0a
    6502:	ab 87       	std	Y+11, r26	; 0x0b
    6504:	bc 87       	std	Y+12, r27	; 0x0c
    6506:	84 2f       	mov	r24, r20
    6508:	83 70       	andi	r24, 0x03	; 3
    650a:	90 e0       	ldi	r25, 0x00	; 0
    650c:	81 30       	cpi	r24, 0x01	; 1
    650e:	91 05       	cpc	r25, r1
    6510:	91 f0       	breq	.+36     	; 0x6536 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x1aa>
    6512:	03 97       	sbiw	r24, 0x03	; 3
    6514:	61 f5       	brne	.+88     	; 0x656e <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x1e2>
    6516:	46 95       	lsr	r20
    6518:	46 95       	lsr	r20
    651a:	50 e0       	ldi	r21, 0x00	; 0
    651c:	4a 01       	movw	r8, r20
    651e:	fc e0       	ldi	r31, 0x0C	; 12
    6520:	8f 0e       	add	r8, r31
    6522:	91 1c       	adc	r9, r1
    6524:	24 01       	movw	r4, r8
    6526:	61 2c       	mov	r6, r1
    6528:	71 2c       	mov	r7, r1
    652a:	b7 01       	movw	r22, r14
    652c:	ce 01       	movw	r24, r28
    652e:	0d 96       	adiw	r24, 0x0d	; 13
    6530:	0e 94 1e 3f 	call	0x7e3c	; 0x7e3c <memcpy>
    6534:	24 c0       	rjmp	.+72     	; 0x657e <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x1f2>
    6536:	d7 01       	movw	r26, r14
    6538:	ed 91       	ld	r30, X+
    653a:	fc 91       	ld	r31, X
    653c:	01 90       	ld	r0, Z+
    653e:	f0 81       	ld	r31, Z
    6540:	e0 2d       	mov	r30, r0
    6542:	c7 01       	movw	r24, r14
    6544:	09 95       	icall
    6546:	2b 01       	movw	r4, r22
    6548:	3c 01       	movw	r6, r24
    654a:	bc e0       	ldi	r27, 0x0C	; 12
    654c:	4b 0e       	add	r4, r27
    654e:	51 1c       	adc	r5, r1
    6550:	61 1c       	adc	r6, r1
    6552:	71 1c       	adc	r7, r1
    6554:	94 2d       	mov	r25, r4
    6556:	85 2d       	mov	r24, r5
    6558:	e1 e4       	ldi	r30, 0x41	; 65
    655a:	4e 16       	cp	r4, r30
    655c:	51 04       	cpc	r5, r1
    655e:	61 04       	cpc	r6, r1
    6560:	71 04       	cpc	r7, r1
    6562:	10 f0       	brcs	.+4      	; 0x6568 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x1dc>
    6564:	90 e4       	ldi	r25, 0x40	; 64
    6566:	80 e0       	ldi	r24, 0x00	; 0
    6568:	89 2e       	mov	r8, r25
    656a:	98 2e       	mov	r9, r24
    656c:	08 c0       	rjmp	.+16     	; 0x657e <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x1f2>
    656e:	ac e0       	ldi	r26, 0x0C	; 12
    6570:	8a 2e       	mov	r8, r26
    6572:	91 2c       	mov	r9, r1
    6574:	bc e0       	ldi	r27, 0x0C	; 12
    6576:	4b 2e       	mov	r4, r27
    6578:	51 2c       	mov	r5, r1
    657a:	61 2c       	mov	r6, r1
    657c:	71 2c       	mov	r7, r1
    657e:	49 82       	std	Y+1, r4	; 0x01
    6580:	5a 82       	std	Y+2, r5	; 0x02
    6582:	6b 82       	std	Y+3, r6	; 0x03
    6584:	7c 82       	std	Y+4, r7	; 0x04
    6586:	91 e0       	ldi	r25, 0x01	; 1
    6588:	1e 01       	movw	r2, r28
    658a:	0d e0       	ldi	r16, 0x0D	; 13
    658c:	20 0e       	add	r2, r16
    658e:	31 1c       	adc	r3, r1
    6590:	41 14       	cp	r4, r1
    6592:	51 04       	cpc	r5, r1
    6594:	61 04       	cpc	r6, r1
    6596:	71 04       	cpc	r7, r1
    6598:	a9 f1       	breq	.+106    	; 0x6604 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x278>
    659a:	2d 96       	adiw	r28, 0x0d	; 13
    659c:	ae ad       	ldd	r26, Y+62	; 0x3e
    659e:	bf ad       	ldd	r27, Y+63	; 0x3f
    65a0:	2d 97       	sbiw	r28, 0x0d	; 13
    65a2:	11 96       	adiw	r26, 0x01	; 1
    65a4:	8c 91       	ld	r24, X
    65a6:	83 70       	andi	r24, 0x03	; 3
    65a8:	81 30       	cpi	r24, 0x01	; 1
    65aa:	81 f4       	brne	.+32     	; 0x65cc <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x240>
    65ac:	b4 01       	movw	r22, r8
    65ae:	99 23       	and	r25, r25
    65b0:	21 f0       	breq	.+8      	; 0x65ba <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x22e>
    65b2:	6c 50       	subi	r22, 0x0C	; 12
    65b4:	71 09       	sbc	r23, r1
    65b6:	a1 01       	movw	r20, r2
    65b8:	01 c0       	rjmp	.+2      	; 0x65bc <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x230>
    65ba:	a5 01       	movw	r20, r10
    65bc:	d7 01       	movw	r26, r14
    65be:	ed 91       	ld	r30, X+
    65c0:	fc 91       	ld	r31, X
    65c2:	02 80       	ldd	r0, Z+2	; 0x02
    65c4:	f3 81       	ldd	r31, Z+3	; 0x03
    65c6:	e0 2d       	mov	r30, r0
    65c8:	c7 01       	movw	r24, r14
    65ca:	09 95       	icall
    65cc:	85 01       	movw	r16, r10
    65ce:	94 01       	movw	r18, r8
    65d0:	f6 01       	movw	r30, r12
    65d2:	44 89       	ldd	r20, Z+20	; 0x14
    65d4:	62 85       	ldd	r22, Z+10	; 0x0a
    65d6:	84 85       	ldd	r24, Z+12	; 0x0c
    65d8:	95 85       	ldd	r25, Z+13	; 0x0d
    65da:	1e d6       	rcall	.+3132   	; 0x7218 <_ZN3USB11outTransferEhhjPh>
    65dc:	81 11       	cpse	r24, r1
    65de:	4b c0       	rjmp	.+150    	; 0x6676 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x2ea>
    65e0:	48 18       	sub	r4, r8
    65e2:	59 08       	sbc	r5, r9
    65e4:	61 08       	sbc	r6, r1
    65e6:	71 08       	sbc	r7, r1
    65e8:	94 2d       	mov	r25, r4
    65ea:	85 2d       	mov	r24, r5
    65ec:	f1 e4       	ldi	r31, 0x41	; 65
    65ee:	4f 16       	cp	r4, r31
    65f0:	51 04       	cpc	r5, r1
    65f2:	61 04       	cpc	r6, r1
    65f4:	71 04       	cpc	r7, r1
    65f6:	10 f0       	brcs	.+4      	; 0x65fc <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x270>
    65f8:	90 e4       	ldi	r25, 0x40	; 64
    65fa:	80 e0       	ldi	r24, 0x00	; 0
    65fc:	89 2e       	mov	r8, r25
    65fe:	98 2e       	mov	r9, r24
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	c6 cf       	rjmp	.-116    	; 0x6590 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x204>
    6604:	1e 01       	movw	r2, r28
    6606:	05 e4       	ldi	r16, 0x45	; 69
    6608:	20 0e       	add	r2, r16
    660a:	31 1c       	adc	r3, r1
    660c:	d1 01       	movw	r26, r2
    660e:	1d 92       	st	X+, r1
    6610:	1d 92       	st	X+, r1
    6612:	1d 92       	st	X+, r1
    6614:	1c 92       	st	X, r1
    6616:	13 97       	sbiw	r26, 0x03	; 3
    6618:	19 82       	std	Y+1, r1	; 0x01
    661a:	1a 82       	std	Y+2, r1	; 0x02
    661c:	1b 82       	std	Y+3, r1	; 0x03
    661e:	1c 82       	std	Y+4, r1	; 0x04
    6620:	1e 82       	std	Y+6, r1	; 0x06
    6622:	1d 82       	std	Y+5, r1	; 0x05
    6624:	82 e0       	ldi	r24, 0x02	; 2
    6626:	90 e2       	ldi	r25, 0x20	; 32
    6628:	98 87       	std	Y+8, r25	; 0x08
    662a:	8f 83       	std	Y+7, r24	; 0x07
    662c:	19 86       	std	Y+9, r1	; 0x09
    662e:	1a 86       	std	Y+10, r1	; 0x0a
    6630:	1b 86       	std	Y+11, r1	; 0x0b
    6632:	1c 86       	std	Y+12, r1	; 0x0c
    6634:	81 2c       	mov	r8, r1
    6636:	91 2c       	mov	r9, r1
    6638:	a1 96       	adiw	r28, 0x21	; 33
    663a:	1c ae       	std	Y+60, r1	; 0x3c
    663c:	1d ae       	std	Y+61, r1	; 0x3d
    663e:	1e ae       	std	Y+62, r1	; 0x3e
    6640:	1f ae       	std	Y+63, r1	; 0x3f
    6642:	a1 97       	sbiw	r28, 0x21	; 33
    6644:	e0 e4       	ldi	r30, 0x40	; 64
    6646:	f0 e0       	ldi	r31, 0x00	; 0
    6648:	2b 96       	adiw	r28, 0x0b	; 11
    664a:	ff af       	std	Y+63, r31	; 0x3f
    664c:	ee af       	std	Y+62, r30	; 0x3e
    664e:	2b 97       	sbiw	r28, 0x0b	; 11
    6650:	85 01       	movw	r16, r10
    6652:	9e 01       	movw	r18, r28
    6654:	27 5b       	subi	r18, 0xB7	; 183
    6656:	3f 4f       	sbci	r19, 0xFF	; 255
    6658:	d6 01       	movw	r26, r12
    665a:	51 96       	adiw	r26, 0x11	; 17
    665c:	4c 91       	ld	r20, X
    665e:	51 97       	sbiw	r26, 0x11	; 17
    6660:	1a 96       	adiw	r26, 0x0a	; 10
    6662:	6c 91       	ld	r22, X
    6664:	1a 97       	sbiw	r26, 0x0a	; 10
    6666:	1c 96       	adiw	r26, 0x0c	; 12
    6668:	8d 91       	ld	r24, X+
    666a:	9c 91       	ld	r25, X
    666c:	1d 97       	sbiw	r26, 0x0d	; 13
    666e:	0e 94 94 3b 	call	0x7728	; 0x7728 <_ZN3USB10inTransferEhhPjPh>
    6672:	88 23       	and	r24, r24
    6674:	41 f0       	breq	.+16     	; 0x6686 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x2fa>
    6676:	61 e0       	ldi	r22, 0x01	; 1
    6678:	70 e0       	ldi	r23, 0x00	; 0
    667a:	80 e0       	ldi	r24, 0x00	; 0
    667c:	90 e0       	ldi	r25, 0x00	; 0
    667e:	c4 d9       	rcall	.-3192   	; 0x5a08 <delay>
    6680:	82 e0       	ldi	r24, 0x02	; 2
    6682:	90 e2       	ldi	r25, 0x20	; 32
    6684:	2a c1       	rjmp	.+596    	; 0x68da <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x54e>
    6686:	81 14       	cp	r8, r1
    6688:	91 04       	cpc	r9, r1
    668a:	91 f0       	breq	.+36     	; 0x66b0 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x324>
    668c:	29 96       	adiw	r28, 0x09	; 9
    668e:	8c ad       	ldd	r24, Y+60	; 0x3c
    6690:	9d ad       	ldd	r25, Y+61	; 0x3d
    6692:	ae ad       	ldd	r26, Y+62	; 0x3e
    6694:	bf ad       	ldd	r27, Y+63	; 0x3f
    6696:	29 97       	sbiw	r28, 0x09	; 9
    6698:	a1 96       	adiw	r28, 0x21	; 33
    669a:	4c ac       	ldd	r4, Y+60	; 0x3c
    669c:	5d ac       	ldd	r5, Y+61	; 0x3d
    669e:	6e ac       	ldd	r6, Y+62	; 0x3e
    66a0:	7f ac       	ldd	r7, Y+63	; 0x3f
    66a2:	a1 97       	sbiw	r28, 0x21	; 33
    66a4:	48 16       	cp	r4, r24
    66a6:	59 06       	cpc	r5, r25
    66a8:	6a 06       	cpc	r6, r26
    66aa:	7b 06       	cpc	r7, r27
    66ac:	09 f0       	breq	.+2      	; 0x66b0 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x324>
    66ae:	74 c0       	rjmp	.+232    	; 0x6798 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x40c>
    66b0:	8d 81       	ldd	r24, Y+5	; 0x05
    66b2:	9e 81       	ldd	r25, Y+6	; 0x06
    66b4:	03 97       	sbiw	r24, 0x03	; 3
    66b6:	09 f0       	breq	.+2      	; 0x66ba <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x32e>
    66b8:	57 c0       	rjmp	.+174    	; 0x6768 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x3dc>
    66ba:	8f 81       	ldd	r24, Y+7	; 0x07
    66bc:	98 85       	ldd	r25, Y+8	; 0x08
    66be:	81 30       	cpi	r24, 0x01	; 1
    66c0:	90 42       	sbci	r25, 0x20	; 32
    66c2:	09 f0       	breq	.+2      	; 0x66c6 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x33a>
    66c4:	4e c0       	rjmp	.+156    	; 0x6762 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x3d6>
    66c6:	69 81       	ldd	r22, Y+1	; 0x01
    66c8:	7a 81       	ldd	r23, Y+2	; 0x02
    66ca:	8b 81       	ldd	r24, Y+3	; 0x03
    66cc:	9c 81       	ldd	r25, Y+4	; 0x04
    66ce:	6c 30       	cpi	r22, 0x0C	; 12
    66d0:	71 05       	cpc	r23, r1
    66d2:	81 05       	cpc	r24, r1
    66d4:	91 05       	cpc	r25, r1
    66d6:	08 f4       	brcc	.+2      	; 0x66da <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x34e>
    66d8:	44 c0       	rjmp	.+136    	; 0x6762 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x3d6>
    66da:	8b 01       	movw	r16, r22
    66dc:	9c 01       	movw	r18, r24
    66de:	0c 50       	subi	r16, 0x0C	; 12
    66e0:	11 09       	sbc	r17, r1
    66e2:	21 09       	sbc	r18, r1
    66e4:	31 09       	sbc	r19, r1
    66e6:	f2 e0       	ldi	r31, 0x02	; 2
    66e8:	36 95       	lsr	r19
    66ea:	27 95       	ror	r18
    66ec:	17 95       	ror	r17
    66ee:	07 95       	ror	r16
    66f0:	fa 95       	dec	r31
    66f2:	d1 f7       	brne	.-12     	; 0x66e8 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x35c>
    66f4:	07 70       	andi	r16, 0x07	; 7
    66f6:	00 0f       	add	r16, r16
    66f8:	00 0f       	add	r16, r16
    66fa:	00 0f       	add	r16, r16
    66fc:	2d 96       	adiw	r28, 0x0d	; 13
    66fe:	ae ad       	ldd	r26, Y+62	; 0x3e
    6700:	bf ad       	ldd	r27, Y+63	; 0x3f
    6702:	2d 97       	sbiw	r28, 0x0d	; 13
    6704:	2c 91       	ld	r18, X
    6706:	27 7c       	andi	r18, 0xC7	; 199
    6708:	20 2b       	or	r18, r16
    670a:	2c 93       	st	X, r18
    670c:	e1 14       	cp	r14, r1
    670e:	f1 04       	cpc	r15, r1
    6710:	41 f1       	breq	.+80     	; 0x6762 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x3d6>
    6712:	11 96       	adiw	r26, 0x01	; 1
    6714:	4c 91       	ld	r20, X
    6716:	24 2f       	mov	r18, r20
    6718:	23 70       	andi	r18, 0x03	; 3
    671a:	30 e0       	ldi	r19, 0x00	; 0
    671c:	21 30       	cpi	r18, 0x01	; 1
    671e:	31 05       	cpc	r19, r1
    6720:	71 f0       	breq	.+28     	; 0x673e <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x3b2>
    6722:	23 30       	cpi	r18, 0x03	; 3
    6724:	31 05       	cpc	r19, r1
    6726:	e9 f4       	brne	.+58     	; 0x6762 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x3d6>
    6728:	46 95       	lsr	r20
    672a:	46 95       	lsr	r20
    672c:	50 e0       	ldi	r21, 0x00	; 0
    672e:	b5 01       	movw	r22, r10
    6730:	2f 96       	adiw	r28, 0x0f	; 15
    6732:	8e ad       	ldd	r24, Y+62	; 0x3e
    6734:	9f ad       	ldd	r25, Y+63	; 0x3f
    6736:	2f 97       	sbiw	r28, 0x0f	; 15
    6738:	0e 94 1e 3f 	call	0x7e3c	; 0x7e3c <memcpy>
    673c:	12 c0       	rjmp	.+36     	; 0x6762 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x3d6>
    673e:	d7 01       	movw	r26, r14
    6740:	ed 91       	ld	r30, X+
    6742:	fc 91       	ld	r31, X
    6744:	01 90       	ld	r0, Z+
    6746:	f0 81       	ld	r31, Z
    6748:	e0 2d       	mov	r30, r0
    674a:	25 96       	adiw	r28, 0x05	; 5
    674c:	1c ae       	std	Y+60, r1	; 0x3c
    674e:	1d ae       	std	Y+61, r1	; 0x3d
    6750:	1e ae       	std	Y+62, r1	; 0x3e
    6752:	1f ae       	std	Y+63, r1	; 0x3f
    6754:	25 97       	sbiw	r28, 0x05	; 5
    6756:	9e 01       	movw	r18, r28
    6758:	2f 5b       	subi	r18, 0xBF	; 191
    675a:	3f 4f       	sbci	r19, 0xFF	; 255
    675c:	a5 01       	movw	r20, r10
    675e:	c7 01       	movw	r24, r14
    6760:	09 95       	icall
    6762:	8f 81       	ldd	r24, Y+7	; 0x07
    6764:	98 85       	ldd	r25, Y+8	; 0x08
    6766:	b9 c0       	rjmp	.+370    	; 0x68da <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x54e>
    6768:	81 14       	cp	r8, r1
    676a:	91 04       	cpc	r9, r1
    676c:	a9 f4       	brne	.+42     	; 0x6798 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x40c>
    676e:	49 80       	ldd	r4, Y+1	; 0x01
    6770:	5a 80       	ldd	r5, Y+2	; 0x02
    6772:	6b 80       	ldd	r6, Y+3	; 0x03
    6774:	7c 80       	ldd	r7, Y+4	; 0x04
    6776:	a1 96       	adiw	r28, 0x21	; 33
    6778:	4c ae       	std	Y+60, r4	; 0x3c
    677a:	5d ae       	std	Y+61, r5	; 0x3d
    677c:	6e ae       	std	Y+62, r6	; 0x3e
    677e:	7f ae       	std	Y+63, r7	; 0x3f
    6780:	a1 97       	sbiw	r28, 0x21	; 33
    6782:	93 01       	movw	r18, r6
    6784:	82 01       	movw	r16, r4
    6786:	00 34       	cpi	r16, 0x40	; 64
    6788:	11 05       	cpc	r17, r1
    678a:	21 05       	cpc	r18, r1
    678c:	31 05       	cpc	r19, r1
    678e:	f0 f4       	brcc	.+60     	; 0x67cc <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x440>
    6790:	6e 96       	adiw	r28, 0x1e	; 30
    6792:	6f ad       	ldd	r22, Y+63	; 0x3f
    6794:	6e 97       	sbiw	r28, 0x1e	; 30
    6796:	1b c0       	rjmp	.+54     	; 0x67ce <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x442>
    6798:	29 96       	adiw	r28, 0x09	; 9
    679a:	8c ad       	ldd	r24, Y+60	; 0x3c
    679c:	9d ad       	ldd	r25, Y+61	; 0x3d
    679e:	ae ad       	ldd	r26, Y+62	; 0x3e
    67a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    67a2:	29 97       	sbiw	r28, 0x09	; 9
    67a4:	a1 96       	adiw	r28, 0x21	; 33
    67a6:	4c ad       	ldd	r20, Y+60	; 0x3c
    67a8:	5d ad       	ldd	r21, Y+61	; 0x3d
    67aa:	6e ad       	ldd	r22, Y+62	; 0x3e
    67ac:	7f ad       	ldd	r23, Y+63	; 0x3f
    67ae:	a1 97       	sbiw	r28, 0x21	; 33
    67b0:	48 1b       	sub	r20, r24
    67b2:	59 0b       	sbc	r21, r25
    67b4:	6a 0b       	sbc	r22, r26
    67b6:	7b 0b       	sbc	r23, r27
    67b8:	41 34       	cpi	r20, 0x41	; 65
    67ba:	51 05       	cpc	r21, r1
    67bc:	61 05       	cpc	r22, r1
    67be:	71 05       	cpc	r23, r1
    67c0:	28 f4       	brcc	.+10     	; 0x67cc <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x440>
    67c2:	6e 96       	adiw	r28, 0x1e	; 30
    67c4:	6f ad       	ldd	r22, Y+63	; 0x3f
    67c6:	6e 97       	sbiw	r28, 0x1e	; 30
    67c8:	68 1b       	sub	r22, r24
    67ca:	01 c0       	rjmp	.+2      	; 0x67ce <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x442>
    67cc:	60 e4       	ldi	r22, 0x40	; 64
    67ce:	46 2e       	mov	r4, r22
    67d0:	51 2c       	mov	r5, r1
    67d2:	61 2c       	mov	r6, r1
    67d4:	71 2c       	mov	r7, r1
    67d6:	63 96       	adiw	r28, 0x13	; 19
    67d8:	4c ae       	std	Y+60, r4	; 0x3c
    67da:	5d ae       	std	Y+61, r5	; 0x3d
    67dc:	6e ae       	std	Y+62, r6	; 0x3e
    67de:	7f ae       	std	Y+63, r7	; 0x3f
    67e0:	63 97       	sbiw	r28, 0x13	; 19
    67e2:	e1 14       	cp	r14, r1
    67e4:	f1 04       	cpc	r15, r1
    67e6:	09 f4       	brne	.+2      	; 0x67ea <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x45e>
    67e8:	5e c0       	rjmp	.+188    	; 0x68a6 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x51a>
    67ea:	2d 96       	adiw	r28, 0x0d	; 13
    67ec:	ae ad       	ldd	r26, Y+62	; 0x3e
    67ee:	bf ad       	ldd	r27, Y+63	; 0x3f
    67f0:	2d 97       	sbiw	r28, 0x0d	; 13
    67f2:	11 96       	adiw	r26, 0x01	; 1
    67f4:	8c 91       	ld	r24, X
    67f6:	83 70       	andi	r24, 0x03	; 3
    67f8:	81 30       	cpi	r24, 0x01	; 1
    67fa:	59 f4       	brne	.+22     	; 0x6812 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x486>
    67fc:	d7 01       	movw	r26, r14
    67fe:	ed 91       	ld	r30, X+
    6800:	fc 91       	ld	r31, X
    6802:	70 e0       	ldi	r23, 0x00	; 0
    6804:	01 90       	ld	r0, Z+
    6806:	f0 81       	ld	r31, Z
    6808:	e0 2d       	mov	r30, r0
    680a:	91 01       	movw	r18, r2
    680c:	a5 01       	movw	r20, r10
    680e:	c7 01       	movw	r24, r14
    6810:	09 95       	icall
    6812:	2d 96       	adiw	r28, 0x0d	; 13
    6814:	ee ad       	ldd	r30, Y+62	; 0x3e
    6816:	ff ad       	ldd	r31, Y+63	; 0x3f
    6818:	2d 97       	sbiw	r28, 0x0d	; 13
    681a:	81 81       	ldd	r24, Z+1	; 0x01
    681c:	83 70       	andi	r24, 0x03	; 3
    681e:	83 30       	cpi	r24, 0x03	; 3
    6820:	09 f0       	breq	.+2      	; 0x6824 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x498>
    6822:	41 c0       	rjmp	.+130    	; 0x68a6 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x51a>
    6824:	29 96       	adiw	r28, 0x09	; 9
    6826:	4c ac       	ldd	r4, Y+60	; 0x3c
    6828:	5d ac       	ldd	r5, Y+61	; 0x3d
    682a:	6e ac       	ldd	r6, Y+62	; 0x3e
    682c:	7f ac       	ldd	r7, Y+63	; 0x3f
    682e:	29 97       	sbiw	r28, 0x09	; 9
    6830:	6d 96       	adiw	r28, 0x1d	; 29
    6832:	4c ae       	std	Y+60, r4	; 0x3c
    6834:	5d ae       	std	Y+61, r5	; 0x3d
    6836:	6e ae       	std	Y+62, r6	; 0x3e
    6838:	7f ae       	std	Y+63, r7	; 0x3f
    683a:	6d 97       	sbiw	r28, 0x1d	; 29
    683c:	b5 01       	movw	r22, r10
    683e:	d3 01       	movw	r26, r6
    6840:	c2 01       	movw	r24, r4
    6842:	2c 01       	movw	r4, r24
    6844:	3d 01       	movw	r6, r26
    6846:	6d 96       	adiw	r28, 0x1d	; 29
    6848:	0c ad       	ldd	r16, Y+60	; 0x3c
    684a:	1d ad       	ldd	r17, Y+61	; 0x3d
    684c:	2e ad       	ldd	r18, Y+62	; 0x3e
    684e:	3f ad       	ldd	r19, Y+63	; 0x3f
    6850:	6d 97       	sbiw	r28, 0x1d	; 29
    6852:	40 1a       	sub	r4, r16
    6854:	51 0a       	sbc	r5, r17
    6856:	62 0a       	sbc	r6, r18
    6858:	73 0a       	sbc	r7, r19
    685a:	63 96       	adiw	r28, 0x13	; 19
    685c:	2c ad       	ldd	r18, Y+60	; 0x3c
    685e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6860:	4e ad       	ldd	r20, Y+62	; 0x3e
    6862:	5f ad       	ldd	r21, Y+63	; 0x3f
    6864:	63 97       	sbiw	r28, 0x13	; 19
    6866:	42 16       	cp	r4, r18
    6868:	53 06       	cpc	r5, r19
    686a:	64 06       	cpc	r6, r20
    686c:	75 06       	cpc	r7, r21
    686e:	d8 f4       	brcc	.+54     	; 0x68a6 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x51a>
    6870:	2d 96       	adiw	r28, 0x0d	; 13
    6872:	ee ad       	ldd	r30, Y+62	; 0x3e
    6874:	ff ad       	ldd	r31, Y+63	; 0x3f
    6876:	2d 97       	sbiw	r28, 0x0d	; 13
    6878:	01 81       	ldd	r16, Z+1	; 0x01
    687a:	06 95       	lsr	r16
    687c:	06 95       	lsr	r16
    687e:	10 e0       	ldi	r17, 0x00	; 0
    6880:	20 e0       	ldi	r18, 0x00	; 0
    6882:	30 e0       	ldi	r19, 0x00	; 0
    6884:	80 17       	cp	r24, r16
    6886:	91 07       	cpc	r25, r17
    6888:	a2 07       	cpc	r26, r18
    688a:	b3 07       	cpc	r27, r19
    688c:	60 f4       	brcc	.+24     	; 0x68a6 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x51a>
    688e:	fb 01       	movw	r30, r22
    6890:	21 91       	ld	r18, Z+
    6892:	bf 01       	movw	r22, r30
    6894:	87 01       	movw	r16, r14
    6896:	08 0f       	add	r16, r24
    6898:	19 1f       	adc	r17, r25
    689a:	f8 01       	movw	r30, r16
    689c:	20 83       	st	Z, r18
    689e:	01 96       	adiw	r24, 0x01	; 1
    68a0:	a1 1d       	adc	r26, r1
    68a2:	b1 1d       	adc	r27, r1
    68a4:	ce cf       	rjmp	.-100    	; 0x6842 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x4b6>
    68a6:	29 96       	adiw	r28, 0x09	; 9
    68a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    68aa:	9d ad       	ldd	r25, Y+61	; 0x3d
    68ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    68ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    68b0:	29 97       	sbiw	r28, 0x09	; 9
    68b2:	63 96       	adiw	r28, 0x13	; 19
    68b4:	4c ac       	ldd	r4, Y+60	; 0x3c
    68b6:	5d ac       	ldd	r5, Y+61	; 0x3d
    68b8:	6e ac       	ldd	r6, Y+62	; 0x3e
    68ba:	7f ac       	ldd	r7, Y+63	; 0x3f
    68bc:	63 97       	sbiw	r28, 0x13	; 19
    68be:	84 0d       	add	r24, r4
    68c0:	95 1d       	adc	r25, r5
    68c2:	a6 1d       	adc	r26, r6
    68c4:	b7 1d       	adc	r27, r7
    68c6:	29 96       	adiw	r28, 0x09	; 9
    68c8:	8c af       	std	Y+60, r24	; 0x3c
    68ca:	9d af       	std	Y+61, r25	; 0x3d
    68cc:	ae af       	std	Y+62, r26	; 0x3e
    68ce:	bf af       	std	Y+63, r27	; 0x3f
    68d0:	29 97       	sbiw	r28, 0x09	; 9
    68d2:	0f ef       	ldi	r16, 0xFF	; 255
    68d4:	80 1a       	sub	r8, r16
    68d6:	90 0a       	sbc	r9, r16
    68d8:	b5 ce       	rjmp	.-662    	; 0x6644 <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv+0x2b8>
    68da:	c0 5a       	subi	r28, 0xA0	; 160
    68dc:	df 4f       	sbci	r29, 0xFF	; 255
    68de:	0f b6       	in	r0, 0x3f	; 63
    68e0:	f8 94       	cli
    68e2:	de bf       	out	0x3e, r29	; 62
    68e4:	0f be       	out	0x3f, r0	; 63
    68e6:	cd bf       	out	0x3d, r28	; 61
    68e8:	df 91       	pop	r29
    68ea:	cf 91       	pop	r28
    68ec:	1f 91       	pop	r17
    68ee:	0f 91       	pop	r16
    68f0:	ff 90       	pop	r15
    68f2:	ef 90       	pop	r14
    68f4:	df 90       	pop	r13
    68f6:	cf 90       	pop	r12
    68f8:	bf 90       	pop	r11
    68fa:	af 90       	pop	r10
    68fc:	9f 90       	pop	r9
    68fe:	8f 90       	pop	r8
    6900:	7f 90       	pop	r7
    6902:	6f 90       	pop	r6
    6904:	5f 90       	pop	r5
    6906:	4f 90       	pop	r4
    6908:	3f 90       	pop	r3
    690a:	2f 90       	pop	r2
    690c:	08 95       	ret

0000690e <_ZN3PTP12CloseSessionEv>:
    690e:	ef 92       	push	r14
    6910:	ff 92       	push	r15
    6912:	0f 93       	push	r16
    6914:	1f 93       	push	r17
    6916:	cf 93       	push	r28
    6918:	df 93       	push	r29
    691a:	00 d0       	rcall	.+0      	; 0x691c <_ZN3PTP12CloseSessionEv+0xe>
    691c:	cd b7       	in	r28, 0x3d	; 61
    691e:	de b7       	in	r29, 0x3e	; 62
    6920:	7c 01       	movw	r14, r24
    6922:	1a 82       	std	Y+2, r1	; 0x02
    6924:	19 82       	std	Y+1, r1	; 0x01
    6926:	00 e0       	ldi	r16, 0x00	; 0
    6928:	10 e0       	ldi	r17, 0x00	; 0
    692a:	20 e0       	ldi	r18, 0x00	; 0
    692c:	30 e0       	ldi	r19, 0x00	; 0
    692e:	ae 01       	movw	r20, r28
    6930:	4f 5f       	subi	r20, 0xFF	; 255
    6932:	5f 4f       	sbci	r21, 0xFF	; 255
    6934:	63 e0       	ldi	r22, 0x03	; 3
    6936:	70 e1       	ldi	r23, 0x10	; 16
    6938:	29 dd       	rcall	.-1454   	; 0x638c <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv>
    693a:	81 30       	cpi	r24, 0x01	; 1
    693c:	20 e2       	ldi	r18, 0x20	; 32
    693e:	92 07       	cpc	r25, r18
    6940:	39 f4       	brne	.+14     	; 0x6950 <_ZN3PTP12CloseSessionEv+0x42>
    6942:	f7 01       	movw	r30, r14
    6944:	16 82       	std	Z+6, r1	; 0x06
    6946:	15 82       	std	Z+5, r1	; 0x05
    6948:	2f ef       	ldi	r18, 0xFF	; 255
    694a:	3f ef       	ldi	r19, 0xFF	; 255
    694c:	34 83       	std	Z+4, r19	; 0x04
    694e:	23 83       	std	Z+3, r18	; 0x03
    6950:	0f 90       	pop	r0
    6952:	0f 90       	pop	r0
    6954:	df 91       	pop	r29
    6956:	cf 91       	pop	r28
    6958:	1f 91       	pop	r17
    695a:	0f 91       	pop	r16
    695c:	ff 90       	pop	r15
    695e:	ef 90       	pop	r14
    6960:	08 95       	ret

00006962 <_ZN3PTP11OpenSessionEv>:
    6962:	ef 92       	push	r14
    6964:	ff 92       	push	r15
    6966:	0f 93       	push	r16
    6968:	1f 93       	push	r17
    696a:	cf 93       	push	r28
    696c:	df 93       	push	r29
    696e:	00 d0       	rcall	.+0      	; 0x6970 <_ZN3PTP11OpenSessionEv+0xe>
    6970:	00 d0       	rcall	.+0      	; 0x6972 <_ZN3PTP11OpenSessionEv+0x10>
    6972:	00 d0       	rcall	.+0      	; 0x6974 <_ZN3PTP11OpenSessionEv+0x12>
    6974:	cd b7       	in	r28, 0x3d	; 61
    6976:	de b7       	in	r29, 0x3e	; 62
    6978:	7c 01       	movw	r14, r24
    697a:	8d 81       	ldd	r24, Y+5	; 0x05
    697c:	80 78       	andi	r24, 0x80	; 128
    697e:	81 60       	ori	r24, 0x01	; 1
    6980:	8f 77       	andi	r24, 0x7F	; 127
    6982:	8d 83       	std	Y+5, r24	; 0x05
    6984:	1e 82       	std	Y+6, r1	; 0x06
    6986:	81 e0       	ldi	r24, 0x01	; 1
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	f7 01       	movw	r30, r14
    698c:	96 83       	std	Z+6, r25	; 0x06
    698e:	85 83       	std	Z+5, r24	; 0x05
    6990:	8f ef       	ldi	r24, 0xFF	; 255
    6992:	9f ef       	ldi	r25, 0xFF	; 255
    6994:	94 83       	std	Z+4, r25	; 0x04
    6996:	83 83       	std	Z+3, r24	; 0x03
    6998:	41 e0       	ldi	r20, 0x01	; 1
    699a:	50 e0       	ldi	r21, 0x00	; 0
    699c:	60 e0       	ldi	r22, 0x00	; 0
    699e:	70 e0       	ldi	r23, 0x00	; 0
    69a0:	49 83       	std	Y+1, r20	; 0x01
    69a2:	5a 83       	std	Y+2, r21	; 0x02
    69a4:	6b 83       	std	Y+3, r22	; 0x03
    69a6:	7c 83       	std	Y+4, r23	; 0x04
    69a8:	00 e0       	ldi	r16, 0x00	; 0
    69aa:	10 e0       	ldi	r17, 0x00	; 0
    69ac:	9e 01       	movw	r18, r28
    69ae:	2f 5f       	subi	r18, 0xFF	; 255
    69b0:	3f 4f       	sbci	r19, 0xFF	; 255
    69b2:	ae 01       	movw	r20, r28
    69b4:	4b 5f       	subi	r20, 0xFB	; 251
    69b6:	5f 4f       	sbci	r21, 0xFF	; 255
    69b8:	62 e0       	ldi	r22, 0x02	; 2
    69ba:	70 e1       	ldi	r23, 0x10	; 16
    69bc:	c7 01       	movw	r24, r14
    69be:	e6 dc       	rcall	.-1588   	; 0x638c <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv>
    69c0:	8c 01       	movw	r16, r24
    69c2:	8e 31       	cpi	r24, 0x1E	; 30
    69c4:	f0 e2       	ldi	r31, 0x20	; 32
    69c6:	9f 07       	cpc	r25, r31
    69c8:	11 f4       	brne	.+4      	; 0x69ce <_ZN3PTP11OpenSessionEv+0x6c>
    69ca:	c7 01       	movw	r24, r14
    69cc:	a0 df       	rcall	.-192    	; 0x690e <_ZN3PTP12CloseSessionEv>
    69ce:	c8 01       	movw	r24, r16
    69d0:	26 96       	adiw	r28, 0x06	; 6
    69d2:	0f b6       	in	r0, 0x3f	; 63
    69d4:	f8 94       	cli
    69d6:	de bf       	out	0x3e, r29	; 62
    69d8:	0f be       	out	0x3f, r0	; 63
    69da:	cd bf       	out	0x3d, r28	; 61
    69dc:	df 91       	pop	r29
    69de:	cf 91       	pop	r28
    69e0:	1f 91       	pop	r17
    69e2:	0f 91       	pop	r16
    69e4:	ff 90       	pop	r15
    69e6:	ef 90       	pop	r14
    69e8:	08 95       	ret

000069ea <_ZN16PTPStateHandlers23OnSessionNotOpenedStateEP3PTP>:
    69ea:	cf 93       	push	r28
    69ec:	df 93       	push	r29
    69ee:	eb 01       	movw	r28, r22
    69f0:	cb 01       	movw	r24, r22
    69f2:	b7 df       	rcall	.-146    	; 0x6962 <_ZN3PTP11OpenSessionEv>
    69f4:	81 30       	cpi	r24, 0x01	; 1
    69f6:	90 42       	sbci	r25, 0x20	; 32
    69f8:	11 f4       	brne	.+4      	; 0x69fe <_ZN16PTPStateHandlers23OnSessionNotOpenedStateEP3PTP+0x14>
    69fa:	83 e0       	ldi	r24, 0x03	; 3
    69fc:	8a 83       	std	Y+2, r24	; 0x02
    69fe:	df 91       	pop	r29
    6a00:	cf 91       	pop	r28
    6a02:	08 95       	ret

00006a04 <_ZN3PTP9OperationEjhPm>:
    6a04:	0f 93       	push	r16
    6a06:	1f 93       	push	r17
    6a08:	cf 93       	push	r28
    6a0a:	df 93       	push	r29
    6a0c:	00 d0       	rcall	.+0      	; 0x6a0e <_ZN3PTP9OperationEjhPm+0xa>
    6a0e:	cd b7       	in	r28, 0x3d	; 61
    6a10:	de b7       	in	r29, 0x3e	; 62
    6a12:	1a 82       	std	Y+2, r1	; 0x02
    6a14:	19 82       	std	Y+1, r1	; 0x01
    6a16:	47 70       	andi	r20, 0x07	; 7
    6a18:	49 83       	std	Y+1, r20	; 0x01
    6a1a:	00 e0       	ldi	r16, 0x00	; 0
    6a1c:	10 e0       	ldi	r17, 0x00	; 0
    6a1e:	ae 01       	movw	r20, r28
    6a20:	4f 5f       	subi	r20, 0xFF	; 255
    6a22:	5f 4f       	sbci	r21, 0xFF	; 255
    6a24:	b3 dc       	rcall	.-1690   	; 0x638c <_ZN3PTP11TransactionEjPNS_9OperFlagsEPmPv>
    6a26:	0f 90       	pop	r0
    6a28:	0f 90       	pop	r0
    6a2a:	df 91       	pop	r29
    6a2c:	cf 91       	pop	r28
    6a2e:	1f 91       	pop	r17
    6a30:	0f 91       	pop	r16
    6a32:	08 95       	ret

00006a34 <_ZN20MultiByteValueParser5ParseEPPhPj>:
    6a34:	cf 93       	push	r28
    6a36:	df 93       	push	r29
    6a38:	fc 01       	movw	r30, r24
    6a3a:	ea 01       	movw	r28, r20
    6a3c:	80 81       	ld	r24, Z
    6a3e:	91 81       	ldd	r25, Z+1	; 0x01
    6a40:	89 2b       	or	r24, r25
    6a42:	49 f5       	brne	.+82     	; 0x6a96 <_ZN20MultiByteValueParser5ParseEPPhPj+0x62>
    6a44:	60 e8       	ldi	r22, 0x80	; 128
    6a46:	70 e0       	ldi	r23, 0x00	; 0
    6a48:	80 e3       	ldi	r24, 0x30	; 48
    6a4a:	93 e0       	ldi	r25, 0x03	; 3
    6a4c:	0e 94 98 3e 	call	0x7d30	; 0x7d30 <_Z8E_NotifyPKci>
    6a50:	26 c0       	rjmp	.+76     	; 0x6a9e <_ZN20MultiByteValueParser5ParseEPPhPj+0x6a>
    6a52:	88 81       	ld	r24, Y
    6a54:	99 81       	ldd	r25, Y+1	; 0x01
    6a56:	89 2b       	or	r24, r25
    6a58:	11 f1       	breq	.+68     	; 0x6a9e <_ZN20MultiByteValueParser5ParseEPPhPj+0x6a>
    6a5a:	db 01       	movw	r26, r22
    6a5c:	8d 91       	ld	r24, X+
    6a5e:	9c 91       	ld	r25, X
    6a60:	dc 01       	movw	r26, r24
    6a62:	5c 91       	ld	r21, X
    6a64:	23 81       	ldd	r18, Z+3	; 0x03
    6a66:	30 e0       	ldi	r19, 0x00	; 0
    6a68:	24 1b       	sub	r18, r20
    6a6a:	31 09       	sbc	r19, r1
    6a6c:	80 81       	ld	r24, Z
    6a6e:	91 81       	ldd	r25, Z+1	; 0x01
    6a70:	82 0f       	add	r24, r18
    6a72:	93 1f       	adc	r25, r19
    6a74:	dc 01       	movw	r26, r24
    6a76:	5c 93       	st	X, r21
    6a78:	82 81       	ldd	r24, Z+2	; 0x02
    6a7a:	81 50       	subi	r24, 0x01	; 1
    6a7c:	82 83       	std	Z+2, r24	; 0x02
    6a7e:	88 81       	ld	r24, Y
    6a80:	99 81       	ldd	r25, Y+1	; 0x01
    6a82:	01 97       	sbiw	r24, 0x01	; 1
    6a84:	99 83       	std	Y+1, r25	; 0x01
    6a86:	88 83       	st	Y, r24
    6a88:	db 01       	movw	r26, r22
    6a8a:	8d 91       	ld	r24, X+
    6a8c:	9c 91       	ld	r25, X
    6a8e:	11 97       	sbiw	r26, 0x01	; 1
    6a90:	01 96       	adiw	r24, 0x01	; 1
    6a92:	8d 93       	st	X+, r24
    6a94:	9c 93       	st	X, r25
    6a96:	42 81       	ldd	r20, Z+2	; 0x02
    6a98:	41 11       	cpse	r20, r1
    6a9a:	db cf       	rjmp	.-74     	; 0x6a52 <_ZN20MultiByteValueParser5ParseEPPhPj+0x1e>
    6a9c:	02 c0       	rjmp	.+4      	; 0x6aa2 <_ZN20MultiByteValueParser5ParseEPPhPj+0x6e>
    6a9e:	80 e0       	ldi	r24, 0x00	; 0
    6aa0:	03 c0       	rjmp	.+6      	; 0x6aa8 <_ZN20MultiByteValueParser5ParseEPPhPj+0x74>
    6aa2:	83 81       	ldd	r24, Z+3	; 0x03
    6aa4:	82 83       	std	Z+2, r24	; 0x02
    6aa6:	81 e0       	ldi	r24, 0x01	; 1
    6aa8:	df 91       	pop	r29
    6aaa:	cf 91       	pop	r28
    6aac:	08 95       	ret

00006aae <_ZN3USBC1Ev>:
    6aae:	fc 01       	movw	r30, r24
    6ab0:	84 e6       	ldi	r24, 0x64	; 100
    6ab2:	92 e0       	ldi	r25, 0x02	; 2
    6ab4:	91 83       	std	Z+1, r25	; 0x01
    6ab6:	80 83       	st	Z, r24
    6ab8:	15 82       	std	Z+5, r1	; 0x05
    6aba:	10 86       	std	Z+8, r1	; 0x08
    6abc:	81 e0       	ldi	r24, 0x01	; 1
    6abe:	81 87       	std	Z+9, r24	; 0x09
    6ac0:	12 86       	std	Z+10, r1	; 0x0a
    6ac2:	9f 01       	movw	r18, r30
    6ac4:	2e 5f       	subi	r18, 0xFE	; 254
    6ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ac8:	37 83       	std	Z+7, r19	; 0x07
    6aca:	26 83       	std	Z+6, r18	; 0x06
    6acc:	12 82       	std	Z+2, r1	; 0x02
    6ace:	88 e0       	ldi	r24, 0x08	; 8
    6ad0:	83 83       	std	Z+3, r24	; 0x03
    6ad2:	8c e3       	ldi	r24, 0x3C	; 60
    6ad4:	84 83       	std	Z+4, r24	; 0x04
    6ad6:	80 e0       	ldi	r24, 0x00	; 0
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	41 e0       	ldi	r20, 0x01	; 1
    6adc:	df 01       	movw	r26, r30
    6ade:	a8 0f       	add	r26, r24
    6ae0:	b9 1f       	adc	r27, r25
    6ae2:	1d 96       	adiw	r26, 0x0d	; 13
    6ae4:	1c 92       	st	X, r1
    6ae6:	1d 97       	sbiw	r26, 0x0d	; 13
    6ae8:	1e 96       	adiw	r26, 0x0e	; 14
    6aea:	4c 93       	st	X, r20
    6aec:	1e 97       	sbiw	r26, 0x0e	; 14
    6aee:	1f 96       	adiw	r26, 0x0f	; 15
    6af0:	1c 92       	st	X, r1
    6af2:	1f 97       	sbiw	r26, 0x0f	; 15
    6af4:	1c 96       	adiw	r26, 0x0c	; 12
    6af6:	3c 93       	st	X, r19
    6af8:	2e 93       	st	-X, r18
    6afa:	1b 97       	sbiw	r26, 0x0b	; 11
    6afc:	05 96       	adiw	r24, 0x05	; 5
    6afe:	8b 34       	cpi	r24, 0x4B	; 75
    6b00:	91 05       	cpc	r25, r1
    6b02:	61 f7       	brne	.-40     	; 0x6adc <_ZN3USBC1Ev+0x2e>
    6b04:	ea 58       	subi	r30, 0x8A	; 138
    6b06:	ff 4f       	sbci	r31, 0xFF	; 255
    6b08:	10 82       	st	Z, r1
    6b0a:	81 e1       	ldi	r24, 0x11	; 17
    6b0c:	80 93 2b 05 	sts	0x052B, r24
    6b10:	08 95       	ret

00006b12 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
    6b12:	20 e0       	ldi	r18, 0x00	; 0
    6b14:	30 e0       	ldi	r19, 0x00	; 0
    6b16:	41 e0       	ldi	r20, 0x01	; 1
    6b18:	fc 01       	movw	r30, r24
    6b1a:	e2 0f       	add	r30, r18
    6b1c:	f3 1f       	adc	r31, r19
    6b1e:	55 85       	ldd	r21, Z+13	; 0x0d
    6b20:	56 17       	cp	r21, r22
    6b22:	39 f0       	breq	.+14     	; 0x6b32 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x20>
    6b24:	4f 5f       	subi	r20, 0xFF	; 255
    6b26:	2b 5f       	subi	r18, 0xFB	; 251
    6b28:	3f 4f       	sbci	r19, 0xFF	; 255
    6b2a:	40 31       	cpi	r20, 0x10	; 16
    6b2c:	a9 f7       	brne	.-22     	; 0x6b18 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x6>
    6b2e:	80 e0       	ldi	r24, 0x00	; 0
    6b30:	08 95       	ret
    6b32:	84 2f       	mov	r24, r20
    6b34:	08 95       	ret

00006b36 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
    6b36:	ef 92       	push	r14
    6b38:	ff 92       	push	r15
    6b3a:	1f 93       	push	r17
    6b3c:	cf 93       	push	r28
    6b3e:	df 93       	push	r29
    6b40:	00 d0       	rcall	.+0      	; 0x6b42 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xc>
    6b42:	cd b7       	in	r28, 0x3d	; 61
    6b44:	de b7       	in	r29, 0x3e	; 62
    6b46:	7c 01       	movw	r14, r24
    6b48:	16 2f       	mov	r17, r22
    6b4a:	67 fd       	sbrc	r22, 7
    6b4c:	5e c0       	rjmp	.+188    	; 0x6c0a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xd4>
    6b4e:	28 30       	cpi	r18, 0x08	; 8
    6b50:	08 f0       	brcs	.+2      	; 0x6b54 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1e>
    6b52:	5b c0       	rjmp	.+182    	; 0x6c0a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xd4>
    6b54:	44 23       	and	r20, r20
    6b56:	31 f0       	breq	.+12     	; 0x6b64 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x2e>
    6b58:	dc 01       	movw	r26, r24
    6b5a:	15 96       	adiw	r26, 0x05	; 5
    6b5c:	8c 91       	ld	r24, X
    6b5e:	87 30       	cpi	r24, 0x07	; 7
    6b60:	09 f4       	brne	.+2      	; 0x6b64 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x2e>
    6b62:	53 c0       	rjmp	.+166    	; 0x6c0a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xd4>
    6b64:	60 e0       	ldi	r22, 0x00	; 0
    6b66:	c7 01       	movw	r24, r14
    6b68:	2a 83       	std	Y+2, r18	; 0x02
    6b6a:	49 83       	std	Y+1, r20	; 0x01
    6b6c:	d2 df       	rcall	.-92     	; 0x6b12 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    6b6e:	2a 81       	ldd	r18, Y+2	; 0x02
    6b70:	49 81       	ldd	r20, Y+1	; 0x01
    6b72:	88 23       	and	r24, r24
    6b74:	09 f4       	brne	.+2      	; 0x6b78 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x42>
    6b76:	49 c0       	rjmp	.+146    	; 0x6c0a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xd4>
    6b78:	e8 2f       	mov	r30, r24
    6b7a:	f0 e0       	ldi	r31, 0x00	; 0
    6b7c:	11 11       	cpse	r17, r1
    6b7e:	23 c0       	rjmp	.+70     	; 0x6bc6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x90>
    6b80:	85 e0       	ldi	r24, 0x05	; 5
    6b82:	8e 9f       	mul	r24, r30
    6b84:	d0 01       	movw	r26, r0
    6b86:	8f 9f       	mul	r24, r31
    6b88:	b0 0d       	add	r27, r0
    6b8a:	11 24       	eor	r1, r1
    6b8c:	ae 0d       	add	r26, r14
    6b8e:	bf 1d       	adc	r27, r15
    6b90:	44 23       	and	r20, r20
    6b92:	59 f0       	breq	.+22     	; 0x6baa <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x74>
    6b94:	81 e4       	ldi	r24, 0x41	; 65
    6b96:	18 96       	adiw	r26, 0x08	; 8
    6b98:	8c 93       	st	X, r24
    6b9a:	d7 01       	movw	r26, r14
    6b9c:	15 96       	adiw	r26, 0x05	; 5
    6b9e:	8c 91       	ld	r24, X
    6ba0:	15 97       	sbiw	r26, 0x05	; 5
    6ba2:	8f 5f       	subi	r24, 0xFF	; 255
    6ba4:	15 96       	adiw	r26, 0x05	; 5
    6ba6:	8c 93       	st	X, r24
    6ba8:	03 c0       	rjmp	.+6      	; 0x6bb0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x7a>
    6baa:	81 e0       	ldi	r24, 0x01	; 1
    6bac:	18 96       	adiw	r26, 0x08	; 8
    6bae:	8c 93       	st	X, r24
    6bb0:	85 e0       	ldi	r24, 0x05	; 5
    6bb2:	8e 9f       	mul	r24, r30
    6bb4:	d0 01       	movw	r26, r0
    6bb6:	8f 9f       	mul	r24, r31
    6bb8:	b0 0d       	add	r27, r0
    6bba:	11 24       	eor	r1, r1
    6bbc:	ae 0d       	add	r26, r14
    6bbe:	bf 1d       	adc	r27, r15
    6bc0:	18 96       	adiw	r26, 0x08	; 8
    6bc2:	8c 91       	ld	r24, X
    6bc4:	23 c0       	rjmp	.+70     	; 0x6c0c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xd6>
    6bc6:	61 2f       	mov	r22, r17
    6bc8:	67 70       	andi	r22, 0x07	; 7
    6bca:	66 0f       	add	r22, r22
    6bcc:	66 0f       	add	r22, r22
    6bce:	66 0f       	add	r22, r22
    6bd0:	44 23       	and	r20, r20
    6bd2:	61 f0       	breq	.+24     	; 0x6bec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xb6>
    6bd4:	60 64       	ori	r22, 0x40	; 64
    6bd6:	d7 01       	movw	r26, r14
    6bd8:	15 96       	adiw	r26, 0x05	; 5
    6bda:	8c 91       	ld	r24, X
    6bdc:	15 97       	sbiw	r26, 0x05	; 5
    6bde:	8f 5f       	subi	r24, 0xFF	; 255
    6be0:	15 96       	adiw	r26, 0x05	; 5
    6be2:	8c 93       	st	X, r24
    6be4:	87 70       	andi	r24, 0x07	; 7
    6be6:	68 7f       	andi	r22, 0xF8	; 248
    6be8:	68 2b       	or	r22, r24
    6bea:	03 c0       	rjmp	.+6      	; 0x6bf2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xbc>
    6bec:	27 70       	andi	r18, 0x07	; 7
    6bee:	68 7b       	andi	r22, 0xB8	; 184
    6bf0:	62 2b       	or	r22, r18
    6bf2:	85 e0       	ldi	r24, 0x05	; 5
    6bf4:	8e 9f       	mul	r24, r30
    6bf6:	d0 01       	movw	r26, r0
    6bf8:	8f 9f       	mul	r24, r31
    6bfa:	b0 0d       	add	r27, r0
    6bfc:	11 24       	eor	r1, r1
    6bfe:	ae 0d       	add	r26, r14
    6c00:	bf 1d       	adc	r27, r15
    6c02:	18 96       	adiw	r26, 0x08	; 8
    6c04:	6c 93       	st	X, r22
    6c06:	86 2f       	mov	r24, r22
    6c08:	01 c0       	rjmp	.+2      	; 0x6c0c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xd6>
    6c0a:	80 e0       	ldi	r24, 0x00	; 0
    6c0c:	0f 90       	pop	r0
    6c0e:	0f 90       	pop	r0
    6c10:	df 91       	pop	r29
    6c12:	cf 91       	pop	r28
    6c14:	1f 91       	pop	r17
    6c16:	ff 90       	pop	r15
    6c18:	ef 90       	pop	r14
    6c1a:	08 95       	ret

00006c1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:
    6c1c:	cf 93       	push	r28
    6c1e:	df 93       	push	r29
    6c20:	ec 01       	movw	r28, r24
    6c22:	66 23       	and	r22, r22
    6c24:	51 f0       	breq	.+20     	; 0x6c3a <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x1e>
    6c26:	75 df       	rcall	.-278    	; 0x6b12 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    6c28:	88 23       	and	r24, r24
    6c2a:	49 f0       	breq	.+18     	; 0x6c3e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x22>
    6c2c:	9e 01       	movw	r18, r28
    6c2e:	45 e0       	ldi	r20, 0x05	; 5
    6c30:	84 9f       	mul	r24, r20
    6c32:	20 0d       	add	r18, r0
    6c34:	31 1d       	adc	r19, r1
    6c36:	11 24       	eor	r1, r1
    6c38:	c9 01       	movw	r24, r18
    6c3a:	06 96       	adiw	r24, 0x06	; 6
    6c3c:	02 c0       	rjmp	.+4      	; 0x6c42 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x26>
    6c3e:	80 e0       	ldi	r24, 0x00	; 0
    6c40:	90 e0       	ldi	r25, 0x00	; 0
    6c42:	df 91       	pop	r29
    6c44:	cf 91       	pop	r28
    6c46:	08 95       	ret

00006c48 <_ZN3USB14getEpInfoEntryEhh>:
    6c48:	cf 93       	push	r28
    6c4a:	df 93       	push	r29
    6c4c:	1f 92       	push	r1
    6c4e:	cd b7       	in	r28, 0x3d	; 61
    6c50:	de b7       	in	r29, 0x3e	; 62
    6c52:	49 83       	std	Y+1, r20	; 0x01
    6c54:	e3 df       	rcall	.-58     	; 0x6c1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    6c56:	49 81       	ldd	r20, Y+1	; 0x01
    6c58:	00 97       	sbiw	r24, 0x00	; 0
    6c5a:	89 f0       	breq	.+34     	; 0x6c7e <_ZN3USB14getEpInfoEntryEhh+0x36>
    6c5c:	dc 01       	movw	r26, r24
    6c5e:	ed 91       	ld	r30, X+
    6c60:	fc 91       	ld	r31, X
    6c62:	11 97       	sbiw	r26, 0x01	; 1
    6c64:	30 97       	sbiw	r30, 0x00	; 0
    6c66:	59 f0       	breq	.+22     	; 0x6c7e <_ZN3USB14getEpInfoEntryEhh+0x36>
    6c68:	13 96       	adiw	r26, 0x03	; 3
    6c6a:	9c 91       	ld	r25, X
    6c6c:	80 e0       	ldi	r24, 0x00	; 0
    6c6e:	89 17       	cp	r24, r25
    6c70:	31 f0       	breq	.+12     	; 0x6c7e <_ZN3USB14getEpInfoEntryEhh+0x36>
    6c72:	20 81       	ld	r18, Z
    6c74:	24 17       	cp	r18, r20
    6c76:	31 f0       	breq	.+12     	; 0x6c84 <_ZN3USB14getEpInfoEntryEhh+0x3c>
    6c78:	33 96       	adiw	r30, 0x03	; 3
    6c7a:	8f 5f       	subi	r24, 0xFF	; 255
    6c7c:	f8 cf       	rjmp	.-16     	; 0x6c6e <_ZN3USB14getEpInfoEntryEhh+0x26>
    6c7e:	80 e0       	ldi	r24, 0x00	; 0
    6c80:	90 e0       	ldi	r25, 0x00	; 0
    6c82:	01 c0       	rjmp	.+2      	; 0x6c86 <_ZN3USB14getEpInfoEntryEhh+0x3e>
    6c84:	cf 01       	movw	r24, r30
    6c86:	0f 90       	pop	r0
    6c88:	df 91       	pop	r29
    6c8a:	cf 91       	pop	r28
    6c8c:	08 95       	ret

00006c8e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:
    6c8e:	ef 92       	push	r14
    6c90:	ff 92       	push	r15
    6c92:	1f 93       	push	r17
    6c94:	cf 93       	push	r28
    6c96:	df 93       	push	r29
    6c98:	1f 92       	push	r1
    6c9a:	cd b7       	in	r28, 0x3d	; 61
    6c9c:	de b7       	in	r29, 0x3e	; 62
    6c9e:	16 2f       	mov	r17, r22
    6ca0:	79 01       	movw	r14, r18
    6ca2:	21 15       	cp	r18, r1
    6ca4:	31 05       	cpc	r19, r1
    6ca6:	61 f0       	breq	.+24     	; 0x6cc0 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x32>
    6ca8:	49 83       	std	Y+1, r20	; 0x01
    6caa:	b8 df       	rcall	.-144    	; 0x6c1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    6cac:	fc 01       	movw	r30, r24
    6cae:	49 81       	ldd	r20, Y+1	; 0x01
    6cb0:	00 97       	sbiw	r24, 0x00	; 0
    6cb2:	41 f0       	breq	.+16     	; 0x6cc4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x36>
    6cb4:	12 83       	std	Z+2, r17	; 0x02
    6cb6:	f1 82       	std	Z+1, r15	; 0x01
    6cb8:	e0 82       	st	Z, r14
    6cba:	43 83       	std	Z+3, r20	; 0x03
    6cbc:	80 e0       	ldi	r24, 0x00	; 0
    6cbe:	03 c0       	rjmp	.+6      	; 0x6cc6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
    6cc0:	88 ed       	ldi	r24, 0xD8	; 216
    6cc2:	01 c0       	rjmp	.+2      	; 0x6cc6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
    6cc4:	86 ed       	ldi	r24, 0xD6	; 214
    6cc6:	0f 90       	pop	r0
    6cc8:	df 91       	pop	r29
    6cca:	cf 91       	pop	r28
    6ccc:	1f 91       	pop	r17
    6cce:	ff 90       	pop	r15
    6cd0:	ef 90       	pop	r14
    6cd2:	08 95       	ret

00006cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>:
    6cd4:	cf 93       	push	r28
    6cd6:	df 93       	push	r29
    6cd8:	1f 92       	push	r1
    6cda:	cd b7       	in	r28, 0x3d	; 61
    6cdc:	de b7       	in	r29, 0x3e	; 62
    6cde:	89 83       	std	Y+1, r24	; 0x01
    6ce0:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN4TPinI5PortbLh2EE5ClearEv>
    6ce4:	89 81       	ldd	r24, Y+1	; 0x01
    6ce6:	8e bd       	out	0x2e, r24	; 46
    6ce8:	0d b4       	in	r0, 0x2d	; 45
    6cea:	07 fe       	sbrs	r0, 7
    6cec:	fd cf       	rjmp	.-6      	; 0x6ce8 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2+0x14>
    6cee:	1e bc       	out	0x2e, r1	; 46
    6cf0:	0d b4       	in	r0, 0x2d	; 45
    6cf2:	07 fe       	sbrs	r0, 7
    6cf4:	fd cf       	rjmp	.-6      	; 0x6cf0 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2+0x1c>
    6cf6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN4TPinI5PortbLh2EE3SetEv>
    6cfa:	8e b5       	in	r24, 0x2e	; 46
    6cfc:	0f 90       	pop	r0
    6cfe:	df 91       	pop	r29
    6d00:	cf 91       	pop	r28
    6d02:	08 95       	ret

00006d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>:
    6d04:	cf 93       	push	r28
    6d06:	df 93       	push	r29
    6d08:	00 d0       	rcall	.+0      	; 0x6d0a <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3+0x6>
    6d0a:	cd b7       	in	r28, 0x3d	; 61
    6d0c:	de b7       	in	r29, 0x3e	; 62
    6d0e:	6a 83       	std	Y+2, r22	; 0x02
    6d10:	89 83       	std	Y+1, r24	; 0x01
    6d12:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN4TPinI5PortbLh2EE5ClearEv>
    6d16:	89 81       	ldd	r24, Y+1	; 0x01
    6d18:	82 60       	ori	r24, 0x02	; 2
    6d1a:	8e bd       	out	0x2e, r24	; 46
    6d1c:	6a 81       	ldd	r22, Y+2	; 0x02
    6d1e:	0d b4       	in	r0, 0x2d	; 45
    6d20:	07 fe       	sbrs	r0, 7
    6d22:	fd cf       	rjmp	.-6      	; 0x6d1e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3+0x1a>
    6d24:	6e bd       	out	0x2e, r22	; 46
    6d26:	0d b4       	in	r0, 0x2d	; 45
    6d28:	07 fe       	sbrs	r0, 7
    6d2a:	fd cf       	rjmp	.-6      	; 0x6d26 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3+0x22>
    6d2c:	0f 90       	pop	r0
    6d2e:	0f 90       	pop	r0
    6d30:	df 91       	pop	r29
    6d32:	cf 91       	pop	r28
    6d34:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <_ZN4TPinI5PortbLh2EE3SetEv>

00006d38 <_ZN3USB10SetAddressEhhPP6EpInfoRj>:
    6d38:	8f 92       	push	r8
    6d3a:	9f 92       	push	r9
    6d3c:	bf 92       	push	r11
    6d3e:	cf 92       	push	r12
    6d40:	df 92       	push	r13
    6d42:	ef 92       	push	r14
    6d44:	ff 92       	push	r15
    6d46:	0f 93       	push	r16
    6d48:	1f 93       	push	r17
    6d4a:	cf 93       	push	r28
    6d4c:	df 93       	push	r29
    6d4e:	1f 92       	push	r1
    6d50:	cd b7       	in	r28, 0x3d	; 61
    6d52:	de b7       	in	r29, 0x3e	; 62
    6d54:	4c 01       	movw	r8, r24
    6d56:	b6 2e       	mov	r11, r22
    6d58:	69 01       	movw	r12, r18
    6d5a:	49 83       	std	Y+1, r20	; 0x01
    6d5c:	5f df       	rcall	.-322    	; 0x6c1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    6d5e:	7c 01       	movw	r14, r24
    6d60:	49 81       	ldd	r20, Y+1	; 0x01
    6d62:	00 97       	sbiw	r24, 0x00	; 0
    6d64:	09 f4       	brne	.+2      	; 0x6d68 <_ZN3USB10SetAddressEhhPP6EpInfoRj+0x30>
    6d66:	3f c0       	rjmp	.+126    	; 0x6de6 <_ZN3USB10SetAddressEhhPP6EpInfoRj+0xae>
    6d68:	fc 01       	movw	r30, r24
    6d6a:	80 81       	ld	r24, Z
    6d6c:	91 81       	ldd	r25, Z+1	; 0x01
    6d6e:	89 2b       	or	r24, r25
    6d70:	09 f4       	brne	.+2      	; 0x6d74 <_ZN3USB10SetAddressEhhPP6EpInfoRj+0x3c>
    6d72:	3b c0       	rjmp	.+118    	; 0x6dea <_ZN3USB10SetAddressEhhPP6EpInfoRj+0xb2>
    6d74:	6b 2d       	mov	r22, r11
    6d76:	c4 01       	movw	r24, r8
    6d78:	67 df       	rcall	.-306    	; 0x6c48 <_ZN3USB14getEpInfoEntryEhh>
    6d7a:	f6 01       	movw	r30, r12
    6d7c:	91 83       	std	Z+1, r25	; 0x01
    6d7e:	80 83       	st	Z, r24
    6d80:	00 97       	sbiw	r24, 0x00	; 0
    6d82:	a9 f1       	breq	.+106    	; 0x6dee <_ZN3USB10SetAddressEhhPP6EpInfoRj+0xb6>
    6d84:	fc 01       	movw	r30, r24
    6d86:	22 81       	ldd	r18, Z+2	; 0x02
    6d88:	26 95       	lsr	r18
    6d8a:	26 95       	lsr	r18
    6d8c:	82 2f       	mov	r24, r18
    6d8e:	90 e0       	ldi	r25, 0x00	; 0
    6d90:	40 97       	sbiw	r24, 0x10	; 16
    6d92:	64 f4       	brge	.+24     	; 0x6dac <_ZN3USB10SetAddressEhhPP6EpInfoRj+0x74>
    6d94:	41 e0       	ldi	r20, 0x01	; 1
    6d96:	50 e0       	ldi	r21, 0x00	; 0
    6d98:	60 e0       	ldi	r22, 0x00	; 0
    6d9a:	70 e0       	ldi	r23, 0x00	; 0
    6d9c:	04 c0       	rjmp	.+8      	; 0x6da6 <_ZN3USB10SetAddressEhhPP6EpInfoRj+0x6e>
    6d9e:	44 0f       	add	r20, r20
    6da0:	55 1f       	adc	r21, r21
    6da2:	66 1f       	adc	r22, r22
    6da4:	77 1f       	adc	r23, r23
    6da6:	2a 95       	dec	r18
    6da8:	d2 f7       	brpl	.-12     	; 0x6d9e <_ZN3USB10SetAddressEhhPP6EpInfoRj+0x66>
    6daa:	02 c0       	rjmp	.+4      	; 0x6db0 <_ZN3USB10SetAddressEhhPP6EpInfoRj+0x78>
    6dac:	40 e0       	ldi	r20, 0x00	; 0
    6dae:	50 e8       	ldi	r21, 0x80	; 128
    6db0:	41 50       	subi	r20, 0x01	; 1
    6db2:	51 09       	sbc	r21, r1
    6db4:	f8 01       	movw	r30, r16
    6db6:	51 83       	std	Z+1, r21	; 0x01
    6db8:	40 83       	st	Z, r20
    6dba:	6b 2d       	mov	r22, r11
    6dbc:	80 ee       	ldi	r24, 0xE0	; 224
    6dbe:	a2 df       	rcall	.-188    	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    6dc0:	88 ed       	ldi	r24, 0xD8	; 216
    6dc2:	88 df       	rcall	.-240    	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    6dc4:	f7 01       	movw	r30, r14
    6dc6:	94 81       	ldd	r25, Z+4	; 0x04
    6dc8:	99 23       	and	r25, r25
    6dca:	39 f0       	breq	.+14     	; 0x6dda <_ZN3USB10SetAddressEhhPP6EpInfoRj+0xa2>
    6dcc:	f4 01       	movw	r30, r8
    6dce:	ea 58       	subi	r30, 0x8A	; 138
    6dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    6dd2:	60 81       	ld	r22, Z
    6dd4:	62 60       	ori	r22, 0x02	; 2
    6dd6:	68 2b       	or	r22, r24
    6dd8:	02 c0       	rjmp	.+4      	; 0x6dde <_ZN3USB10SetAddressEhhPP6EpInfoRj+0xa6>
    6dda:	68 2f       	mov	r22, r24
    6ddc:	69 7f       	andi	r22, 0xF9	; 249
    6dde:	88 ed       	ldi	r24, 0xD8	; 216
    6de0:	91 df       	rcall	.-222    	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    6de2:	80 e0       	ldi	r24, 0x00	; 0
    6de4:	05 c0       	rjmp	.+10     	; 0x6df0 <_ZN3USB10SetAddressEhhPP6EpInfoRj+0xb8>
    6de6:	86 ed       	ldi	r24, 0xD6	; 214
    6de8:	03 c0       	rjmp	.+6      	; 0x6df0 <_ZN3USB10SetAddressEhhPP6EpInfoRj+0xb8>
    6dea:	87 ed       	ldi	r24, 0xD7	; 215
    6dec:	01 c0       	rjmp	.+2      	; 0x6df0 <_ZN3USB10SetAddressEhhPP6EpInfoRj+0xb8>
    6dee:	8b ed       	ldi	r24, 0xDB	; 219
    6df0:	0f 90       	pop	r0
    6df2:	df 91       	pop	r29
    6df4:	cf 91       	pop	r28
    6df6:	1f 91       	pop	r17
    6df8:	0f 91       	pop	r16
    6dfa:	ff 90       	pop	r15
    6dfc:	ef 90       	pop	r14
    6dfe:	df 90       	pop	r13
    6e00:	cf 90       	pop	r12
    6e02:	bf 90       	pop	r11
    6e04:	9f 90       	pop	r9
    6e06:	8f 90       	pop	r8
    6e08:	08 95       	ret

00006e0a <_ZN3USB11dispatchPktEhhj>:
    6e0a:	8f 92       	push	r8
    6e0c:	9f 92       	push	r9
    6e0e:	af 92       	push	r10
    6e10:	bf 92       	push	r11
    6e12:	cf 92       	push	r12
    6e14:	df 92       	push	r13
    6e16:	ef 92       	push	r14
    6e18:	ff 92       	push	r15
    6e1a:	0f 93       	push	r16
    6e1c:	1f 93       	push	r17
    6e1e:	cf 93       	push	r28
    6e20:	df 93       	push	r29
    6e22:	1f 92       	push	r1
    6e24:	cd b7       	in	r28, 0x3d	; 61
    6e26:	de b7       	in	r29, 0x3e	; 62
    6e28:	a6 2e       	mov	r10, r22
    6e2a:	89 01       	movw	r16, r18
    6e2c:	49 83       	std	Y+1, r20	; 0x01
    6e2e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    6e32:	6b 01       	movw	r12, r22
    6e34:	7c 01       	movw	r14, r24
    6e36:	80 e1       	ldi	r24, 0x10	; 16
    6e38:	c8 0e       	add	r12, r24
    6e3a:	87 e2       	ldi	r24, 0x27	; 39
    6e3c:	d8 1e       	adc	r13, r24
    6e3e:	e1 1c       	adc	r14, r1
    6e40:	f1 1c       	adc	r15, r1
    6e42:	81 2c       	mov	r8, r1
    6e44:	91 2c       	mov	r9, r1
    6e46:	b1 2c       	mov	r11, r1
    6e48:	20 e0       	ldi	r18, 0x00	; 0
    6e4a:	49 81       	ldd	r20, Y+1	; 0x01
    6e4c:	a4 2a       	or	r10, r20
    6e4e:	29 83       	std	Y+1, r18	; 0x01
    6e50:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    6e54:	29 81       	ldd	r18, Y+1	; 0x01
    6e56:	6c 15       	cp	r22, r12
    6e58:	7d 05       	cpc	r23, r13
    6e5a:	8e 05       	cpc	r24, r14
    6e5c:	9f 05       	cpc	r25, r15
    6e5e:	40 f5       	brcc	.+80     	; 0x6eb0 <_ZN3USB11dispatchPktEhhj+0xa6>
    6e60:	6a 2d       	mov	r22, r10
    6e62:	80 ef       	ldi	r24, 0xF0	; 240
    6e64:	4f df       	rcall	.-354    	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    6e66:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    6e6a:	6c 15       	cp	r22, r12
    6e6c:	7d 05       	cpc	r23, r13
    6e6e:	8e 05       	cpc	r24, r14
    6e70:	9f 05       	cpc	r25, r15
    6e72:	38 f4       	brcc	.+14     	; 0x6e82 <_ZN3USB11dispatchPktEhhj+0x78>
    6e74:	88 ec       	ldi	r24, 0xC8	; 200
    6e76:	2e df       	rcall	.-420    	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    6e78:	87 ff       	sbrs	r24, 7
    6e7a:	f5 cf       	rjmp	.-22     	; 0x6e66 <_ZN3USB11dispatchPktEhhj+0x5c>
    6e7c:	60 e8       	ldi	r22, 0x80	; 128
    6e7e:	88 ec       	ldi	r24, 0xC8	; 200
    6e80:	41 df       	rcall	.-382    	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    6e82:	88 ef       	ldi	r24, 0xF8	; 248
    6e84:	27 df       	rcall	.-434    	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    6e86:	28 2f       	mov	r18, r24
    6e88:	2f 70       	andi	r18, 0x0F	; 15
    6e8a:	24 30       	cpi	r18, 0x04	; 4
    6e8c:	19 f0       	breq	.+6      	; 0x6e94 <_ZN3USB11dispatchPktEhhj+0x8a>
    6e8e:	2e 30       	cpi	r18, 0x0E	; 14
    6e90:	59 f0       	breq	.+22     	; 0x6ea8 <_ZN3USB11dispatchPktEhhj+0x9e>
    6e92:	0e c0       	rjmp	.+28     	; 0x6eb0 <_ZN3USB11dispatchPktEhhj+0xa6>
    6e94:	ef ef       	ldi	r30, 0xFF	; 255
    6e96:	8e 1a       	sub	r8, r30
    6e98:	9e 0a       	sbc	r9, r30
    6e9a:	01 15       	cp	r16, r1
    6e9c:	11 05       	cpc	r17, r1
    6e9e:	b9 f2       	breq	.-82     	; 0x6e4e <_ZN3USB11dispatchPktEhhj+0x44>
    6ea0:	80 16       	cp	r8, r16
    6ea2:	91 06       	cpc	r9, r17
    6ea4:	a1 f6       	brne	.-88     	; 0x6e4e <_ZN3USB11dispatchPktEhhj+0x44>
    6ea6:	04 c0       	rjmp	.+8      	; 0x6eb0 <_ZN3USB11dispatchPktEhhj+0xa6>
    6ea8:	b3 94       	inc	r11
    6eaa:	f3 e0       	ldi	r31, 0x03	; 3
    6eac:	bf 12       	cpse	r11, r31
    6eae:	cf cf       	rjmp	.-98     	; 0x6e4e <_ZN3USB11dispatchPktEhhj+0x44>
    6eb0:	82 2f       	mov	r24, r18
    6eb2:	0f 90       	pop	r0
    6eb4:	df 91       	pop	r29
    6eb6:	cf 91       	pop	r28
    6eb8:	1f 91       	pop	r17
    6eba:	0f 91       	pop	r16
    6ebc:	ff 90       	pop	r15
    6ebe:	ef 90       	pop	r14
    6ec0:	df 90       	pop	r13
    6ec2:	cf 90       	pop	r12
    6ec4:	bf 90       	pop	r11
    6ec6:	af 90       	pop	r10
    6ec8:	9f 90       	pop	r9
    6eca:	8f 90       	pop	r8
    6ecc:	08 95       	ret

00006ece <_ZN3USB13AttemptConfigEhhhb>:
    6ece:	9f 92       	push	r9
    6ed0:	af 92       	push	r10
    6ed2:	bf 92       	push	r11
    6ed4:	cf 92       	push	r12
    6ed6:	df 92       	push	r13
    6ed8:	ef 92       	push	r14
    6eda:	ff 92       	push	r15
    6edc:	0f 93       	push	r16
    6ede:	1f 93       	push	r17
    6ee0:	cf 93       	push	r28
    6ee2:	df 93       	push	r29
    6ee4:	7c 01       	movw	r14, r24
    6ee6:	b4 2e       	mov	r11, r20
    6ee8:	12 2f       	mov	r17, r18
    6eea:	aa 24       	eor	r10, r10
    6eec:	a3 94       	inc	r10
    6eee:	dc 01       	movw	r26, r24
    6ef0:	a6 0f       	add	r26, r22
    6ef2:	b1 1d       	adc	r27, r1
    6ef4:	a6 0f       	add	r26, r22
    6ef6:	b1 1d       	adc	r27, r1
    6ef8:	6d 01       	movw	r12, r26
    6efa:	86 e5       	ldi	r24, 0x56	; 86
    6efc:	c8 0e       	add	r12, r24
    6efe:	d1 1c       	adc	r13, r1
    6f00:	c4 2f       	mov	r28, r20
    6f02:	d0 e0       	ldi	r29, 0x00	; 0
    6f04:	ab 96       	adiw	r28, 0x2b	; 43
    6f06:	cc 0f       	add	r28, r28
    6f08:	dd 1f       	adc	r29, r29
    6f0a:	ce 0d       	add	r28, r14
    6f0c:	df 1d       	adc	r29, r15
    6f0e:	d6 01       	movw	r26, r12
    6f10:	8d 91       	ld	r24, X+
    6f12:	9c 91       	ld	r25, X
    6f14:	dc 01       	movw	r26, r24
    6f16:	ed 91       	ld	r30, X+
    6f18:	fc 91       	ld	r31, X
    6f1a:	02 80       	ldd	r0, Z+2	; 0x02
    6f1c:	f3 81       	ldd	r31, Z+3	; 0x03
    6f1e:	e0 2d       	mov	r30, r0
    6f20:	20 2f       	mov	r18, r16
    6f22:	41 2f       	mov	r20, r17
    6f24:	6b 2d       	mov	r22, r11
    6f26:	09 95       	icall
    6f28:	80 3e       	cpi	r24, 0xE0	; 224
    6f2a:	b9 f4       	brne	.+46     	; 0x6f5a <_ZN3USB13AttemptConfigEhhhb+0x8c>
    6f2c:	b1 10       	cpse	r11, r1
    6f2e:	0a c0       	rjmp	.+20     	; 0x6f44 <_ZN3USB13AttemptConfigEhhhb+0x76>
    6f30:	61 e0       	ldi	r22, 0x01	; 1
    6f32:	88 ee       	ldi	r24, 0xE8	; 232
    6f34:	e7 de       	rcall	.-562    	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    6f36:	66 e6       	ldi	r22, 0x66	; 102
    6f38:	70 e0       	ldi	r23, 0x00	; 0
    6f3a:	80 e0       	ldi	r24, 0x00	; 0
    6f3c:	90 e0       	ldi	r25, 0x00	; 0
    6f3e:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <delay>
    6f42:	15 c0       	rjmp	.+42     	; 0x6f6e <_ZN3USB13AttemptConfigEhhhb+0xa0>
    6f44:	88 81       	ld	r24, Y
    6f46:	99 81       	ldd	r25, Y+1	; 0x01
    6f48:	dc 01       	movw	r26, r24
    6f4a:	ed 91       	ld	r30, X+
    6f4c:	fc 91       	ld	r31, X
    6f4e:	02 84       	ldd	r0, Z+10	; 0x0a
    6f50:	f3 85       	ldd	r31, Z+11	; 0x0b
    6f52:	e0 2d       	mov	r30, r0
    6f54:	61 2f       	mov	r22, r17
    6f56:	09 95       	icall
    6f58:	0a c0       	rjmp	.+20     	; 0x6f6e <_ZN3USB13AttemptConfigEhhhb+0xa0>
    6f5a:	8d 30       	cpi	r24, 0x0D	; 13
    6f5c:	31 f4       	brne	.+12     	; 0x6f6a <_ZN3USB13AttemptConfigEhhhb+0x9c>
    6f5e:	8f ef       	ldi	r24, 0xFF	; 255
    6f60:	8a 0d       	add	r24, r10
    6f62:	83 30       	cpi	r24, 0x03	; 3
    6f64:	08 f0       	brcs	.+2      	; 0x6f68 <_ZN3USB13AttemptConfigEhhhb+0x9a>
    6f66:	41 c0       	rjmp	.+130    	; 0x6fea <_ZN3USB13AttemptConfigEhhhb+0x11c>
    6f68:	17 c0       	rjmp	.+46     	; 0x6f98 <_ZN3USB13AttemptConfigEhhhb+0xca>
    6f6a:	81 11       	cpse	r24, r1
    6f6c:	41 c0       	rjmp	.+130    	; 0x6ff0 <_ZN3USB13AttemptConfigEhhhb+0x122>
    6f6e:	f6 01       	movw	r30, r12
    6f70:	80 81       	ld	r24, Z
    6f72:	91 81       	ldd	r25, Z+1	; 0x01
    6f74:	dc 01       	movw	r26, r24
    6f76:	ed 91       	ld	r30, X+
    6f78:	fc 91       	ld	r31, X
    6f7a:	01 90       	ld	r0, Z+
    6f7c:	f0 81       	ld	r31, Z
    6f7e:	e0 2d       	mov	r30, r0
    6f80:	20 2f       	mov	r18, r16
    6f82:	41 2f       	mov	r20, r17
    6f84:	6b 2d       	mov	r22, r11
    6f86:	09 95       	icall
    6f88:	98 2e       	mov	r9, r24
    6f8a:	bd e0       	ldi	r27, 0x0D	; 13
    6f8c:	8b 13       	cpse	r24, r27
    6f8e:	0c c0       	rjmp	.+24     	; 0x6fa8 <_ZN3USB13AttemptConfigEhhhb+0xda>
    6f90:	8f ef       	ldi	r24, 0xFF	; 255
    6f92:	8a 0d       	add	r24, r10
    6f94:	83 30       	cpi	r24, 0x03	; 3
    6f96:	50 f4       	brcc	.+20     	; 0x6fac <_ZN3USB13AttemptConfigEhhhb+0xde>
    6f98:	64 e6       	ldi	r22, 0x64	; 100
    6f9a:	70 e0       	ldi	r23, 0x00	; 0
    6f9c:	80 e0       	ldi	r24, 0x00	; 0
    6f9e:	90 e0       	ldi	r25, 0x00	; 0
    6fa0:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <delay>
    6fa4:	a3 94       	inc	r10
    6fa6:	b3 cf       	rjmp	.-154    	; 0x6f0e <_ZN3USB13AttemptConfigEhhhb+0x40>
    6fa8:	88 23       	and	r24, r24
    6faa:	09 f1       	breq	.+66     	; 0x6fee <_ZN3USB13AttemptConfigEhhhb+0x120>
    6fac:	b1 10       	cpse	r11, r1
    6fae:	0a c0       	rjmp	.+20     	; 0x6fc4 <_ZN3USB13AttemptConfigEhhhb+0xf6>
    6fb0:	61 e0       	ldi	r22, 0x01	; 1
    6fb2:	88 ee       	ldi	r24, 0xE8	; 232
    6fb4:	a7 de       	rcall	.-690    	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    6fb6:	66 e6       	ldi	r22, 0x66	; 102
    6fb8:	70 e0       	ldi	r23, 0x00	; 0
    6fba:	80 e0       	ldi	r24, 0x00	; 0
    6fbc:	90 e0       	ldi	r25, 0x00	; 0
    6fbe:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <delay>
    6fc2:	11 c0       	rjmp	.+34     	; 0x6fe6 <_ZN3USB13AttemptConfigEhhhb+0x118>
    6fc4:	eb 2d       	mov	r30, r11
    6fc6:	f0 e0       	ldi	r31, 0x00	; 0
    6fc8:	bb 96       	adiw	r30, 0x2b	; 43
    6fca:	ee 0f       	add	r30, r30
    6fcc:	ff 1f       	adc	r31, r31
    6fce:	ee 0d       	add	r30, r14
    6fd0:	ff 1d       	adc	r31, r15
    6fd2:	80 81       	ld	r24, Z
    6fd4:	91 81       	ldd	r25, Z+1	; 0x01
    6fd6:	dc 01       	movw	r26, r24
    6fd8:	ed 91       	ld	r30, X+
    6fda:	fc 91       	ld	r31, X
    6fdc:	02 84       	ldd	r0, Z+10	; 0x0a
    6fde:	f3 85       	ldd	r31, Z+11	; 0x0b
    6fe0:	e0 2d       	mov	r30, r0
    6fe2:	61 2f       	mov	r22, r17
    6fe4:	09 95       	icall
    6fe6:	89 2d       	mov	r24, r9
    6fe8:	03 c0       	rjmp	.+6      	; 0x6ff0 <_ZN3USB13AttemptConfigEhhhb+0x122>
    6fea:	8d e0       	ldi	r24, 0x0D	; 13
    6fec:	01 c0       	rjmp	.+2      	; 0x6ff0 <_ZN3USB13AttemptConfigEhhhb+0x122>
    6fee:	80 e0       	ldi	r24, 0x00	; 0
    6ff0:	df 91       	pop	r29
    6ff2:	cf 91       	pop	r28
    6ff4:	1f 91       	pop	r17
    6ff6:	0f 91       	pop	r16
    6ff8:	ff 90       	pop	r15
    6ffa:	ef 90       	pop	r14
    6ffc:	df 90       	pop	r13
    6ffe:	cf 90       	pop	r12
    7000:	bf 90       	pop	r11
    7002:	af 90       	pop	r10
    7004:	9f 90       	pop	r9
    7006:	08 95       	ret

00007008 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.4>:
    7008:	0f 93       	push	r16
    700a:	1f 93       	push	r17
    700c:	cf 93       	push	r28
    700e:	df 93       	push	r29
    7010:	00 d0       	rcall	.+0      	; 0x7012 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.4+0xa>
    7012:	cd b7       	in	r28, 0x3d	; 61
    7014:	de b7       	in	r29, 0x3e	; 62
    7016:	8a 01       	movw	r16, r20
    7018:	6a 83       	std	Y+2, r22	; 0x02
    701a:	89 83       	std	Y+1, r24	; 0x01
    701c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN4TPinI5PortbLh2EE5ClearEv>
    7020:	89 81       	ldd	r24, Y+1	; 0x01
    7022:	82 60       	ori	r24, 0x02	; 2
    7024:	8e bd       	out	0x2e, r24	; 46
    7026:	f8 01       	movw	r30, r16
    7028:	6a 81       	ldd	r22, Y+2	; 0x02
    702a:	86 2f       	mov	r24, r22
    702c:	88 23       	and	r24, r24
    702e:	39 f0       	breq	.+14     	; 0x703e <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.4+0x36>
    7030:	0d b4       	in	r0, 0x2d	; 45
    7032:	07 fe       	sbrs	r0, 7
    7034:	fd cf       	rjmp	.-6      	; 0x7030 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.4+0x28>
    7036:	91 91       	ld	r25, Z+
    7038:	9e bd       	out	0x2e, r25	; 46
    703a:	81 50       	subi	r24, 0x01	; 1
    703c:	f7 cf       	rjmp	.-18     	; 0x702c <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.4+0x24>
    703e:	06 0f       	add	r16, r22
    7040:	11 1d       	adc	r17, r1
    7042:	0d b4       	in	r0, 0x2d	; 45
    7044:	07 fe       	sbrs	r0, 7
    7046:	fd cf       	rjmp	.-6      	; 0x7042 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.4+0x3a>
    7048:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN4TPinI5PortbLh2EE3SetEv>
    704c:	c8 01       	movw	r24, r16
    704e:	0f 90       	pop	r0
    7050:	0f 90       	pop	r0
    7052:	df 91       	pop	r29
    7054:	cf 91       	pop	r28
    7056:	1f 91       	pop	r17
    7058:	0f 91       	pop	r16
    705a:	08 95       	ret

0000705c <_ZN3USB11OutTransferEP6EpInfojjPh>:
    705c:	2f 92       	push	r2
    705e:	3f 92       	push	r3
    7060:	4f 92       	push	r4
    7062:	5f 92       	push	r5
    7064:	6f 92       	push	r6
    7066:	7f 92       	push	r7
    7068:	8f 92       	push	r8
    706a:	9f 92       	push	r9
    706c:	af 92       	push	r10
    706e:	bf 92       	push	r11
    7070:	cf 92       	push	r12
    7072:	df 92       	push	r13
    7074:	ef 92       	push	r14
    7076:	ff 92       	push	r15
    7078:	0f 93       	push	r16
    707a:	1f 93       	push	r17
    707c:	cf 93       	push	r28
    707e:	df 93       	push	r29
    7080:	00 d0       	rcall	.+0      	; 0x7082 <_ZN3USB11OutTransferEP6EpInfojjPh+0x26>
    7082:	00 d0       	rcall	.+0      	; 0x7084 <_ZN3USB11OutTransferEP6EpInfojjPh+0x28>
    7084:	1f 92       	push	r1
    7086:	cd b7       	in	r28, 0x3d	; 61
    7088:	de b7       	in	r29, 0x3e	; 62
    708a:	7d 83       	std	Y+5, r23	; 0x05
    708c:	6c 83       	std	Y+4, r22	; 0x04
    708e:	5a 01       	movw	r10, r20
    7090:	69 01       	movw	r12, r18
    7092:	fb 01       	movw	r30, r22
    7094:	21 80       	ldd	r2, Z+1	; 0x01
    7096:	8f ef       	ldi	r24, 0xFF	; 255
    7098:	82 0d       	add	r24, r2
    709a:	80 34       	cpi	r24, 0x40	; 64
    709c:	08 f0       	brcs	.+2      	; 0x70a0 <_ZN3USB11OutTransferEP6EpInfojjPh+0x44>
    709e:	67 c0       	rjmp	.+206    	; 0x716e <_ZN3USB11OutTransferEP6EpInfojjPh+0x112>
    70a0:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    70a4:	2b 01       	movw	r4, r22
    70a6:	3c 01       	movw	r6, r24
    70a8:	f0 e1       	ldi	r31, 0x10	; 16
    70aa:	4f 0e       	add	r4, r31
    70ac:	f7 e2       	ldi	r31, 0x27	; 39
    70ae:	5f 1e       	adc	r5, r31
    70b0:	61 1c       	adc	r6, r1
    70b2:	71 1c       	adc	r7, r1
    70b4:	ec 81       	ldd	r30, Y+4	; 0x04
    70b6:	fd 81       	ldd	r31, Y+5	; 0x05
    70b8:	82 81       	ldd	r24, Z+2	; 0x02
    70ba:	80 ff       	sbrs	r24, 0
    70bc:	02 c0       	rjmp	.+4      	; 0x70c2 <_ZN3USB11OutTransferEP6EpInfojjPh+0x66>
    70be:	60 e8       	ldi	r22, 0x80	; 128
    70c0:	01 c0       	rjmp	.+2      	; 0x70c4 <_ZN3USB11OutTransferEP6EpInfojjPh+0x68>
    70c2:	60 e4       	ldi	r22, 0x40	; 64
    70c4:	88 ee       	ldi	r24, 0xE8	; 232
    70c6:	1e de       	rcall	.-964    	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    70c8:	20 e0       	ldi	r18, 0x00	; 0
    70ca:	31 2c       	mov	r3, r1
    70cc:	c1 14       	cp	r12, r1
    70ce:	d1 04       	cpc	r13, r1
    70d0:	09 f4       	brne	.+2      	; 0x70d4 <_ZN3USB11OutTransferEP6EpInfojjPh+0x78>
    70d2:	3e c0       	rjmp	.+124    	; 0x7150 <_ZN3USB11OutTransferEP6EpInfojjPh+0xf4>
    70d4:	76 01       	movw	r14, r12
    70d6:	2c 14       	cp	r2, r12
    70d8:	3d 04       	cpc	r3, r13
    70da:	08 f4       	brcc	.+2      	; 0x70de <_ZN3USB11OutTransferEP6EpInfojjPh+0x82>
    70dc:	71 01       	movw	r14, r2
    70de:	ea 82       	std	Y+2, r14	; 0x02
    70e0:	a8 01       	movw	r20, r16
    70e2:	6e 2d       	mov	r22, r14
    70e4:	80 e1       	ldi	r24, 0x10	; 16
    70e6:	90 df       	rcall	.-224    	; 0x7008 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.4>
    70e8:	6e 2d       	mov	r22, r14
    70ea:	88 e3       	ldi	r24, 0x38	; 56
    70ec:	0b de       	rcall	.-1002   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    70ee:	ec 81       	ldd	r30, Y+4	; 0x04
    70f0:	fd 81       	ldd	r31, Y+5	; 0x05
    70f2:	60 81       	ld	r22, Z
    70f4:	60 62       	ori	r22, 0x20	; 32
    70f6:	80 ef       	ldi	r24, 0xF0	; 240
    70f8:	05 de       	rcall	.-1014   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    70fa:	88 ec       	ldi	r24, 0xC8	; 200
    70fc:	eb dd       	rcall	.-1066   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    70fe:	87 ff       	sbrs	r24, 7
    7100:	fc cf       	rjmp	.-8      	; 0x70fa <_ZN3USB11OutTransferEP6EpInfojjPh+0x9e>
    7102:	60 e8       	ldi	r22, 0x80	; 128
    7104:	88 ec       	ldi	r24, 0xC8	; 200
    7106:	fe dd       	rcall	.-1028   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    7108:	88 ef       	ldi	r24, 0xF8	; 248
    710a:	e4 dd       	rcall	.-1080   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    710c:	28 2f       	mov	r18, r24
    710e:	2f 70       	andi	r18, 0x0F	; 15
    7110:	81 2c       	mov	r8, r1
    7112:	91 2c       	mov	r9, r1
    7114:	19 82       	std	Y+1, r1	; 0x01
    7116:	22 23       	and	r18, r18
    7118:	09 f4       	brne	.+2      	; 0x711c <_ZN3USB11OutTransferEP6EpInfojjPh+0xc0>
    711a:	61 c0       	rjmp	.+194    	; 0x71de <_ZN3USB11OutTransferEP6EpInfojjPh+0x182>
    711c:	2b 83       	std	Y+3, r18	; 0x03
    711e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    7122:	2b 81       	ldd	r18, Y+3	; 0x03
    7124:	64 15       	cp	r22, r4
    7126:	75 05       	cpc	r23, r5
    7128:	86 05       	cpc	r24, r6
    712a:	97 05       	cpc	r25, r7
    712c:	08 f0       	brcs	.+2      	; 0x7130 <_ZN3USB11OutTransferEP6EpInfojjPh+0xd4>
    712e:	57 c0       	rjmp	.+174    	; 0x71de <_ZN3USB11OutTransferEP6EpInfojjPh+0x182>
    7130:	26 30       	cpi	r18, 0x06	; 6
    7132:	f9 f0       	breq	.+62     	; 0x7172 <_ZN3USB11OutTransferEP6EpInfojjPh+0x116>
    7134:	2e 30       	cpi	r18, 0x0E	; 14
    7136:	09 f4       	brne	.+2      	; 0x713a <_ZN3USB11OutTransferEP6EpInfojjPh+0xde>
    7138:	4c c0       	rjmp	.+152    	; 0x71d2 <_ZN3USB11OutTransferEP6EpInfojjPh+0x176>
    713a:	24 30       	cpi	r18, 0x04	; 4
    713c:	49 f4       	brne	.+18     	; 0x7150 <_ZN3USB11OutTransferEP6EpInfojjPh+0xf4>
    713e:	ff ef       	ldi	r31, 0xFF	; 255
    7140:	8f 1a       	sub	r8, r31
    7142:	9f 0a       	sbc	r9, r31
    7144:	a1 14       	cp	r10, r1
    7146:	b1 04       	cpc	r11, r1
    7148:	41 f1       	breq	.+80     	; 0x719a <_ZN3USB11OutTransferEP6EpInfojjPh+0x13e>
    714a:	8a 14       	cp	r8, r10
    714c:	9b 04       	cpc	r9, r11
    714e:	29 f5       	brne	.+74     	; 0x719a <_ZN3USB11OutTransferEP6EpInfojjPh+0x13e>
    7150:	88 ef       	ldi	r24, 0xF8	; 248
    7152:	2b 83       	std	Y+3, r18	; 0x03
    7154:	bf dd       	rcall	.-1154   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    7156:	85 fb       	bst	r24, 5
    7158:	88 27       	eor	r24, r24
    715a:	80 f9       	bld	r24, 0
    715c:	ec 81       	ldd	r30, Y+4	; 0x04
    715e:	fd 81       	ldd	r31, Y+5	; 0x05
    7160:	92 81       	ldd	r25, Z+2	; 0x02
    7162:	80 fb       	bst	r24, 0
    7164:	90 f9       	bld	r25, 0
    7166:	92 83       	std	Z+2, r25	; 0x02
    7168:	2b 81       	ldd	r18, Y+3	; 0x03
    716a:	82 2f       	mov	r24, r18
    716c:	3d c0       	rjmp	.+122    	; 0x71e8 <_ZN3USB11OutTransferEP6EpInfojjPh+0x18c>
    716e:	8a ed       	ldi	r24, 0xDA	; 218
    7170:	3b c0       	rjmp	.+118    	; 0x71e8 <_ZN3USB11OutTransferEP6EpInfojjPh+0x18c>
    7172:	88 ef       	ldi	r24, 0xF8	; 248
    7174:	af dd       	rcall	.-1186   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    7176:	85 fb       	bst	r24, 5
    7178:	88 27       	eor	r24, r24
    717a:	80 f9       	bld	r24, 0
    717c:	91 e0       	ldi	r25, 0x01	; 1
    717e:	89 27       	eor	r24, r25
    7180:	ec 81       	ldd	r30, Y+4	; 0x04
    7182:	fd 81       	ldd	r31, Y+5	; 0x05
    7184:	92 81       	ldd	r25, Z+2	; 0x02
    7186:	80 fb       	bst	r24, 0
    7188:	90 f9       	bld	r25, 0
    718a:	92 83       	std	Z+2, r25	; 0x02
    718c:	90 ff       	sbrs	r25, 0
    718e:	02 c0       	rjmp	.+4      	; 0x7194 <_ZN3USB11OutTransferEP6EpInfojjPh+0x138>
    7190:	60 e8       	ldi	r22, 0x80	; 128
    7192:	01 c0       	rjmp	.+2      	; 0x7196 <_ZN3USB11OutTransferEP6EpInfojjPh+0x13a>
    7194:	60 e4       	ldi	r22, 0x40	; 64
    7196:	88 ee       	ldi	r24, 0xE8	; 232
    7198:	b5 dd       	rcall	.-1174   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    719a:	60 e0       	ldi	r22, 0x00	; 0
    719c:	88 e3       	ldi	r24, 0x38	; 56
    719e:	b2 dd       	rcall	.-1180   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    71a0:	f8 01       	movw	r30, r16
    71a2:	60 81       	ld	r22, Z
    71a4:	80 e1       	ldi	r24, 0x10	; 16
    71a6:	ae dd       	rcall	.-1188   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    71a8:	6a 81       	ldd	r22, Y+2	; 0x02
    71aa:	88 e3       	ldi	r24, 0x38	; 56
    71ac:	ab dd       	rcall	.-1194   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    71ae:	ec 81       	ldd	r30, Y+4	; 0x04
    71b0:	fd 81       	ldd	r31, Y+5	; 0x05
    71b2:	60 81       	ld	r22, Z
    71b4:	60 62       	ori	r22, 0x20	; 32
    71b6:	80 ef       	ldi	r24, 0xF0	; 240
    71b8:	a5 dd       	rcall	.-1206   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    71ba:	88 ec       	ldi	r24, 0xC8	; 200
    71bc:	8b dd       	rcall	.-1258   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    71be:	87 ff       	sbrs	r24, 7
    71c0:	fc cf       	rjmp	.-8      	; 0x71ba <_ZN3USB11OutTransferEP6EpInfojjPh+0x15e>
    71c2:	60 e8       	ldi	r22, 0x80	; 128
    71c4:	88 ec       	ldi	r24, 0xC8	; 200
    71c6:	9e dd       	rcall	.-1220   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    71c8:	88 ef       	ldi	r24, 0xF8	; 248
    71ca:	84 dd       	rcall	.-1272   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    71cc:	28 2f       	mov	r18, r24
    71ce:	2f 70       	andi	r18, 0x0F	; 15
    71d0:	a2 cf       	rjmp	.-188    	; 0x7116 <_ZN3USB11OutTransferEP6EpInfojjPh+0xba>
    71d2:	89 81       	ldd	r24, Y+1	; 0x01
    71d4:	8f 5f       	subi	r24, 0xFF	; 255
    71d6:	89 83       	std	Y+1, r24	; 0x01
    71d8:	83 30       	cpi	r24, 0x03	; 3
    71da:	f9 f6       	brne	.-66     	; 0x719a <_ZN3USB11OutTransferEP6EpInfojjPh+0x13e>
    71dc:	b9 cf       	rjmp	.-142    	; 0x7150 <_ZN3USB11OutTransferEP6EpInfojjPh+0xf4>
    71de:	ce 18       	sub	r12, r14
    71e0:	df 08       	sbc	r13, r15
    71e2:	0e 0d       	add	r16, r14
    71e4:	1f 1d       	adc	r17, r15
    71e6:	72 cf       	rjmp	.-284    	; 0x70cc <_ZN3USB11OutTransferEP6EpInfojjPh+0x70>
    71e8:	0f 90       	pop	r0
    71ea:	0f 90       	pop	r0
    71ec:	0f 90       	pop	r0
    71ee:	0f 90       	pop	r0
    71f0:	0f 90       	pop	r0
    71f2:	df 91       	pop	r29
    71f4:	cf 91       	pop	r28
    71f6:	1f 91       	pop	r17
    71f8:	0f 91       	pop	r16
    71fa:	ff 90       	pop	r15
    71fc:	ef 90       	pop	r14
    71fe:	df 90       	pop	r13
    7200:	cf 90       	pop	r12
    7202:	bf 90       	pop	r11
    7204:	af 90       	pop	r10
    7206:	9f 90       	pop	r9
    7208:	8f 90       	pop	r8
    720a:	7f 90       	pop	r7
    720c:	6f 90       	pop	r6
    720e:	5f 90       	pop	r5
    7210:	4f 90       	pop	r4
    7212:	3f 90       	pop	r3
    7214:	2f 90       	pop	r2
    7216:	08 95       	ret

00007218 <_ZN3USB11outTransferEhhjPh>:
    7218:	af 92       	push	r10
    721a:	bf 92       	push	r11
    721c:	cf 92       	push	r12
    721e:	df 92       	push	r13
    7220:	ef 92       	push	r14
    7222:	ff 92       	push	r15
    7224:	0f 93       	push	r16
    7226:	1f 93       	push	r17
    7228:	cf 93       	push	r28
    722a:	df 93       	push	r29
    722c:	00 d0       	rcall	.+0      	; 0x722e <_ZN3USB11outTransferEhhjPh+0x16>
    722e:	00 d0       	rcall	.+0      	; 0x7230 <_ZN3USB11outTransferEhhjPh+0x18>
    7230:	cd b7       	in	r28, 0x3d	; 61
    7232:	de b7       	in	r29, 0x3e	; 62
    7234:	7c 01       	movw	r14, r24
    7236:	69 01       	movw	r12, r18
    7238:	58 01       	movw	r10, r16
    723a:	1c 82       	std	Y+4, r1	; 0x04
    723c:	1b 82       	std	Y+3, r1	; 0x03
    723e:	1a 82       	std	Y+2, r1	; 0x02
    7240:	19 82       	std	Y+1, r1	; 0x01
    7242:	8e 01       	movw	r16, r28
    7244:	0f 5f       	subi	r16, 0xFF	; 255
    7246:	1f 4f       	sbci	r17, 0xFF	; 255
    7248:	9e 01       	movw	r18, r28
    724a:	2d 5f       	subi	r18, 0xFD	; 253
    724c:	3f 4f       	sbci	r19, 0xFF	; 255
    724e:	74 dd       	rcall	.-1304   	; 0x6d38 <_ZN3USB10SetAddressEhhPP6EpInfoRj>
    7250:	81 11       	cpse	r24, r1
    7252:	08 c0       	rjmp	.+16     	; 0x7264 <_ZN3USB11outTransferEhhjPh+0x4c>
    7254:	49 81       	ldd	r20, Y+1	; 0x01
    7256:	5a 81       	ldd	r21, Y+2	; 0x02
    7258:	6b 81       	ldd	r22, Y+3	; 0x03
    725a:	7c 81       	ldd	r23, Y+4	; 0x04
    725c:	85 01       	movw	r16, r10
    725e:	96 01       	movw	r18, r12
    7260:	c7 01       	movw	r24, r14
    7262:	fc de       	rcall	.-520    	; 0x705c <_ZN3USB11OutTransferEP6EpInfojjPh>
    7264:	0f 90       	pop	r0
    7266:	0f 90       	pop	r0
    7268:	0f 90       	pop	r0
    726a:	0f 90       	pop	r0
    726c:	df 91       	pop	r29
    726e:	cf 91       	pop	r28
    7270:	1f 91       	pop	r17
    7272:	0f 91       	pop	r16
    7274:	ff 90       	pop	r15
    7276:	ef 90       	pop	r14
    7278:	df 90       	pop	r13
    727a:	cf 90       	pop	r12
    727c:	bf 90       	pop	r11
    727e:	af 90       	pop	r10
    7280:	08 95       	ret

00007282 <_ZN3USB10InTransferEP6EpInfojPjPh>:
    7282:	2f 92       	push	r2
    7284:	3f 92       	push	r3
    7286:	4f 92       	push	r4
    7288:	5f 92       	push	r5
    728a:	6f 92       	push	r6
    728c:	7f 92       	push	r7
    728e:	8f 92       	push	r8
    7290:	9f 92       	push	r9
    7292:	af 92       	push	r10
    7294:	bf 92       	push	r11
    7296:	cf 92       	push	r12
    7298:	df 92       	push	r13
    729a:	ef 92       	push	r14
    729c:	ff 92       	push	r15
    729e:	0f 93       	push	r16
    72a0:	1f 93       	push	r17
    72a2:	cf 93       	push	r28
    72a4:	df 93       	push	r29
    72a6:	00 d0       	rcall	.+0      	; 0x72a8 <_ZN3USB10InTransferEP6EpInfojPjPh+0x26>
    72a8:	00 d0       	rcall	.+0      	; 0x72aa <_ZN3USB10InTransferEP6EpInfojPjPh+0x28>
    72aa:	cd b7       	in	r28, 0x3d	; 61
    72ac:	de b7       	in	r29, 0x3e	; 62
    72ae:	5c 01       	movw	r10, r24
    72b0:	7c 83       	std	Y+4, r23	; 0x04
    72b2:	6b 83       	std	Y+3, r22	; 0x03
    72b4:	4a 01       	movw	r8, r20
    72b6:	79 01       	movw	r14, r18
    72b8:	f9 01       	movw	r30, r18
    72ba:	c0 80       	ld	r12, Z
    72bc:	d1 80       	ldd	r13, Z+1	; 0x01
    72be:	fb 01       	movw	r30, r22
    72c0:	41 80       	ldd	r4, Z+1	; 0x01
    72c2:	f9 01       	movw	r30, r18
    72c4:	11 82       	std	Z+1, r1	; 0x01
    72c6:	10 82       	st	Z, r1
    72c8:	fb 01       	movw	r30, r22
    72ca:	82 81       	ldd	r24, Z+2	; 0x02
    72cc:	81 ff       	sbrs	r24, 1
    72ce:	02 c0       	rjmp	.+4      	; 0x72d4 <_ZN3USB10InTransferEP6EpInfojPjPh+0x52>
    72d0:	60 e2       	ldi	r22, 0x20	; 32
    72d2:	01 c0       	rjmp	.+2      	; 0x72d6 <_ZN3USB10InTransferEP6EpInfojPjPh+0x54>
    72d4:	60 e1       	ldi	r22, 0x10	; 16
    72d6:	88 ee       	ldi	r24, 0xE8	; 232
    72d8:	15 dd       	rcall	.-1494   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    72da:	3c 2c       	mov	r3, r12
    72dc:	94 01       	movw	r18, r8
    72de:	eb 81       	ldd	r30, Y+3	; 0x03
    72e0:	fc 81       	ldd	r31, Y+4	; 0x04
    72e2:	40 81       	ld	r20, Z
    72e4:	60 e0       	ldi	r22, 0x00	; 0
    72e6:	c5 01       	movw	r24, r10
    72e8:	90 dd       	rcall	.-1248   	; 0x6e0a <_ZN3USB11dispatchPktEhhj>
    72ea:	58 2e       	mov	r5, r24
    72ec:	f6 e0       	ldi	r31, 0x06	; 6
    72ee:	8f 13       	cpse	r24, r31
    72f0:	15 c0       	rjmp	.+42     	; 0x731c <_ZN3USB10InTransferEP6EpInfojPjPh+0x9a>
    72f2:	88 ef       	ldi	r24, 0xF8	; 248
    72f4:	ef dc       	rcall	.-1570   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    72f6:	85 fb       	bst	r24, 5
    72f8:	88 27       	eor	r24, r24
    72fa:	80 f9       	bld	r24, 0
    72fc:	91 e0       	ldi	r25, 0x01	; 1
    72fe:	89 27       	eor	r24, r25
    7300:	eb 81       	ldd	r30, Y+3	; 0x03
    7302:	fc 81       	ldd	r31, Y+4	; 0x04
    7304:	92 81       	ldd	r25, Z+2	; 0x02
    7306:	80 fb       	bst	r24, 0
    7308:	91 f9       	bld	r25, 1
    730a:	92 83       	std	Z+2, r25	; 0x02
    730c:	91 ff       	sbrs	r25, 1
    730e:	02 c0       	rjmp	.+4      	; 0x7314 <_ZN3USB10InTransferEP6EpInfojPjPh+0x92>
    7310:	60 e2       	ldi	r22, 0x20	; 32
    7312:	01 c0       	rjmp	.+2      	; 0x7316 <_ZN3USB10InTransferEP6EpInfojPjPh+0x94>
    7314:	60 e1       	ldi	r22, 0x10	; 16
    7316:	88 ee       	ldi	r24, 0xE8	; 232
    7318:	f5 dc       	rcall	.-1558   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    731a:	e0 cf       	rjmp	.-64     	; 0x72dc <_ZN3USB10InTransferEP6EpInfojPjPh+0x5a>
    731c:	81 11       	cpse	r24, r1
    731e:	56 c0       	rjmp	.+172    	; 0x73cc <_ZN3USB10InTransferEP6EpInfojPjPh+0x14a>
    7320:	88 ec       	ldi	r24, 0xC8	; 200
    7322:	d8 dc       	rcall	.-1616   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    7324:	82 ff       	sbrs	r24, 2
    7326:	50 c0       	rjmp	.+160    	; 0x73c8 <_ZN3USB10InTransferEP6EpInfojPjPh+0x146>
    7328:	80 e3       	ldi	r24, 0x30	; 48
    732a:	d4 dc       	rcall	.-1624   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    732c:	28 2e       	mov	r2, r24
    732e:	28 2f       	mov	r18, r24
    7330:	30 e0       	ldi	r19, 0x00	; 0
    7332:	c2 16       	cp	r12, r18
    7334:	d3 06       	cpc	r13, r19
    7336:	08 f4       	brcc	.+2      	; 0x733a <_ZN3USB10InTransferEP6EpInfojPjPh+0xb8>
    7338:	23 2c       	mov	r2, r3
    733a:	f7 01       	movw	r30, r14
    733c:	20 81       	ld	r18, Z
    733e:	31 81       	ldd	r19, Z+1	; 0x01
    7340:	62 2c       	mov	r6, r2
    7342:	71 2c       	mov	r7, r1
    7344:	a6 01       	movw	r20, r12
    7346:	42 1b       	sub	r20, r18
    7348:	53 0b       	sbc	r21, r19
    734a:	57 ff       	sbrs	r21, 7
    734c:	02 c0       	rjmp	.+4      	; 0x7352 <_ZN3USB10InTransferEP6EpInfojPjPh+0xd0>
    734e:	40 e0       	ldi	r20, 0x00	; 0
    7350:	50 e0       	ldi	r21, 0x00	; 0
    7352:	93 01       	movw	r18, r6
    7354:	46 15       	cp	r20, r6
    7356:	57 05       	cpc	r21, r7
    7358:	0c f4       	brge	.+2      	; 0x735c <_ZN3USB10InTransferEP6EpInfojPjPh+0xda>
    735a:	9a 01       	movw	r18, r20
    735c:	29 83       	std	Y+1, r18	; 0x01
    735e:	3a 83       	std	Y+2, r19	; 0x02
    7360:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN4TPinI5PortbLh2EE5ClearEv>
    7364:	f8 e0       	ldi	r31, 0x08	; 8
    7366:	fe bd       	out	0x2e, r31	; 46
    7368:	3a 81       	ldd	r19, Y+2	; 0x02
    736a:	29 81       	ldd	r18, Y+1	; 0x01
    736c:	0d b4       	in	r0, 0x2d	; 45
    736e:	07 fe       	sbrs	r0, 7
    7370:	fd cf       	rjmp	.-6      	; 0x736c <_ZN3USB10InTransferEP6EpInfojPjPh+0xea>
    7372:	f8 01       	movw	r30, r16
    7374:	82 2f       	mov	r24, r18
    7376:	80 0f       	add	r24, r16
    7378:	8e 17       	cp	r24, r30
    737a:	39 f0       	breq	.+14     	; 0x738a <_ZN3USB10InTransferEP6EpInfojPjPh+0x108>
    737c:	1e bc       	out	0x2e, r1	; 46
    737e:	0d b4       	in	r0, 0x2d	; 45
    7380:	07 fe       	sbrs	r0, 7
    7382:	fd cf       	rjmp	.-6      	; 0x737e <_ZN3USB10InTransferEP6EpInfojPjPh+0xfc>
    7384:	4e b5       	in	r20, 0x2e	; 46
    7386:	41 93       	st	Z+, r20
    7388:	f7 cf       	rjmp	.-18     	; 0x7378 <_ZN3USB10InTransferEP6EpInfojPjPh+0xf6>
    738a:	02 0f       	add	r16, r18
    738c:	13 1f       	adc	r17, r19
    738e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN4TPinI5PortbLh2EE3SetEv>
    7392:	64 e0       	ldi	r22, 0x04	; 4
    7394:	88 ec       	ldi	r24, 0xC8	; 200
    7396:	b6 dc       	rcall	.-1684   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    7398:	f7 01       	movw	r30, r14
    739a:	20 81       	ld	r18, Z
    739c:	31 81       	ldd	r19, Z+1	; 0x01
    739e:	26 0d       	add	r18, r6
    73a0:	37 1d       	adc	r19, r7
    73a2:	31 83       	std	Z+1, r19	; 0x01
    73a4:	20 83       	st	Z, r18
    73a6:	24 14       	cp	r2, r4
    73a8:	20 f0       	brcs	.+8      	; 0x73b2 <_ZN3USB10InTransferEP6EpInfojPjPh+0x130>
    73aa:	2c 15       	cp	r18, r12
    73ac:	3d 05       	cpc	r19, r13
    73ae:	08 f4       	brcc	.+2      	; 0x73b2 <_ZN3USB10InTransferEP6EpInfojPjPh+0x130>
    73b0:	95 cf       	rjmp	.-214    	; 0x72dc <_ZN3USB10InTransferEP6EpInfojPjPh+0x5a>
    73b2:	88 ef       	ldi	r24, 0xF8	; 248
    73b4:	8f dc       	rcall	.-1762   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    73b6:	82 95       	swap	r24
    73b8:	81 70       	andi	r24, 0x01	; 1
    73ba:	eb 81       	ldd	r30, Y+3	; 0x03
    73bc:	fc 81       	ldd	r31, Y+4	; 0x04
    73be:	92 81       	ldd	r25, Z+2	; 0x02
    73c0:	80 fb       	bst	r24, 0
    73c2:	91 f9       	bld	r25, 1
    73c4:	92 83       	std	Z+2, r25	; 0x02
    73c6:	02 c0       	rjmp	.+4      	; 0x73cc <_ZN3USB10InTransferEP6EpInfojPjPh+0x14a>
    73c8:	30 ef       	ldi	r19, 0xF0	; 240
    73ca:	53 2e       	mov	r5, r19
    73cc:	85 2d       	mov	r24, r5
    73ce:	0f 90       	pop	r0
    73d0:	0f 90       	pop	r0
    73d2:	0f 90       	pop	r0
    73d4:	0f 90       	pop	r0
    73d6:	df 91       	pop	r29
    73d8:	cf 91       	pop	r28
    73da:	1f 91       	pop	r17
    73dc:	0f 91       	pop	r16
    73de:	ff 90       	pop	r15
    73e0:	ef 90       	pop	r14
    73e2:	df 90       	pop	r13
    73e4:	cf 90       	pop	r12
    73e6:	bf 90       	pop	r11
    73e8:	af 90       	pop	r10
    73ea:	9f 90       	pop	r9
    73ec:	8f 90       	pop	r8
    73ee:	7f 90       	pop	r7
    73f0:	6f 90       	pop	r6
    73f2:	5f 90       	pop	r5
    73f4:	4f 90       	pop	r4
    73f6:	3f 90       	pop	r3
    73f8:	2f 90       	pop	r2
    73fa:	08 95       	ret

000073fc <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>:
    73fc:	2f 92       	push	r2
    73fe:	3f 92       	push	r3
    7400:	4f 92       	push	r4
    7402:	5f 92       	push	r5
    7404:	6f 92       	push	r6
    7406:	7f 92       	push	r7
    7408:	8f 92       	push	r8
    740a:	9f 92       	push	r9
    740c:	af 92       	push	r10
    740e:	bf 92       	push	r11
    7410:	cf 92       	push	r12
    7412:	df 92       	push	r13
    7414:	ef 92       	push	r14
    7416:	ff 92       	push	r15
    7418:	0f 93       	push	r16
    741a:	1f 93       	push	r17
    741c:	cf 93       	push	r28
    741e:	df 93       	push	r29
    7420:	cd b7       	in	r28, 0x3d	; 61
    7422:	de b7       	in	r29, 0x3e	; 62
    7424:	62 97       	sbiw	r28, 0x12	; 18
    7426:	0f b6       	in	r0, 0x3f	; 63
    7428:	f8 94       	cli
    742a:	de bf       	out	0x3e, r29	; 62
    742c:	0f be       	out	0x3f, r0	; 63
    742e:	cd bf       	out	0x3d, r28	; 61
    7430:	3c 01       	movw	r6, r24
    7432:	54 2e       	mov	r5, r20
    7434:	d2 2e       	mov	r13, r18
    7436:	40 2e       	mov	r4, r16
    7438:	5e 2d       	mov	r21, r14
    743a:	2f a0       	ldd	r2, Y+39	; 0x27
    743c:	38 a4       	ldd	r3, Y+40	; 0x28
    743e:	e9 a4       	ldd	r14, Y+41	; 0x29
    7440:	fa a4       	ldd	r15, Y+42	; 0x2a
    7442:	18 8a       	std	Y+16, r1	; 0x10
    7444:	1f 86       	std	Y+15, r1	; 0x0f
    7446:	1e 86       	std	Y+14, r1	; 0x0e
    7448:	1d 86       	std	Y+13, r1	; 0x0d
    744a:	8e 01       	movw	r16, r28
    744c:	03 5f       	subi	r16, 0xF3	; 243
    744e:	1f 4f       	sbci	r17, 0xFF	; 255
    7450:	9e 01       	movw	r18, r28
    7452:	21 5f       	subi	r18, 0xF1	; 241
    7454:	3f 4f       	sbci	r19, 0xFF	; 255
    7456:	59 8b       	std	Y+17, r21	; 0x11
    7458:	6f dc       	rcall	.-1826   	; 0x6d38 <_ZN3USB10SetAddressEhhPP6EpInfoRj>
    745a:	59 89       	ldd	r21, Y+17	; 0x11
    745c:	81 11       	cpse	r24, r1
    745e:	8d c0       	rjmp	.+282    	; 0x757a <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x17e>
    7460:	d9 82       	std	Y+1, r13	; 0x01
    7462:	4a 82       	std	Y+2, r4	; 0x02
    7464:	5b 83       	std	Y+3, r21	; 0x03
    7466:	cc 82       	std	Y+4, r12	; 0x04
    7468:	be 82       	std	Y+6, r11	; 0x06
    746a:	ad 82       	std	Y+5, r10	; 0x05
    746c:	98 86       	std	Y+8, r9	; 0x08
    746e:	8f 82       	std	Y+7, r8	; 0x07
    7470:	ae 01       	movw	r20, r28
    7472:	4f 5f       	subi	r20, 0xFF	; 255
    7474:	5f 4f       	sbci	r21, 0xFF	; 255
    7476:	68 e0       	ldi	r22, 0x08	; 8
    7478:	80 e2       	ldi	r24, 0x20	; 32
    747a:	c6 dd       	rcall	.-1140   	; 0x7008 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE7bytesWrEhhPh.isra.4>
    747c:	2d 85       	ldd	r18, Y+13	; 0x0d
    747e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7480:	45 2d       	mov	r20, r5
    7482:	60 e1       	ldi	r22, 0x10	; 16
    7484:	c3 01       	movw	r24, r6
    7486:	c1 dc       	rcall	.-1662   	; 0x6e0a <_ZN3USB11dispatchPktEhhj>
    7488:	18 2f       	mov	r17, r24
    748a:	81 11       	cpse	r24, r1
    748c:	75 c0       	rjmp	.+234    	; 0x7578 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x17c>
    748e:	bd 2c       	mov	r11, r13
    7490:	bb 1c       	adc	r11, r11
    7492:	bb 24       	eor	r11, r11
    7494:	bb 1c       	adc	r11, r11
    7496:	e1 14       	cp	r14, r1
    7498:	f1 04       	cpc	r15, r1
    749a:	09 f4       	brne	.+2      	; 0x749e <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xa2>
    749c:	62 c0       	rjmp	.+196    	; 0x7562 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x166>
    749e:	ef 85       	ldd	r30, Y+15	; 0x0f
    74a0:	f8 89       	ldd	r31, Y+16	; 0x10
    74a2:	82 81       	ldd	r24, Z+2	; 0x02
    74a4:	bb 20       	and	r11, r11
    74a6:	09 f4       	brne	.+2      	; 0x74aa <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xae>
    74a8:	50 c0       	rjmp	.+160    	; 0x754a <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x14e>
    74aa:	82 60       	ori	r24, 0x02	; 2
    74ac:	82 83       	std	Z+2, r24	; 0x02
    74ae:	64 01       	movw	r12, r8
    74b0:	aa 24       	eor	r10, r10
    74b2:	a3 94       	inc	r10
    74b4:	c1 14       	cp	r12, r1
    74b6:	d1 04       	cpc	r13, r1
    74b8:	09 f4       	brne	.+2      	; 0x74bc <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xc0>
    74ba:	51 c0       	rjmp	.+162    	; 0x755e <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x162>
    74bc:	3c 86       	std	Y+12, r3	; 0x0c
    74be:	2b 86       	std	Y+11, r2	; 0x0b
    74c0:	4d 85       	ldd	r20, Y+13	; 0x0d
    74c2:	5e 85       	ldd	r21, Y+14	; 0x0e
    74c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    74c6:	78 89       	ldd	r23, Y+16	; 0x10
    74c8:	87 01       	movw	r16, r14
    74ca:	9e 01       	movw	r18, r28
    74cc:	25 5f       	subi	r18, 0xF5	; 245
    74ce:	3f 4f       	sbci	r19, 0xFF	; 255
    74d0:	c3 01       	movw	r24, r6
    74d2:	d7 de       	rcall	.-594    	; 0x7282 <_ZN3USB10InTransferEP6EpInfojPjPh>
    74d4:	18 2f       	mov	r17, r24
    74d6:	86 30       	cpi	r24, 0x06	; 6
    74d8:	a9 f4       	brne	.+42     	; 0x7504 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x108>
    74da:	2f 85       	ldd	r18, Y+15	; 0x0f
    74dc:	38 89       	ldd	r19, Y+16	; 0x10
    74de:	88 ef       	ldi	r24, 0xF8	; 248
    74e0:	29 8b       	std	Y+17, r18	; 0x11
    74e2:	3a 8b       	std	Y+18, r19	; 0x12
    74e4:	f7 db       	rcall	.-2066   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    74e6:	85 fb       	bst	r24, 5
    74e8:	88 27       	eor	r24, r24
    74ea:	80 f9       	bld	r24, 0
    74ec:	8a 25       	eor	r24, r10
    74ee:	29 89       	ldd	r18, Y+17	; 0x11
    74f0:	3a 89       	ldd	r19, Y+18	; 0x12
    74f2:	d9 01       	movw	r26, r18
    74f4:	12 96       	adiw	r26, 0x02	; 2
    74f6:	9c 91       	ld	r25, X
    74f8:	12 97       	sbiw	r26, 0x02	; 2
    74fa:	80 fb       	bst	r24, 0
    74fc:	91 f9       	bld	r25, 1
    74fe:	12 96       	adiw	r26, 0x02	; 2
    7500:	9c 93       	st	X, r25
    7502:	d8 cf       	rjmp	.-80     	; 0x74b4 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xb8>
    7504:	81 11       	cpse	r24, r1
    7506:	38 c0       	rjmp	.+112    	; 0x7578 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x17c>
    7508:	eb a5       	ldd	r30, Y+43	; 0x2b
    750a:	fc a5       	ldd	r31, Y+44	; 0x2c
    750c:	30 97       	sbiw	r30, 0x00	; 0
    750e:	a1 f0       	breq	.+40     	; 0x7538 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x13c>
    7510:	01 90       	ld	r0, Z+
    7512:	f0 81       	ld	r31, Z
    7514:	e0 2d       	mov	r30, r0
    7516:	01 90       	ld	r0, Z+
    7518:	f0 81       	ld	r31, Z
    751a:	e0 2d       	mov	r30, r0
    751c:	c4 01       	movw	r24, r8
    751e:	8c 19       	sub	r24, r12
    7520:	9d 09       	sbc	r25, r13
    7522:	9a 87       	std	Y+10, r25	; 0x0a
    7524:	89 87       	std	Y+9, r24	; 0x09
    7526:	6b 85       	ldd	r22, Y+11	; 0x0b
    7528:	7c 85       	ldd	r23, Y+12	; 0x0c
    752a:	9e 01       	movw	r18, r28
    752c:	27 5f       	subi	r18, 0xF7	; 247
    752e:	3f 4f       	sbci	r19, 0xFF	; 255
    7530:	a7 01       	movw	r20, r14
    7532:	8b a5       	ldd	r24, Y+43	; 0x2b
    7534:	9c a5       	ldd	r25, Y+44	; 0x2c
    7536:	09 95       	icall
    7538:	8b 85       	ldd	r24, Y+11	; 0x0b
    753a:	9c 85       	ldd	r25, Y+12	; 0x0c
    753c:	c8 1a       	sub	r12, r24
    753e:	d9 0a       	sbc	r13, r25
    7540:	82 15       	cp	r24, r2
    7542:	93 05       	cpc	r25, r3
    7544:	08 f0       	brcs	.+2      	; 0x7548 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x14c>
    7546:	b6 cf       	rjmp	.-148    	; 0x74b4 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0xb8>
    7548:	0c c0       	rjmp	.+24     	; 0x7562 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x166>
    754a:	81 60       	ori	r24, 0x01	; 1
    754c:	82 83       	std	Z+2, r24	; 0x02
    754e:	4d 85       	ldd	r20, Y+13	; 0x0d
    7550:	5e 85       	ldd	r21, Y+14	; 0x0e
    7552:	87 01       	movw	r16, r14
    7554:	91 01       	movw	r18, r2
    7556:	bf 01       	movw	r22, r30
    7558:	c3 01       	movw	r24, r6
    755a:	80 dd       	rcall	.-1280   	; 0x705c <_ZN3USB11OutTransferEP6EpInfojjPh>
    755c:	18 2f       	mov	r17, r24
    755e:	11 11       	cpse	r17, r1
    7560:	0b c0       	rjmp	.+22     	; 0x7578 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x17c>
    7562:	2d 85       	ldd	r18, Y+13	; 0x0d
    7564:	3e 85       	ldd	r19, Y+14	; 0x0e
    7566:	bb 20       	and	r11, r11
    7568:	11 f0       	breq	.+4      	; 0x756e <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x172>
    756a:	60 ea       	ldi	r22, 0xA0	; 160
    756c:	01 c0       	rjmp	.+2      	; 0x7570 <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x174>
    756e:	60 e8       	ldi	r22, 0x80	; 128
    7570:	45 2d       	mov	r20, r5
    7572:	c3 01       	movw	r24, r6
    7574:	4a dc       	rcall	.-1900   	; 0x6e0a <_ZN3USB11dispatchPktEhhj>
    7576:	01 c0       	rjmp	.+2      	; 0x757a <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser+0x17e>
    7578:	81 2f       	mov	r24, r17
    757a:	62 96       	adiw	r28, 0x12	; 18
    757c:	0f b6       	in	r0, 0x3f	; 63
    757e:	f8 94       	cli
    7580:	de bf       	out	0x3e, r29	; 62
    7582:	0f be       	out	0x3f, r0	; 63
    7584:	cd bf       	out	0x3d, r28	; 61
    7586:	df 91       	pop	r29
    7588:	cf 91       	pop	r28
    758a:	1f 91       	pop	r17
    758c:	0f 91       	pop	r16
    758e:	ff 90       	pop	r15
    7590:	ef 90       	pop	r14
    7592:	df 90       	pop	r13
    7594:	cf 90       	pop	r12
    7596:	bf 90       	pop	r11
    7598:	af 90       	pop	r10
    759a:	9f 90       	pop	r9
    759c:	8f 90       	pop	r8
    759e:	7f 90       	pop	r7
    75a0:	6f 90       	pop	r6
    75a2:	5f 90       	pop	r5
    75a4:	4f 90       	pop	r4
    75a6:	3f 90       	pop	r3
    75a8:	2f 90       	pop	r2
    75aa:	08 95       	ret

000075ac <_ZN3USB11getDevDescrEhhjPh>:
    75ac:	8f 92       	push	r8
    75ae:	9f 92       	push	r9
    75b0:	af 92       	push	r10
    75b2:	bf 92       	push	r11
    75b4:	cf 92       	push	r12
    75b6:	ef 92       	push	r14
    75b8:	0f 93       	push	r16
    75ba:	1f 93       	push	r17
    75bc:	1f 92       	push	r1
    75be:	1f 92       	push	r1
    75c0:	1f 93       	push	r17
    75c2:	0f 93       	push	r16
    75c4:	3f 93       	push	r19
    75c6:	2f 93       	push	r18
    75c8:	49 01       	movw	r8, r18
    75ca:	a1 2c       	mov	r10, r1
    75cc:	b1 2c       	mov	r11, r1
    75ce:	cc 24       	eor	r12, r12
    75d0:	c3 94       	inc	r12
    75d2:	e1 2c       	mov	r14, r1
    75d4:	06 e0       	ldi	r16, 0x06	; 6
    75d6:	20 e8       	ldi	r18, 0x80	; 128
    75d8:	11 df       	rcall	.-478    	; 0x73fc <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    75da:	0f 90       	pop	r0
    75dc:	0f 90       	pop	r0
    75de:	0f 90       	pop	r0
    75e0:	0f 90       	pop	r0
    75e2:	0f 90       	pop	r0
    75e4:	0f 90       	pop	r0
    75e6:	1f 91       	pop	r17
    75e8:	0f 91       	pop	r16
    75ea:	ef 90       	pop	r14
    75ec:	cf 90       	pop	r12
    75ee:	bf 90       	pop	r11
    75f0:	af 90       	pop	r10
    75f2:	9f 90       	pop	r9
    75f4:	8f 90       	pop	r8
    75f6:	08 95       	ret

000075f8 <_ZN3USB12getConfDescrEhhjhPh>:
    75f8:	8f 92       	push	r8
    75fa:	9f 92       	push	r9
    75fc:	af 92       	push	r10
    75fe:	bf 92       	push	r11
    7600:	cf 92       	push	r12
    7602:	ef 92       	push	r14
    7604:	ff 92       	push	r15
    7606:	0f 93       	push	r16
    7608:	1f 92       	push	r1
    760a:	1f 92       	push	r1
    760c:	ff 92       	push	r15
    760e:	ef 92       	push	r14
    7610:	3f 93       	push	r19
    7612:	2f 93       	push	r18
    7614:	49 01       	movw	r8, r18
    7616:	a1 2c       	mov	r10, r1
    7618:	b1 2c       	mov	r11, r1
    761a:	52 e0       	ldi	r21, 0x02	; 2
    761c:	c5 2e       	mov	r12, r21
    761e:	e0 2e       	mov	r14, r16
    7620:	06 e0       	ldi	r16, 0x06	; 6
    7622:	20 e8       	ldi	r18, 0x80	; 128
    7624:	eb de       	rcall	.-554    	; 0x73fc <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    7626:	0f 90       	pop	r0
    7628:	0f 90       	pop	r0
    762a:	0f 90       	pop	r0
    762c:	0f 90       	pop	r0
    762e:	0f 90       	pop	r0
    7630:	0f 90       	pop	r0
    7632:	0f 91       	pop	r16
    7634:	ff 90       	pop	r15
    7636:	ef 90       	pop	r14
    7638:	cf 90       	pop	r12
    763a:	bf 90       	pop	r11
    763c:	af 90       	pop	r10
    763e:	9f 90       	pop	r9
    7640:	8f 90       	pop	r8
    7642:	08 95       	ret

00007644 <_ZN3USB7setAddrEhhh>:
    7644:	8f 92       	push	r8
    7646:	9f 92       	push	r9
    7648:	af 92       	push	r10
    764a:	bf 92       	push	r11
    764c:	cf 92       	push	r12
    764e:	ef 92       	push	r14
    7650:	0f 93       	push	r16
    7652:	cf 93       	push	r28
    7654:	1f 92       	push	r1
    7656:	1f 92       	push	r1
    7658:	1f 92       	push	r1
    765a:	1f 92       	push	r1
    765c:	1f 92       	push	r1
    765e:	1f 92       	push	r1
    7660:	81 2c       	mov	r8, r1
    7662:	91 2c       	mov	r9, r1
    7664:	a1 2c       	mov	r10, r1
    7666:	b1 2c       	mov	r11, r1
    7668:	c1 2c       	mov	r12, r1
    766a:	e2 2e       	mov	r14, r18
    766c:	05 e0       	ldi	r16, 0x05	; 5
    766e:	20 e0       	ldi	r18, 0x00	; 0
    7670:	c5 de       	rcall	.-630    	; 0x73fc <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    7672:	c8 2f       	mov	r28, r24
    7674:	6c e2       	ldi	r22, 0x2C	; 44
    7676:	71 e0       	ldi	r23, 0x01	; 1
    7678:	80 e0       	ldi	r24, 0x00	; 0
    767a:	90 e0       	ldi	r25, 0x00	; 0
    767c:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <delay>
    7680:	0f 90       	pop	r0
    7682:	0f 90       	pop	r0
    7684:	0f 90       	pop	r0
    7686:	0f 90       	pop	r0
    7688:	0f 90       	pop	r0
    768a:	0f 90       	pop	r0
    768c:	8c 2f       	mov	r24, r28
    768e:	cf 91       	pop	r28
    7690:	0f 91       	pop	r16
    7692:	ef 90       	pop	r14
    7694:	cf 90       	pop	r12
    7696:	bf 90       	pop	r11
    7698:	af 90       	pop	r10
    769a:	9f 90       	pop	r9
    769c:	8f 90       	pop	r8
    769e:	08 95       	ret

000076a0 <_ZN3USB7setConfEhhh>:
    76a0:	8f 92       	push	r8
    76a2:	9f 92       	push	r9
    76a4:	af 92       	push	r10
    76a6:	bf 92       	push	r11
    76a8:	cf 92       	push	r12
    76aa:	ef 92       	push	r14
    76ac:	0f 93       	push	r16
    76ae:	1f 92       	push	r1
    76b0:	1f 92       	push	r1
    76b2:	1f 92       	push	r1
    76b4:	1f 92       	push	r1
    76b6:	1f 92       	push	r1
    76b8:	1f 92       	push	r1
    76ba:	81 2c       	mov	r8, r1
    76bc:	91 2c       	mov	r9, r1
    76be:	a1 2c       	mov	r10, r1
    76c0:	b1 2c       	mov	r11, r1
    76c2:	c1 2c       	mov	r12, r1
    76c4:	e2 2e       	mov	r14, r18
    76c6:	09 e0       	ldi	r16, 0x09	; 9
    76c8:	20 e0       	ldi	r18, 0x00	; 0
    76ca:	98 de       	rcall	.-720    	; 0x73fc <_ZN3USB7ctrlReqEhhhhhhjjjPhP13USBReadParser>
    76cc:	0f 90       	pop	r0
    76ce:	0f 90       	pop	r0
    76d0:	0f 90       	pop	r0
    76d2:	0f 90       	pop	r0
    76d4:	0f 90       	pop	r0
    76d6:	0f 90       	pop	r0
    76d8:	0f 91       	pop	r16
    76da:	ef 90       	pop	r14
    76dc:	cf 90       	pop	r12
    76de:	bf 90       	pop	r11
    76e0:	af 90       	pop	r10
    76e2:	9f 90       	pop	r9
    76e4:	8f 90       	pop	r8
    76e6:	08 95       	ret

000076e8 <_Z8PrintHexIhEvT_i>:
    76e8:	1f 93       	push	r17
    76ea:	cf 93       	push	r28
    76ec:	df 93       	push	r29
    76ee:	18 2f       	mov	r17, r24
    76f0:	eb 01       	movw	r28, r22
    76f2:	28 2f       	mov	r18, r24
    76f4:	30 e0       	ldi	r19, 0x00	; 0
    76f6:	e4 e0       	ldi	r30, 0x04	; 4
    76f8:	35 95       	asr	r19
    76fa:	27 95       	ror	r18
    76fc:	ea 95       	dec	r30
    76fe:	e1 f7       	brne	.-8      	; 0x76f8 <_Z8PrintHexIhEvT_i+0x10>
    7700:	80 e3       	ldi	r24, 0x30	; 48
    7702:	82 0f       	add	r24, r18
    7704:	8a 33       	cpi	r24, 0x3A	; 58
    7706:	10 f0       	brcs	.+4      	; 0x770c <_Z8PrintHexIhEvT_i+0x24>
    7708:	87 e3       	ldi	r24, 0x37	; 55
    770a:	82 0f       	add	r24, r18
    770c:	be 01       	movw	r22, r28
    770e:	03 d3       	rcall	.+1542   	; 0x7d16 <_Z9E_Notifycci>
    7710:	1f 70       	andi	r17, 0x0F	; 15
    7712:	80 e3       	ldi	r24, 0x30	; 48
    7714:	81 0f       	add	r24, r17
    7716:	8a 33       	cpi	r24, 0x3A	; 58
    7718:	10 f0       	brcs	.+4      	; 0x771e <_Z8PrintHexIhEvT_i+0x36>
    771a:	87 e3       	ldi	r24, 0x37	; 55
    771c:	81 0f       	add	r24, r17
    771e:	be 01       	movw	r22, r28
    7720:	df 91       	pop	r29
    7722:	cf 91       	pop	r28
    7724:	1f 91       	pop	r17
    7726:	f7 c2       	rjmp	.+1518   	; 0x7d16 <_Z9E_Notifycci>

00007728 <_ZN3USB10inTransferEhhPjPh>:
    7728:	8f 92       	push	r8
    772a:	9f 92       	push	r9
    772c:	af 92       	push	r10
    772e:	bf 92       	push	r11
    7730:	cf 92       	push	r12
    7732:	df 92       	push	r13
    7734:	ef 92       	push	r14
    7736:	ff 92       	push	r15
    7738:	0f 93       	push	r16
    773a:	1f 93       	push	r17
    773c:	cf 93       	push	r28
    773e:	df 93       	push	r29
    7740:	00 d0       	rcall	.+0      	; 0x7742 <_ZN3USB10inTransferEhhPjPh+0x1a>
    7742:	00 d0       	rcall	.+0      	; 0x7744 <_ZN3USB10inTransferEhhPjPh+0x1c>
    7744:	cd b7       	in	r28, 0x3d	; 61
    7746:	de b7       	in	r29, 0x3e	; 62
    7748:	7c 01       	movw	r14, r24
    774a:	86 2e       	mov	r8, r22
    774c:	94 2e       	mov	r9, r20
    774e:	69 01       	movw	r12, r18
    7750:	58 01       	movw	r10, r16
    7752:	1c 82       	std	Y+4, r1	; 0x04
    7754:	1b 82       	std	Y+3, r1	; 0x03
    7756:	1a 82       	std	Y+2, r1	; 0x02
    7758:	19 82       	std	Y+1, r1	; 0x01
    775a:	8e 01       	movw	r16, r28
    775c:	0f 5f       	subi	r16, 0xFF	; 255
    775e:	1f 4f       	sbci	r17, 0xFF	; 255
    7760:	9e 01       	movw	r18, r28
    7762:	2d 5f       	subi	r18, 0xFD	; 253
    7764:	3f 4f       	sbci	r19, 0xFF	; 255
    7766:	e8 da       	rcall	.-2608   	; 0x6d38 <_ZN3USB10SetAddressEhhPP6EpInfoRj>
    7768:	18 2f       	mov	r17, r24
    776a:	88 23       	and	r24, r24
    776c:	61 f1       	breq	.+88     	; 0x77c6 <_ZN3USB10inTransferEhhPjPh+0x9e>
    776e:	61 e8       	ldi	r22, 0x81	; 129
    7770:	70 e0       	ldi	r23, 0x00	; 0
    7772:	85 e9       	ldi	r24, 0x95	; 149
    7774:	93 e0       	ldi	r25, 0x03	; 3
    7776:	dc d2       	rcall	.+1464   	; 0x7d30 <_Z8E_NotifyPKci>
    7778:	61 e8       	ldi	r22, 0x81	; 129
    777a:	70 e0       	ldi	r23, 0x00	; 0
    777c:	81 2f       	mov	r24, r17
    777e:	b4 df       	rcall	.-152    	; 0x76e8 <_Z8PrintHexIhEvT_i>
    7780:	61 e8       	ldi	r22, 0x81	; 129
    7782:	70 e0       	ldi	r23, 0x00	; 0
    7784:	82 e9       	ldi	r24, 0x92	; 146
    7786:	93 e0       	ldi	r25, 0x03	; 3
    7788:	d3 d2       	rcall	.+1446   	; 0x7d30 <_Z8E_NotifyPKci>
    778a:	61 e8       	ldi	r22, 0x81	; 129
    778c:	70 e0       	ldi	r23, 0x00	; 0
    778e:	80 e7       	ldi	r24, 0x70	; 112
    7790:	93 e0       	ldi	r25, 0x03	; 3
    7792:	ce d2       	rcall	.+1436   	; 0x7d30 <_Z8E_NotifyPKci>
    7794:	61 e8       	ldi	r22, 0x81	; 129
    7796:	70 e0       	ldi	r23, 0x00	; 0
    7798:	88 2d       	mov	r24, r8
    779a:	a6 df       	rcall	.-180    	; 0x76e8 <_Z8PrintHexIhEvT_i>
    779c:	61 e8       	ldi	r22, 0x81	; 129
    779e:	70 e0       	ldi	r23, 0x00	; 0
    77a0:	8d e6       	ldi	r24, 0x6D	; 109
    77a2:	93 e0       	ldi	r25, 0x03	; 3
    77a4:	c5 d2       	rcall	.+1418   	; 0x7d30 <_Z8E_NotifyPKci>
    77a6:	61 e8       	ldi	r22, 0x81	; 129
    77a8:	70 e0       	ldi	r23, 0x00	; 0
    77aa:	8d e4       	ldi	r24, 0x4D	; 77
    77ac:	93 e0       	ldi	r25, 0x03	; 3
    77ae:	c0 d2       	rcall	.+1408   	; 0x7d30 <_Z8E_NotifyPKci>
    77b0:	61 e8       	ldi	r22, 0x81	; 129
    77b2:	70 e0       	ldi	r23, 0x00	; 0
    77b4:	89 2d       	mov	r24, r9
    77b6:	98 df       	rcall	.-208    	; 0x76e8 <_Z8PrintHexIhEvT_i>
    77b8:	61 e8       	ldi	r22, 0x81	; 129
    77ba:	70 e0       	ldi	r23, 0x00	; 0
    77bc:	8a e4       	ldi	r24, 0x4A	; 74
    77be:	93 e0       	ldi	r25, 0x03	; 3
    77c0:	b7 d2       	rcall	.+1390   	; 0x7d30 <_Z8E_NotifyPKci>
    77c2:	81 2f       	mov	r24, r17
    77c4:	08 c0       	rjmp	.+16     	; 0x77d6 <_ZN3USB10inTransferEhhPjPh+0xae>
    77c6:	49 81       	ldd	r20, Y+1	; 0x01
    77c8:	5a 81       	ldd	r21, Y+2	; 0x02
    77ca:	6b 81       	ldd	r22, Y+3	; 0x03
    77cc:	7c 81       	ldd	r23, Y+4	; 0x04
    77ce:	85 01       	movw	r16, r10
    77d0:	96 01       	movw	r18, r12
    77d2:	c7 01       	movw	r24, r14
    77d4:	56 dd       	rcall	.-1364   	; 0x7282 <_ZN3USB10InTransferEP6EpInfojPjPh>
    77d6:	0f 90       	pop	r0
    77d8:	0f 90       	pop	r0
    77da:	0f 90       	pop	r0
    77dc:	0f 90       	pop	r0
    77de:	df 91       	pop	r29
    77e0:	cf 91       	pop	r28
    77e2:	1f 91       	pop	r17
    77e4:	0f 91       	pop	r16
    77e6:	ff 90       	pop	r15
    77e8:	ef 90       	pop	r14
    77ea:	df 90       	pop	r13
    77ec:	cf 90       	pop	r12
    77ee:	bf 90       	pop	r11
    77f0:	af 90       	pop	r10
    77f2:	9f 90       	pop	r9
    77f4:	8f 90       	pop	r8
    77f6:	08 95       	ret

000077f8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
    77f8:	cf 92       	push	r12
    77fa:	df 92       	push	r13
    77fc:	ff 92       	push	r15
    77fe:	0f 93       	push	r16
    7800:	1f 93       	push	r17
    7802:	cf 93       	push	r28
    7804:	df 93       	push	r29
    7806:	00 d0       	rcall	.+0      	; 0x7808 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x10>
    7808:	cd b7       	in	r28, 0x3d	; 61
    780a:	de b7       	in	r29, 0x3e	; 62
    780c:	6c 01       	movw	r12, r24
    780e:	66 23       	and	r22, r22
    7810:	09 f4       	brne	.+2      	; 0x7814 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x1c>
    7812:	41 c0       	rjmp	.+130    	; 0x7896 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x9e>
    7814:	06 2f       	mov	r16, r22
    7816:	10 e0       	ldi	r17, 0x00	; 0
    7818:	85 e0       	ldi	r24, 0x05	; 5
    781a:	68 9f       	mul	r22, r24
    781c:	b0 01       	movw	r22, r0
    781e:	11 24       	eor	r1, r1
    7820:	f6 01       	movw	r30, r12
    7822:	e6 0f       	add	r30, r22
    7824:	f7 1f       	adc	r31, r23
    7826:	80 85       	ldd	r24, Z+8	; 0x08
    7828:	28 2f       	mov	r18, r24
    782a:	27 70       	andi	r18, 0x07	; 7
    782c:	86 ff       	sbrs	r24, 6
    782e:	19 c0       	rjmp	.+50     	; 0x7862 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x6a>
    7830:	31 e0       	ldi	r19, 0x01	; 1
    7832:	f5 e0       	ldi	r31, 0x05	; 5
    7834:	ff 2e       	mov	r15, r31
    7836:	f6 01       	movw	r30, r12
    7838:	f3 9e       	mul	r15, r19
    783a:	e0 0d       	add	r30, r0
    783c:	f1 1d       	adc	r31, r1
    783e:	11 24       	eor	r1, r1
    7840:	80 85       	ldd	r24, Z+8	; 0x08
    7842:	86 95       	lsr	r24
    7844:	86 95       	lsr	r24
    7846:	86 95       	lsr	r24
    7848:	87 70       	andi	r24, 0x07	; 7
    784a:	82 17       	cp	r24, r18
    784c:	e1 f0       	breq	.+56     	; 0x7886 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8e>
    784e:	3f 5f       	subi	r19, 0xFF	; 255
    7850:	30 31       	cpi	r19, 0x10	; 16
    7852:	88 f3       	brcs	.-30     	; 0x7836 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x3e>
    7854:	f6 01       	movw	r30, r12
    7856:	85 81       	ldd	r24, Z+5	; 0x05
    7858:	82 13       	cpse	r24, r18
    785a:	03 c0       	rjmp	.+6      	; 0x7862 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x6a>
    785c:	21 50       	subi	r18, 0x01	; 1
    785e:	f6 01       	movw	r30, r12
    7860:	25 83       	std	Z+5, r18	; 0x05
    7862:	85 e0       	ldi	r24, 0x05	; 5
    7864:	80 9f       	mul	r24, r16
    7866:	f0 01       	movw	r30, r0
    7868:	81 9f       	mul	r24, r17
    786a:	f0 0d       	add	r31, r0
    786c:	11 24       	eor	r1, r1
    786e:	ec 0d       	add	r30, r12
    7870:	fd 1d       	adc	r31, r13
    7872:	10 86       	std	Z+8, r1	; 0x08
    7874:	81 e0       	ldi	r24, 0x01	; 1
    7876:	81 87       	std	Z+9, r24	; 0x09
    7878:	12 86       	std	Z+10, r1	; 0x0a
    787a:	82 e0       	ldi	r24, 0x02	; 2
    787c:	c8 0e       	add	r12, r24
    787e:	d1 1c       	adc	r13, r1
    7880:	d7 82       	std	Z+7, r13	; 0x07
    7882:	c6 82       	std	Z+6, r12	; 0x06
    7884:	08 c0       	rjmp	.+16     	; 0x7896 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x9e>
    7886:	63 2f       	mov	r22, r19
    7888:	c6 01       	movw	r24, r12
    788a:	2a 83       	std	Y+2, r18	; 0x02
    788c:	39 83       	std	Y+1, r19	; 0x01
    788e:	b4 df       	rcall	.-152    	; 0x77f8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
    7890:	2a 81       	ldd	r18, Y+2	; 0x02
    7892:	39 81       	ldd	r19, Y+1	; 0x01
    7894:	d0 cf       	rjmp	.-96     	; 0x7836 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x3e>
    7896:	0f 90       	pop	r0
    7898:	0f 90       	pop	r0
    789a:	df 91       	pop	r29
    789c:	cf 91       	pop	r28
    789e:	1f 91       	pop	r17
    78a0:	0f 91       	pop	r16
    78a2:	ff 90       	pop	r15
    78a4:	df 90       	pop	r13
    78a6:	cf 90       	pop	r12
    78a8:	08 95       	ret

000078aa <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:
    78aa:	cf 93       	push	r28
    78ac:	df 93       	push	r29
    78ae:	ec 01       	movw	r28, r24
    78b0:	61 34       	cpi	r22, 0x41	; 65
    78b2:	a1 f4       	brne	.+40     	; 0x78dc <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
    78b4:	fc 01       	movw	r30, r24
    78b6:	85 5b       	subi	r24, 0xB5	; 181
    78b8:	9f 4f       	sbci	r25, 0xFF	; 255
    78ba:	41 e0       	ldi	r20, 0x01	; 1
    78bc:	9e 01       	movw	r18, r28
    78be:	2e 5f       	subi	r18, 0xFE	; 254
    78c0:	3f 4f       	sbci	r19, 0xFF	; 255
    78c2:	15 86       	std	Z+13, r1	; 0x0d
    78c4:	46 87       	std	Z+14, r20	; 0x0e
    78c6:	17 86       	std	Z+15, r1	; 0x0f
    78c8:	34 87       	std	Z+12, r19	; 0x0c
    78ca:	23 87       	std	Z+11, r18	; 0x0b
    78cc:	35 96       	adiw	r30, 0x05	; 5
    78ce:	e8 17       	cp	r30, r24
    78d0:	f9 07       	cpc	r31, r25
    78d2:	b9 f7       	brne	.-18     	; 0x78c2 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x18>
    78d4:	1d 82       	std	Y+5, r1	; 0x05
    78d6:	df 91       	pop	r29
    78d8:	cf 91       	pop	r28
    78da:	08 95       	ret
    78dc:	1a d9       	rcall	.-3532   	; 0x6b12 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
    78de:	68 2f       	mov	r22, r24
    78e0:	ce 01       	movw	r24, r28
    78e2:	df 91       	pop	r29
    78e4:	cf 91       	pop	r28
    78e6:	88 cf       	rjmp	.-240    	; 0x77f8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>

000078e8 <_ZN3USB17DefaultAddressingEhhb>:
    78e8:	0f 93       	push	r16
    78ea:	1f 93       	push	r17
    78ec:	cf 93       	push	r28
    78ee:	df 93       	push	r29
    78f0:	ec 01       	movw	r28, r24
    78f2:	02 2f       	mov	r16, r18
    78f4:	ca 3f       	cpi	r28, 0xFA	; 250
    78f6:	8f ef       	ldi	r24, 0xFF	; 255
    78f8:	d8 07       	cpc	r29, r24
    78fa:	11 f4       	brne	.+4      	; 0x7900 <_ZN3USB17DefaultAddressingEhhb+0x18>
    78fc:	86 ed       	ldi	r24, 0xD6	; 214
    78fe:	25 c0       	rjmp	.+74     	; 0x794a <_ZN3USB17DefaultAddressingEhhb+0x62>
    7900:	8e 81       	ldd	r24, Y+6	; 0x06
    7902:	9f 81       	ldd	r25, Y+7	; 0x07
    7904:	89 2b       	or	r24, r25
    7906:	e1 f0       	breq	.+56     	; 0x7940 <_ZN3USB17DefaultAddressingEhhb+0x58>
    7908:	2a 87       	std	Y+10, r18	; 0x0a
    790a:	24 2f       	mov	r18, r20
    790c:	40 e0       	ldi	r20, 0x00	; 0
    790e:	ce 01       	movw	r24, r28
    7910:	12 d9       	rcall	.-3548   	; 0x6b36 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
    7912:	18 2f       	mov	r17, r24
    7914:	88 23       	and	r24, r24
    7916:	b1 f0       	breq	.+44     	; 0x7944 <_ZN3USB17DefaultAddressingEhhb+0x5c>
    7918:	68 2f       	mov	r22, r24
    791a:	ce 01       	movw	r24, r28
    791c:	7f d9       	rcall	.-3330   	; 0x6c1c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
    791e:	00 97       	sbiw	r24, 0x00	; 0
    7920:	69 f3       	breq	.-38     	; 0x78fc <_ZN3USB17DefaultAddressingEhhb+0x14>
    7922:	fc 01       	movw	r30, r24
    7924:	04 83       	std	Z+4, r16	; 0x04
    7926:	21 2f       	mov	r18, r17
    7928:	40 e0       	ldi	r20, 0x00	; 0
    792a:	60 e0       	ldi	r22, 0x00	; 0
    792c:	ce 01       	movw	r24, r28
    792e:	8a de       	rcall	.-748    	; 0x7644 <_ZN3USB7setAddrEhhh>
    7930:	08 2f       	mov	r16, r24
    7932:	88 23       	and	r24, r24
    7934:	49 f0       	breq	.+18     	; 0x7948 <_ZN3USB17DefaultAddressingEhhb+0x60>
    7936:	61 2f       	mov	r22, r17
    7938:	ce 01       	movw	r24, r28
    793a:	b7 df       	rcall	.-146    	; 0x78aa <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
    793c:	80 2f       	mov	r24, r16
    793e:	05 c0       	rjmp	.+10     	; 0x794a <_ZN3USB17DefaultAddressingEhhb+0x62>
    7940:	87 ed       	ldi	r24, 0xD7	; 215
    7942:	03 c0       	rjmp	.+6      	; 0x794a <_ZN3USB17DefaultAddressingEhhb+0x62>
    7944:	84 ed       	ldi	r24, 0xD4	; 212
    7946:	01 c0       	rjmp	.+2      	; 0x794a <_ZN3USB17DefaultAddressingEhhb+0x62>
    7948:	80 e0       	ldi	r24, 0x00	; 0
    794a:	df 91       	pop	r29
    794c:	cf 91       	pop	r28
    794e:	1f 91       	pop	r17
    7950:	0f 91       	pop	r16
    7952:	08 95       	ret

00007954 <_ZN3USB11ConfiguringEhhb>:
    7954:	3f 92       	push	r3
    7956:	4f 92       	push	r4
    7958:	5f 92       	push	r5
    795a:	6f 92       	push	r6
    795c:	7f 92       	push	r7
    795e:	8f 92       	push	r8
    7960:	9f 92       	push	r9
    7962:	af 92       	push	r10
    7964:	bf 92       	push	r11
    7966:	cf 92       	push	r12
    7968:	df 92       	push	r13
    796a:	ef 92       	push	r14
    796c:	ff 92       	push	r15
    796e:	0f 93       	push	r16
    7970:	1f 93       	push	r17
    7972:	cf 93       	push	r28
    7974:	df 93       	push	r29
    7976:	cd b7       	in	r28, 0x3d	; 61
    7978:	de b7       	in	r29, 0x3e	; 62
    797a:	65 97       	sbiw	r28, 0x15	; 21
    797c:	0f b6       	in	r0, 0x3f	; 63
    797e:	f8 94       	cli
    7980:	de bf       	out	0x3e, r29	; 62
    7982:	0f be       	out	0x3f, r0	; 63
    7984:	cd bf       	out	0x3d, r28	; 61
    7986:	7c 01       	movw	r14, r24
    7988:	66 2e       	mov	r6, r22
    798a:	54 2e       	mov	r5, r20
    798c:	72 2e       	mov	r7, r18
    798e:	1b 8a       	std	Y+19, r1	; 0x13
    7990:	88 e0       	ldi	r24, 0x08	; 8
    7992:	8c 8b       	std	Y+20, r24	; 0x14
    7994:	8c e3       	ldi	r24, 0x3C	; 60
    7996:	8d 8b       	std	Y+21, r24	; 0x15
    7998:	d7 01       	movw	r26, r14
    799a:	ed 91       	ld	r30, X+
    799c:	fc 91       	ld	r31, X
    799e:	01 90       	ld	r0, Z+
    79a0:	f0 81       	ld	r31, Z
    79a2:	e0 2d       	mov	r30, r0
    79a4:	60 e0       	ldi	r22, 0x00	; 0
    79a6:	c7 01       	movw	r24, r14
    79a8:	09 95       	icall
    79aa:	6c 01       	movw	r12, r24
    79ac:	00 97       	sbiw	r24, 0x00	; 0
    79ae:	09 f4       	brne	.+2      	; 0x79b2 <_ZN3USB11ConfiguringEhhb+0x5e>
    79b0:	8d c0       	rjmp	.+282    	; 0x7acc <_ZN3USB11ConfiguringEhhb+0x178>
    79b2:	fc 01       	movw	r30, r24
    79b4:	a0 80       	ld	r10, Z
    79b6:	b1 80       	ldd	r11, Z+1	; 0x01
    79b8:	ce 01       	movw	r24, r28
    79ba:	43 96       	adiw	r24, 0x13	; 19
    79bc:	91 83       	std	Z+1, r25	; 0x01
    79be:	80 83       	st	Z, r24
    79c0:	74 82       	std	Z+4, r7	; 0x04
    79c2:	8e 01       	movw	r16, r28
    79c4:	0f 5f       	subi	r16, 0xFF	; 255
    79c6:	1f 4f       	sbci	r17, 0xFF	; 255
    79c8:	22 e1       	ldi	r18, 0x12	; 18
    79ca:	30 e0       	ldi	r19, 0x00	; 0
    79cc:	40 e0       	ldi	r20, 0x00	; 0
    79ce:	60 e0       	ldi	r22, 0x00	; 0
    79d0:	c7 01       	movw	r24, r14
    79d2:	ec dd       	rcall	.-1064   	; 0x75ac <_ZN3USB11getDevDescrEhhjPh>
    79d4:	d6 01       	movw	r26, r12
    79d6:	ad 92       	st	X+, r10
    79d8:	bc 92       	st	X, r11
    79da:	81 11       	cpse	r24, r1
    79dc:	8d c0       	rjmp	.+282    	; 0x7af8 <_ZN3USB11ConfiguringEhhb+0x1a4>
    79de:	a9 84       	ldd	r10, Y+9	; 0x09
    79e0:	ba 84       	ldd	r11, Y+10	; 0x0a
    79e2:	8b 84       	ldd	r8, Y+11	; 0x0b
    79e4:	9c 84       	ldd	r9, Y+12	; 0x0c
    79e6:	4d 80       	ldd	r4, Y+5	; 0x05
    79e8:	67 01       	movw	r12, r14
    79ea:	31 2c       	mov	r3, r1
    79ec:	86 01       	movw	r16, r12
    79ee:	0a 5a       	subi	r16, 0xAA	; 170
    79f0:	1f 4f       	sbci	r17, 0xFF	; 255
    79f2:	f8 01       	movw	r30, r16
    79f4:	80 81       	ld	r24, Z
    79f6:	91 81       	ldd	r25, Z+1	; 0x01
    79f8:	00 97       	sbiw	r24, 0x00	; 0
    79fa:	51 f4       	brne	.+20     	; 0x7a10 <_ZN3USB11ConfiguringEhhb+0xbc>
    79fc:	33 94       	inc	r3
    79fe:	f2 e0       	ldi	r31, 0x02	; 2
    7a00:	cf 0e       	add	r12, r31
    7a02:	d1 1c       	adc	r13, r1
    7a04:	80 e1       	ldi	r24, 0x10	; 16
    7a06:	38 12       	cpse	r3, r24
    7a08:	f1 cf       	rjmp	.-30     	; 0x79ec <_ZN3USB11ConfiguringEhhb+0x98>
    7a0a:	67 01       	movw	r12, r14
    7a0c:	31 2c       	mov	r3, r1
    7a0e:	25 c0       	rjmp	.+74     	; 0x7a5a <_ZN3USB11ConfiguringEhhb+0x106>
    7a10:	dc 01       	movw	r26, r24
    7a12:	ed 91       	ld	r30, X+
    7a14:	fc 91       	ld	r31, X
    7a16:	00 84       	ldd	r0, Z+8	; 0x08
    7a18:	f1 85       	ldd	r31, Z+9	; 0x09
    7a1a:	e0 2d       	mov	r30, r0
    7a1c:	09 95       	icall
    7a1e:	81 11       	cpse	r24, r1
    7a20:	ed cf       	rjmp	.-38     	; 0x79fc <_ZN3USB11ConfiguringEhhb+0xa8>
    7a22:	f8 01       	movw	r30, r16
    7a24:	80 81       	ld	r24, Z
    7a26:	91 81       	ldd	r25, Z+1	; 0x01
    7a28:	dc 01       	movw	r26, r24
    7a2a:	ed 91       	ld	r30, X+
    7a2c:	fc 91       	ld	r31, X
    7a2e:	04 84       	ldd	r0, Z+12	; 0x0c
    7a30:	f5 85       	ldd	r31, Z+13	; 0x0d
    7a32:	e0 2d       	mov	r30, r0
    7a34:	a4 01       	movw	r20, r8
    7a36:	b5 01       	movw	r22, r10
    7a38:	09 95       	icall
    7a3a:	81 11       	cpse	r24, r1
    7a3c:	49 c0       	rjmp	.+146    	; 0x7ad0 <_ZN3USB11ConfiguringEhhb+0x17c>
    7a3e:	f8 01       	movw	r30, r16
    7a40:	80 81       	ld	r24, Z
    7a42:	91 81       	ldd	r25, Z+1	; 0x01
    7a44:	dc 01       	movw	r26, r24
    7a46:	ed 91       	ld	r30, X+
    7a48:	fc 91       	ld	r31, X
    7a4a:	06 84       	ldd	r0, Z+14	; 0x0e
    7a4c:	f7 85       	ldd	r31, Z+15	; 0x0f
    7a4e:	e0 2d       	mov	r30, r0
    7a50:	64 2d       	mov	r22, r4
    7a52:	09 95       	icall
    7a54:	81 11       	cpse	r24, r1
    7a56:	3c c0       	rjmp	.+120    	; 0x7ad0 <_ZN3USB11ConfiguringEhhb+0x17c>
    7a58:	d1 cf       	rjmp	.-94     	; 0x79fc <_ZN3USB11ConfiguringEhhb+0xa8>
    7a5a:	86 01       	movw	r16, r12
    7a5c:	0a 5a       	subi	r16, 0xAA	; 170
    7a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    7a60:	f8 01       	movw	r30, r16
    7a62:	80 81       	ld	r24, Z
    7a64:	91 81       	ldd	r25, Z+1	; 0x01
    7a66:	00 97       	sbiw	r24, 0x00	; 0
    7a68:	21 f1       	breq	.+72     	; 0x7ab2 <_ZN3USB11ConfiguringEhhb+0x15e>
    7a6a:	dc 01       	movw	r26, r24
    7a6c:	ed 91       	ld	r30, X+
    7a6e:	fc 91       	ld	r31, X
    7a70:	00 84       	ldd	r0, Z+8	; 0x08
    7a72:	f1 85       	ldd	r31, Z+9	; 0x09
    7a74:	e0 2d       	mov	r30, r0
    7a76:	09 95       	icall
    7a78:	81 11       	cpse	r24, r1
    7a7a:	1b c0       	rjmp	.+54     	; 0x7ab2 <_ZN3USB11ConfiguringEhhb+0x15e>
    7a7c:	f8 01       	movw	r30, r16
    7a7e:	80 81       	ld	r24, Z
    7a80:	91 81       	ldd	r25, Z+1	; 0x01
    7a82:	dc 01       	movw	r26, r24
    7a84:	ed 91       	ld	r30, X+
    7a86:	fc 91       	ld	r31, X
    7a88:	04 84       	ldd	r0, Z+12	; 0x0c
    7a8a:	f5 85       	ldd	r31, Z+13	; 0x0d
    7a8c:	e0 2d       	mov	r30, r0
    7a8e:	a4 01       	movw	r20, r8
    7a90:	b5 01       	movw	r22, r10
    7a92:	09 95       	icall
    7a94:	81 11       	cpse	r24, r1
    7a96:	0d c0       	rjmp	.+26     	; 0x7ab2 <_ZN3USB11ConfiguringEhhb+0x15e>
    7a98:	f8 01       	movw	r30, r16
    7a9a:	80 81       	ld	r24, Z
    7a9c:	91 81       	ldd	r25, Z+1	; 0x01
    7a9e:	dc 01       	movw	r26, r24
    7aa0:	ed 91       	ld	r30, X+
    7aa2:	fc 91       	ld	r31, X
    7aa4:	06 84       	ldd	r0, Z+14	; 0x0e
    7aa6:	f7 85       	ldd	r31, Z+15	; 0x0f
    7aa8:	e0 2d       	mov	r30, r0
    7aaa:	64 2d       	mov	r22, r4
    7aac:	09 95       	icall
    7aae:	88 23       	and	r24, r24
    7ab0:	c9 f0       	breq	.+50     	; 0x7ae4 <_ZN3USB11ConfiguringEhhb+0x190>
    7ab2:	33 94       	inc	r3
    7ab4:	b2 e0       	ldi	r27, 0x02	; 2
    7ab6:	cb 0e       	add	r12, r27
    7ab8:	d1 1c       	adc	r13, r1
    7aba:	e0 e1       	ldi	r30, 0x10	; 16
    7abc:	3e 12       	cpse	r3, r30
    7abe:	cd cf       	rjmp	.-102    	; 0x7a5a <_ZN3USB11ConfiguringEhhb+0x106>
    7ac0:	27 2d       	mov	r18, r7
    7ac2:	45 2d       	mov	r20, r5
    7ac4:	66 2d       	mov	r22, r6
    7ac6:	c7 01       	movw	r24, r14
    7ac8:	0f df       	rcall	.-482    	; 0x78e8 <_ZN3USB17DefaultAddressingEhhb>
    7aca:	16 c0       	rjmp	.+44     	; 0x7af8 <_ZN3USB11ConfiguringEhhb+0x1a4>
    7acc:	86 ed       	ldi	r24, 0xD6	; 214
    7ace:	14 c0       	rjmp	.+40     	; 0x7af8 <_ZN3USB11ConfiguringEhhb+0x1a4>
    7ad0:	07 2d       	mov	r16, r7
    7ad2:	25 2d       	mov	r18, r5
    7ad4:	46 2d       	mov	r20, r6
    7ad6:	63 2d       	mov	r22, r3
    7ad8:	c7 01       	movw	r24, r14
    7ada:	f9 d9       	rcall	.-3086   	; 0x6ece <_ZN3USB13AttemptConfigEhhhb>
    7adc:	81 3d       	cpi	r24, 0xD1	; 209
    7ade:	09 f4       	brne	.+2      	; 0x7ae2 <_ZN3USB11ConfiguringEhhb+0x18e>
    7ae0:	8d cf       	rjmp	.-230    	; 0x79fc <_ZN3USB11ConfiguringEhhb+0xa8>
    7ae2:	0a c0       	rjmp	.+20     	; 0x7af8 <_ZN3USB11ConfiguringEhhb+0x1a4>
    7ae4:	07 2d       	mov	r16, r7
    7ae6:	25 2d       	mov	r18, r5
    7ae8:	46 2d       	mov	r20, r6
    7aea:	63 2d       	mov	r22, r3
    7aec:	c7 01       	movw	r24, r14
    7aee:	ef d9       	rcall	.-3106   	; 0x6ece <_ZN3USB13AttemptConfigEhhhb>
    7af0:	98 2f       	mov	r25, r24
    7af2:	97 7f       	andi	r25, 0xF7	; 247
    7af4:	91 3d       	cpi	r25, 0xD1	; 209
    7af6:	e9 f2       	breq	.-70     	; 0x7ab2 <_ZN3USB11ConfiguringEhhb+0x15e>
    7af8:	65 96       	adiw	r28, 0x15	; 21
    7afa:	0f b6       	in	r0, 0x3f	; 63
    7afc:	f8 94       	cli
    7afe:	de bf       	out	0x3e, r29	; 62
    7b00:	0f be       	out	0x3f, r0	; 63
    7b02:	cd bf       	out	0x3d, r28	; 61
    7b04:	df 91       	pop	r29
    7b06:	cf 91       	pop	r28
    7b08:	1f 91       	pop	r17
    7b0a:	0f 91       	pop	r16
    7b0c:	ff 90       	pop	r15
    7b0e:	ef 90       	pop	r14
    7b10:	df 90       	pop	r13
    7b12:	cf 90       	pop	r12
    7b14:	bf 90       	pop	r11
    7b16:	af 90       	pop	r10
    7b18:	9f 90       	pop	r9
    7b1a:	8f 90       	pop	r8
    7b1c:	7f 90       	pop	r7
    7b1e:	6f 90       	pop	r6
    7b20:	5f 90       	pop	r5
    7b22:	4f 90       	pop	r4
    7b24:	3f 90       	pop	r3
    7b26:	08 95       	ret

00007b28 <_ZN3USB4TaskEv>:
    7b28:	cf 92       	push	r12
    7b2a:	df 92       	push	r13
    7b2c:	ef 92       	push	r14
    7b2e:	ff 92       	push	r15
    7b30:	1f 93       	push	r17
    7b32:	cf 93       	push	r28
    7b34:	df 93       	push	r29
    7b36:	ec 01       	movw	r28, r24
    7b38:	19 99       	sbic	0x03, 1	; 3
    7b3a:	0c c0       	rjmp	.+24     	; 0x7b54 <_ZN3USB4TaskEv+0x2c>
    7b3c:	88 ec       	ldi	r24, 0xC8	; 200
    7b3e:	ca d8       	rcall	.-3692   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    7b40:	85 ff       	sbrs	r24, 5
    7b42:	05 c0       	rjmp	.+10     	; 0x7b4e <_ZN3USB4TaskEv+0x26>
    7b44:	ce 01       	movw	r24, r28
    7b46:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE8busprobeEv>
    7b4a:	60 e2       	ldi	r22, 0x20	; 32
    7b4c:	01 c0       	rjmp	.+2      	; 0x7b50 <_ZN3USB4TaskEv+0x28>
    7b4e:	60 e0       	ldi	r22, 0x00	; 0
    7b50:	88 ec       	ldi	r24, 0xC8	; 200
    7b52:	d8 d8       	rcall	.-3664   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    7b54:	80 91 b3 03 	lds	r24, 0x03B3
    7b58:	81 30       	cpi	r24, 0x01	; 1
    7b5a:	49 f0       	breq	.+18     	; 0x7b6e <_ZN3USB4TaskEv+0x46>
    7b5c:	50 f0       	brcs	.+20     	; 0x7b72 <_ZN3USB4TaskEv+0x4a>
    7b5e:	82 30       	cpi	r24, 0x02	; 2
    7b60:	21 f0       	breq	.+8      	; 0x7b6a <_ZN3USB4TaskEv+0x42>
    7b62:	83 30       	cpi	r24, 0x03	; 3
    7b64:	31 f5       	brne	.+76     	; 0x7bb2 <_ZN3USB4TaskEv+0x8a>
    7b66:	11 e0       	ldi	r17, 0x01	; 1
    7b68:	0d c0       	rjmp	.+26     	; 0x7b84 <_ZN3USB4TaskEv+0x5c>
    7b6a:	10 e0       	ldi	r17, 0x00	; 0
    7b6c:	0b c0       	rjmp	.+22     	; 0x7b84 <_ZN3USB4TaskEv+0x5c>
    7b6e:	83 e1       	ldi	r24, 0x13	; 19
    7b70:	06 c0       	rjmp	.+12     	; 0x7b7e <_ZN3USB4TaskEv+0x56>
    7b72:	80 91 2b 05 	lds	r24, 0x052B
    7b76:	80 7f       	andi	r24, 0xF0	; 240
    7b78:	80 31       	cpi	r24, 0x10	; 16
    7b7a:	d9 f0       	breq	.+54     	; 0x7bb2 <_ZN3USB4TaskEv+0x8a>
    7b7c:	81 e1       	ldi	r24, 0x11	; 17
    7b7e:	80 93 2b 05 	sts	0x052B, r24
    7b82:	17 c0       	rjmp	.+46     	; 0x7bb2 <_ZN3USB4TaskEv+0x8a>
    7b84:	80 91 2b 05 	lds	r24, 0x052B
    7b88:	80 7f       	andi	r24, 0xF0	; 240
    7b8a:	80 31       	cpi	r24, 0x10	; 16
    7b8c:	99 f4       	brne	.+38     	; 0x7bb4 <_ZN3USB4TaskEv+0x8c>
    7b8e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    7b92:	68 53       	subi	r22, 0x38	; 56
    7b94:	7f 4f       	sbci	r23, 0xFF	; 255
    7b96:	8f 4f       	sbci	r24, 0xFF	; 255
    7b98:	9f 4f       	sbci	r25, 0xFF	; 255
    7b9a:	60 93 27 05 	sts	0x0527, r22
    7b9e:	70 93 28 05 	sts	0x0528, r23
    7ba2:	80 93 29 05 	sts	0x0529, r24
    7ba6:	90 93 2a 05 	sts	0x052A, r25
    7baa:	80 e2       	ldi	r24, 0x20	; 32
    7bac:	80 93 2b 05 	sts	0x052B, r24
    7bb0:	01 c0       	rjmp	.+2      	; 0x7bb4 <_ZN3USB4TaskEv+0x8c>
    7bb2:	10 e0       	ldi	r17, 0x00	; 0
    7bb4:	e1 2c       	mov	r14, r1
    7bb6:	f1 2c       	mov	r15, r1
    7bb8:	fe 01       	movw	r30, r28
    7bba:	ee 0d       	add	r30, r14
    7bbc:	ff 1d       	adc	r31, r15
    7bbe:	ea 5a       	subi	r30, 0xAA	; 170
    7bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    7bc2:	80 81       	ld	r24, Z
    7bc4:	91 81       	ldd	r25, Z+1	; 0x01
    7bc6:	00 97       	sbiw	r24, 0x00	; 0
    7bc8:	39 f0       	breq	.+14     	; 0x7bd8 <_ZN3USB4TaskEv+0xb0>
    7bca:	dc 01       	movw	r26, r24
    7bcc:	ed 91       	ld	r30, X+
    7bce:	fc 91       	ld	r31, X
    7bd0:	06 80       	ldd	r0, Z+6	; 0x06
    7bd2:	f7 81       	ldd	r31, Z+7	; 0x07
    7bd4:	e0 2d       	mov	r30, r0
    7bd6:	09 95       	icall
    7bd8:	b2 e0       	ldi	r27, 0x02	; 2
    7bda:	eb 0e       	add	r14, r27
    7bdc:	f1 1c       	adc	r15, r1
    7bde:	80 e2       	ldi	r24, 0x20	; 32
    7be0:	e8 16       	cp	r14, r24
    7be2:	f1 04       	cpc	r15, r1
    7be4:	49 f7       	brne	.-46     	; 0x7bb8 <_ZN3USB4TaskEv+0x90>
    7be6:	80 91 2b 05 	lds	r24, 0x052B
    7bea:	80 34       	cpi	r24, 0x40	; 64
    7bec:	09 f4       	brne	.+2      	; 0x7bf0 <_ZN3USB4TaskEv+0xc8>
    7bee:	47 c0       	rjmp	.+142    	; 0x7c7e <_ZN3USB4TaskEv+0x156>
    7bf0:	70 f4       	brcc	.+28     	; 0x7c0e <_ZN3USB4TaskEv+0xe6>
    7bf2:	80 32       	cpi	r24, 0x20	; 32
    7bf4:	79 f1       	breq	.+94     	; 0x7c54 <_ZN3USB4TaskEv+0x12c>
    7bf6:	80 33       	cpi	r24, 0x30	; 48
    7bf8:	e9 f1       	breq	.+122    	; 0x7c74 <_ZN3USB4TaskEv+0x14c>
    7bfa:	81 31       	cpi	r24, 0x11	; 17
    7bfc:	09 f0       	breq	.+2      	; 0x7c00 <_ZN3USB4TaskEv+0xd8>
    7bfe:	83 c0       	rjmp	.+262    	; 0x7d06 <_ZN3USB4TaskEv+0x1de>
    7c00:	fe 01       	movw	r30, r28
    7c02:	ea 58       	subi	r30, 0x8A	; 138
    7c04:	ff 4f       	sbci	r31, 0xFF	; 255
    7c06:	10 82       	st	Z, r1
    7c08:	e1 2c       	mov	r14, r1
    7c0a:	f1 2c       	mov	r15, r1
    7c0c:	0a c0       	rjmp	.+20     	; 0x7c22 <_ZN3USB4TaskEv+0xfa>
    7c0e:	81 35       	cpi	r24, 0x51	; 81
    7c10:	09 f4       	brne	.+2      	; 0x7c14 <_ZN3USB4TaskEv+0xec>
    7c12:	57 c0       	rjmp	.+174    	; 0x7cc2 <_ZN3USB4TaskEv+0x19a>
    7c14:	80 38       	cpi	r24, 0x80	; 128
    7c16:	09 f4       	brne	.+2      	; 0x7c1a <_ZN3USB4TaskEv+0xf2>
    7c18:	66 c0       	rjmp	.+204    	; 0x7ce6 <_ZN3USB4TaskEv+0x1be>
    7c1a:	80 35       	cpi	r24, 0x50	; 80
    7c1c:	09 f0       	breq	.+2      	; 0x7c20 <_ZN3USB4TaskEv+0xf8>
    7c1e:	73 c0       	rjmp	.+230    	; 0x7d06 <_ZN3USB4TaskEv+0x1de>
    7c20:	3a c0       	rjmp	.+116    	; 0x7c96 <_ZN3USB4TaskEv+0x16e>
    7c22:	fe 01       	movw	r30, r28
    7c24:	ee 0d       	add	r30, r14
    7c26:	ff 1d       	adc	r31, r15
    7c28:	ea 5a       	subi	r30, 0xAA	; 170
    7c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    7c2c:	80 81       	ld	r24, Z
    7c2e:	91 81       	ldd	r25, Z+1	; 0x01
    7c30:	00 97       	sbiw	r24, 0x00	; 0
    7c32:	39 f0       	breq	.+14     	; 0x7c42 <_ZN3USB4TaskEv+0x11a>
    7c34:	dc 01       	movw	r26, r24
    7c36:	ed 91       	ld	r30, X+
    7c38:	fc 91       	ld	r31, X
    7c3a:	04 80       	ldd	r0, Z+4	; 0x04
    7c3c:	f5 81       	ldd	r31, Z+5	; 0x05
    7c3e:	e0 2d       	mov	r30, r0
    7c40:	09 95       	icall
    7c42:	b2 e0       	ldi	r27, 0x02	; 2
    7c44:	eb 0e       	add	r14, r27
    7c46:	f1 1c       	adc	r15, r1
    7c48:	80 e2       	ldi	r24, 0x20	; 32
    7c4a:	e8 16       	cp	r14, r24
    7c4c:	f1 04       	cpc	r15, r1
    7c4e:	49 f7       	brne	.-46     	; 0x7c22 <_ZN3USB4TaskEv+0xfa>
    7c50:	82 e1       	ldi	r24, 0x12	; 18
    7c52:	57 c0       	rjmp	.+174    	; 0x7d02 <_ZN3USB4TaskEv+0x1da>
    7c54:	c0 90 27 05 	lds	r12, 0x0527
    7c58:	d0 90 28 05 	lds	r13, 0x0528
    7c5c:	e0 90 29 05 	lds	r14, 0x0529
    7c60:	f0 90 2a 05 	lds	r15, 0x052A
    7c64:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    7c68:	c6 16       	cp	r12, r22
    7c6a:	d7 06       	cpc	r13, r23
    7c6c:	e8 06       	cpc	r14, r24
    7c6e:	f9 06       	cpc	r15, r25
    7c70:	08 f0       	brcs	.+2      	; 0x7c74 <_ZN3USB4TaskEv+0x14c>
    7c72:	49 c0       	rjmp	.+146    	; 0x7d06 <_ZN3USB4TaskEv+0x1de>
    7c74:	61 e0       	ldi	r22, 0x01	; 1
    7c76:	88 ee       	ldi	r24, 0xE8	; 232
    7c78:	45 d8       	rcall	.-3958   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    7c7a:	80 e4       	ldi	r24, 0x40	; 64
    7c7c:	42 c0       	rjmp	.+132    	; 0x7d02 <_ZN3USB4TaskEv+0x1da>
    7c7e:	88 ee       	ldi	r24, 0xE8	; 232
    7c80:	29 d8       	rcall	.-4014   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    7c82:	80 fd       	sbrc	r24, 0
    7c84:	40 c0       	rjmp	.+128    	; 0x7d06 <_ZN3USB4TaskEv+0x1de>
    7c86:	88 ed       	ldi	r24, 0xD8	; 216
    7c88:	25 d8       	rcall	.-4022   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    7c8a:	68 2f       	mov	r22, r24
    7c8c:	68 60       	ori	r22, 0x08	; 8
    7c8e:	88 ed       	ldi	r24, 0xD8	; 216
    7c90:	39 d8       	rcall	.-3982   	; 0x6d04 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regWrEhh.isra.3>
    7c92:	80 e5       	ldi	r24, 0x50	; 80
    7c94:	36 c0       	rjmp	.+108    	; 0x7d02 <_ZN3USB4TaskEv+0x1da>
    7c96:	88 ec       	ldi	r24, 0xC8	; 200
    7c98:	1d d8       	rcall	.-4038   	; 0x6cd4 <_ZN8MAX3421eI4TPinI5PortbLh2EES0_IS1_Lh1EEE5regRdEh.isra.2>
    7c9a:	86 ff       	sbrs	r24, 6
    7c9c:	34 c0       	rjmp	.+104    	; 0x7d06 <_ZN3USB4TaskEv+0x1de>
    7c9e:	81 e5       	ldi	r24, 0x51	; 81
    7ca0:	80 93 2b 05 	sts	0x052B, r24
    7ca4:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    7ca8:	6c 5e       	subi	r22, 0xEC	; 236
    7caa:	7f 4f       	sbci	r23, 0xFF	; 255
    7cac:	8f 4f       	sbci	r24, 0xFF	; 255
    7cae:	9f 4f       	sbci	r25, 0xFF	; 255
    7cb0:	60 93 27 05 	sts	0x0527, r22
    7cb4:	70 93 28 05 	sts	0x0528, r23
    7cb8:	80 93 29 05 	sts	0x0529, r24
    7cbc:	90 93 2a 05 	sts	0x052A, r25
    7cc0:	22 c0       	rjmp	.+68     	; 0x7d06 <_ZN3USB4TaskEv+0x1de>
    7cc2:	c0 90 27 05 	lds	r12, 0x0527
    7cc6:	d0 90 28 05 	lds	r13, 0x0528
    7cca:	e0 90 29 05 	lds	r14, 0x0529
    7cce:	f0 90 2a 05 	lds	r15, 0x052A
    7cd2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <millis>
    7cd6:	c6 16       	cp	r12, r22
    7cd8:	d7 06       	cpc	r13, r23
    7cda:	e8 06       	cpc	r14, r24
    7cdc:	f9 06       	cpc	r15, r25
    7cde:	98 f4       	brcc	.+38     	; 0x7d06 <_ZN3USB4TaskEv+0x1de>
    7ce0:	80 e8       	ldi	r24, 0x80	; 128
    7ce2:	80 93 2b 05 	sts	0x052B, r24
    7ce6:	21 2f       	mov	r18, r17
    7ce8:	40 e0       	ldi	r20, 0x00	; 0
    7cea:	60 e0       	ldi	r22, 0x00	; 0
    7cec:	ce 01       	movw	r24, r28
    7cee:	32 de       	rcall	.-924    	; 0x7954 <_ZN3USB11ConfiguringEhhb>
    7cf0:	88 23       	and	r24, r24
    7cf2:	31 f0       	breq	.+12     	; 0x7d00 <_ZN3USB4TaskEv+0x1d8>
    7cf4:	82 3d       	cpi	r24, 0xD2	; 210
    7cf6:	39 f0       	breq	.+14     	; 0x7d06 <_ZN3USB4TaskEv+0x1de>
    7cf8:	80 93 2c 05 	sts	0x052C, r24
    7cfc:	80 ea       	ldi	r24, 0xA0	; 160
    7cfe:	01 c0       	rjmp	.+2      	; 0x7d02 <_ZN3USB4TaskEv+0x1da>
    7d00:	80 e9       	ldi	r24, 0x90	; 144
    7d02:	80 93 2b 05 	sts	0x052B, r24
    7d06:	df 91       	pop	r29
    7d08:	cf 91       	pop	r28
    7d0a:	1f 91       	pop	r17
    7d0c:	ff 90       	pop	r15
    7d0e:	ef 90       	pop	r14
    7d10:	df 90       	pop	r13
    7d12:	cf 90       	pop	r12
    7d14:	08 95       	ret

00007d16 <_Z9E_Notifycci>:
    7d16:	40 91 18 01 	lds	r20, 0x0118
    7d1a:	50 91 19 01 	lds	r21, 0x0119
    7d1e:	46 17       	cp	r20, r22
    7d20:	57 07       	cpc	r21, r23
    7d22:	2c f0       	brlt	.+10     	; 0x7d2e <_Z9E_Notifycci+0x18>
    7d24:	68 2f       	mov	r22, r24
    7d26:	84 e7       	ldi	r24, 0x74	; 116
    7d28:	94 e0       	ldi	r25, 0x04	; 4
    7d2a:	0c 94 80 2b 	jmp	0x5700	; 0x5700 <_ZN5Print5printEc>
    7d2e:	08 95       	ret

00007d30 <_Z8E_NotifyPKci>:
    7d30:	0f 93       	push	r16
    7d32:	1f 93       	push	r17
    7d34:	cf 93       	push	r28
    7d36:	df 93       	push	r29
    7d38:	eb 01       	movw	r28, r22
    7d3a:	20 91 18 01 	lds	r18, 0x0118
    7d3e:	30 91 19 01 	lds	r19, 0x0119
    7d42:	26 17       	cp	r18, r22
    7d44:	37 07       	cpc	r19, r23
    7d46:	6c f0       	brlt	.+26     	; 0x7d62 <_Z8E_NotifyPKci+0x32>
    7d48:	00 97       	sbiw	r24, 0x00	; 0
    7d4a:	59 f0       	breq	.+22     	; 0x7d62 <_Z8E_NotifyPKci+0x32>
    7d4c:	fc 01       	movw	r30, r24
    7d4e:	84 91       	lpm	r24, Z
    7d50:	8f 01       	movw	r16, r30
    7d52:	0f 5f       	subi	r16, 0xFF	; 255
    7d54:	1f 4f       	sbci	r17, 0xFF	; 255
    7d56:	88 23       	and	r24, r24
    7d58:	21 f0       	breq	.+8      	; 0x7d62 <_Z8E_NotifyPKci+0x32>
    7d5a:	be 01       	movw	r22, r28
    7d5c:	dc df       	rcall	.-72     	; 0x7d16 <_Z9E_Notifycci>
    7d5e:	f8 01       	movw	r30, r16
    7d60:	f6 cf       	rjmp	.-20     	; 0x7d4e <_Z8E_NotifyPKci+0x1e>
    7d62:	df 91       	pop	r29
    7d64:	cf 91       	pop	r28
    7d66:	1f 91       	pop	r17
    7d68:	0f 91       	pop	r16
    7d6a:	08 95       	ret

00007d6c <__divmodhi4>:
    7d6c:	97 fb       	bst	r25, 7
    7d6e:	07 2e       	mov	r0, r23
    7d70:	16 f4       	brtc	.+4      	; 0x7d76 <__divmodhi4+0xa>
    7d72:	00 94       	com	r0
    7d74:	06 d0       	rcall	.+12     	; 0x7d82 <__divmodhi4_neg1>
    7d76:	77 fd       	sbrc	r23, 7
    7d78:	08 d0       	rcall	.+16     	; 0x7d8a <__divmodhi4_neg2>
    7d7a:	3d d0       	rcall	.+122    	; 0x7df6 <__udivmodhi4>
    7d7c:	07 fc       	sbrc	r0, 7
    7d7e:	05 d0       	rcall	.+10     	; 0x7d8a <__divmodhi4_neg2>
    7d80:	3e f4       	brtc	.+14     	; 0x7d90 <__divmodhi4_exit>

00007d82 <__divmodhi4_neg1>:
    7d82:	90 95       	com	r25
    7d84:	81 95       	neg	r24
    7d86:	9f 4f       	sbci	r25, 0xFF	; 255
    7d88:	08 95       	ret

00007d8a <__divmodhi4_neg2>:
    7d8a:	70 95       	com	r23
    7d8c:	61 95       	neg	r22
    7d8e:	7f 4f       	sbci	r23, 0xFF	; 255

00007d90 <__divmodhi4_exit>:
    7d90:	08 95       	ret

00007d92 <__udivmodsi4>:
    7d92:	a1 e2       	ldi	r26, 0x21	; 33
    7d94:	1a 2e       	mov	r1, r26
    7d96:	aa 1b       	sub	r26, r26
    7d98:	bb 1b       	sub	r27, r27
    7d9a:	fd 01       	movw	r30, r26
    7d9c:	0d c0       	rjmp	.+26     	; 0x7db8 <__udivmodsi4_ep>

00007d9e <__udivmodsi4_loop>:
    7d9e:	aa 1f       	adc	r26, r26
    7da0:	bb 1f       	adc	r27, r27
    7da2:	ee 1f       	adc	r30, r30
    7da4:	ff 1f       	adc	r31, r31
    7da6:	a2 17       	cp	r26, r18
    7da8:	b3 07       	cpc	r27, r19
    7daa:	e4 07       	cpc	r30, r20
    7dac:	f5 07       	cpc	r31, r21
    7dae:	20 f0       	brcs	.+8      	; 0x7db8 <__udivmodsi4_ep>
    7db0:	a2 1b       	sub	r26, r18
    7db2:	b3 0b       	sbc	r27, r19
    7db4:	e4 0b       	sbc	r30, r20
    7db6:	f5 0b       	sbc	r31, r21

00007db8 <__udivmodsi4_ep>:
    7db8:	66 1f       	adc	r22, r22
    7dba:	77 1f       	adc	r23, r23
    7dbc:	88 1f       	adc	r24, r24
    7dbe:	99 1f       	adc	r25, r25
    7dc0:	1a 94       	dec	r1
    7dc2:	69 f7       	brne	.-38     	; 0x7d9e <__udivmodsi4_loop>
    7dc4:	60 95       	com	r22
    7dc6:	70 95       	com	r23
    7dc8:	80 95       	com	r24
    7dca:	90 95       	com	r25
    7dcc:	9b 01       	movw	r18, r22
    7dce:	ac 01       	movw	r20, r24
    7dd0:	bd 01       	movw	r22, r26
    7dd2:	cf 01       	movw	r24, r30
    7dd4:	08 95       	ret

00007dd6 <__tablejump2__>:
    7dd6:	ee 0f       	add	r30, r30
    7dd8:	ff 1f       	adc	r31, r31

00007dda <__tablejump__>:
    7dda:	05 90       	lpm	r0, Z+
    7ddc:	f4 91       	lpm	r31, Z
    7dde:	e0 2d       	mov	r30, r0
    7de0:	09 94       	ijmp

00007de2 <__muluhisi3>:
    7de2:	1d d0       	rcall	.+58     	; 0x7e1e <__umulhisi3>
    7de4:	a5 9f       	mul	r26, r21
    7de6:	90 0d       	add	r25, r0
    7de8:	b4 9f       	mul	r27, r20
    7dea:	90 0d       	add	r25, r0
    7dec:	a4 9f       	mul	r26, r20
    7dee:	80 0d       	add	r24, r0
    7df0:	91 1d       	adc	r25, r1
    7df2:	11 24       	eor	r1, r1
    7df4:	08 95       	ret

00007df6 <__udivmodhi4>:
    7df6:	aa 1b       	sub	r26, r26
    7df8:	bb 1b       	sub	r27, r27
    7dfa:	51 e1       	ldi	r21, 0x11	; 17
    7dfc:	07 c0       	rjmp	.+14     	; 0x7e0c <__udivmodhi4_ep>

00007dfe <__udivmodhi4_loop>:
    7dfe:	aa 1f       	adc	r26, r26
    7e00:	bb 1f       	adc	r27, r27
    7e02:	a6 17       	cp	r26, r22
    7e04:	b7 07       	cpc	r27, r23
    7e06:	10 f0       	brcs	.+4      	; 0x7e0c <__udivmodhi4_ep>
    7e08:	a6 1b       	sub	r26, r22
    7e0a:	b7 0b       	sbc	r27, r23

00007e0c <__udivmodhi4_ep>:
    7e0c:	88 1f       	adc	r24, r24
    7e0e:	99 1f       	adc	r25, r25
    7e10:	5a 95       	dec	r21
    7e12:	a9 f7       	brne	.-22     	; 0x7dfe <__udivmodhi4_loop>
    7e14:	80 95       	com	r24
    7e16:	90 95       	com	r25
    7e18:	bc 01       	movw	r22, r24
    7e1a:	cd 01       	movw	r24, r26
    7e1c:	08 95       	ret

00007e1e <__umulhisi3>:
    7e1e:	a2 9f       	mul	r26, r18
    7e20:	b0 01       	movw	r22, r0
    7e22:	b3 9f       	mul	r27, r19
    7e24:	c0 01       	movw	r24, r0
    7e26:	a3 9f       	mul	r26, r19
    7e28:	70 0d       	add	r23, r0
    7e2a:	81 1d       	adc	r24, r1
    7e2c:	11 24       	eor	r1, r1
    7e2e:	91 1d       	adc	r25, r1
    7e30:	b2 9f       	mul	r27, r18
    7e32:	70 0d       	add	r23, r0
    7e34:	81 1d       	adc	r24, r1
    7e36:	11 24       	eor	r1, r1
    7e38:	91 1d       	adc	r25, r1
    7e3a:	08 95       	ret

00007e3c <memcpy>:
    7e3c:	fb 01       	movw	r30, r22
    7e3e:	dc 01       	movw	r26, r24
    7e40:	02 c0       	rjmp	.+4      	; 0x7e46 <memcpy+0xa>
    7e42:	01 90       	ld	r0, Z+
    7e44:	0d 92       	st	X+, r0
    7e46:	41 50       	subi	r20, 0x01	; 1
    7e48:	50 40       	sbci	r21, 0x00	; 0
    7e4a:	d8 f7       	brcc	.-10     	; 0x7e42 <memcpy+0x6>
    7e4c:	08 95       	ret

00007e4e <memset>:
    7e4e:	dc 01       	movw	r26, r24
    7e50:	01 c0       	rjmp	.+2      	; 0x7e54 <memset+0x6>
    7e52:	6d 93       	st	X+, r22
    7e54:	41 50       	subi	r20, 0x01	; 1
    7e56:	50 40       	sbci	r21, 0x00	; 0
    7e58:	e0 f7       	brcc	.-8      	; 0x7e52 <memset+0x4>
    7e5a:	08 95       	ret

00007e5c <__eerd_byte_m328p>:
    7e5c:	f9 99       	sbic	0x1f, 1	; 31
    7e5e:	fe cf       	rjmp	.-4      	; 0x7e5c <__eerd_byte_m328p>
    7e60:	92 bd       	out	0x22, r25	; 34
    7e62:	81 bd       	out	0x21, r24	; 33
    7e64:	f8 9a       	sbi	0x1f, 0	; 31
    7e66:	99 27       	eor	r25, r25
    7e68:	80 b5       	in	r24, 0x20	; 32
    7e6a:	08 95       	ret

00007e6c <__eerd_word_m328p>:
    7e6c:	a8 e1       	ldi	r26, 0x18	; 24
    7e6e:	b0 e0       	ldi	r27, 0x00	; 0
    7e70:	42 e0       	ldi	r20, 0x02	; 2
    7e72:	50 e0       	ldi	r21, 0x00	; 0
    7e74:	13 c0       	rjmp	.+38     	; 0x7e9c <__eerd_blraw_m328p>

00007e76 <__eewr_byte_m328p>:
    7e76:	26 2f       	mov	r18, r22

00007e78 <__eewr_r18_m328p>:
    7e78:	f9 99       	sbic	0x1f, 1	; 31
    7e7a:	fe cf       	rjmp	.-4      	; 0x7e78 <__eewr_r18_m328p>
    7e7c:	1f ba       	out	0x1f, r1	; 31
    7e7e:	92 bd       	out	0x22, r25	; 34
    7e80:	81 bd       	out	0x21, r24	; 33
    7e82:	20 bd       	out	0x20, r18	; 32
    7e84:	0f b6       	in	r0, 0x3f	; 63
    7e86:	f8 94       	cli
    7e88:	fa 9a       	sbi	0x1f, 2	; 31
    7e8a:	f9 9a       	sbi	0x1f, 1	; 31
    7e8c:	0f be       	out	0x3f, r0	; 63
    7e8e:	01 96       	adiw	r24, 0x01	; 1
    7e90:	08 95       	ret

00007e92 <__eewr_word_m328p>:
    7e92:	f1 df       	rcall	.-30     	; 0x7e76 <__eewr_byte_m328p>
    7e94:	27 2f       	mov	r18, r23
    7e96:	f0 cf       	rjmp	.-32     	; 0x7e78 <__eewr_r18_m328p>

00007e98 <__eerd_block_m328p>:
    7e98:	dc 01       	movw	r26, r24
    7e9a:	cb 01       	movw	r24, r22

00007e9c <__eerd_blraw_m328p>:
    7e9c:	fc 01       	movw	r30, r24
    7e9e:	f9 99       	sbic	0x1f, 1	; 31
    7ea0:	fe cf       	rjmp	.-4      	; 0x7e9e <__eerd_blraw_m328p+0x2>
    7ea2:	06 c0       	rjmp	.+12     	; 0x7eb0 <__eerd_blraw_m328p+0x14>
    7ea4:	f2 bd       	out	0x22, r31	; 34
    7ea6:	e1 bd       	out	0x21, r30	; 33
    7ea8:	f8 9a       	sbi	0x1f, 0	; 31
    7eaa:	31 96       	adiw	r30, 0x01	; 1
    7eac:	00 b4       	in	r0, 0x20	; 32
    7eae:	0d 92       	st	X+, r0
    7eb0:	41 50       	subi	r20, 0x01	; 1
    7eb2:	50 40       	sbci	r21, 0x00	; 0
    7eb4:	b8 f7       	brcc	.-18     	; 0x7ea4 <__eerd_blraw_m328p+0x8>
    7eb6:	08 95       	ret

00007eb8 <__do_global_dtors>:
    7eb8:	13 e0       	ldi	r17, 0x03	; 3
    7eba:	c0 ec       	ldi	r28, 0xC0	; 192
    7ebc:	d3 e0       	ldi	r29, 0x03	; 3
    7ebe:	03 c0       	rjmp	.+6      	; 0x7ec6 <__do_global_dtors+0xe>
    7ec0:	fe 01       	movw	r30, r28
    7ec2:	8b df       	rcall	.-234    	; 0x7dda <__tablejump__>
    7ec4:	22 96       	adiw	r28, 0x02	; 2
    7ec6:	c2 3c       	cpi	r28, 0xC2	; 194
    7ec8:	d1 07       	cpc	r29, r17
    7eca:	d1 f7       	brne	.-12     	; 0x7ec0 <__do_global_dtors+0x8>
    7ecc:	f8 94       	cli

00007ece <__stop_program>:
    7ece:	ff cf       	rjmp	.-2      	; 0x7ece <__stop_program>
